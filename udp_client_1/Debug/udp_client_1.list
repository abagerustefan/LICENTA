
udp_client_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014434  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f30  08014604  08014604  00024604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017534  08017534  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  08017534  08017534  00027534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801753c  0801753c  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801753c  0801753c  0002753c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017540  08017540  00027540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08017544  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000f0  08017634  000300f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000190  080176d4  00030190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000ab14  20000230  08017774  00030230  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000ad44  08017774  0003ad44  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY
 15 .debug_info   00025ac5  00000000  00000000  000302a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006143  00000000  00000000  00055d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001a80  00000000  00000000  0005beb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000150f  00000000  00000000  0005d930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00034894  00000000  00000000  0005ee3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002e39a  00000000  00000000  000936d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001095ad  00000000  00000000  000c1a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007d24  00000000  00000000  001cb01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000050  00000000  00000000  001d2d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000230 	.word	0x20000230
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080145ec 	.word	0x080145ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000234 	.word	0x20000234
 800020c:	080145ec 	.word	0x080145ec

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_ldivmod>:
 8000abc:	b97b      	cbnz	r3, 8000ade <__aeabi_ldivmod+0x22>
 8000abe:	b972      	cbnz	r2, 8000ade <__aeabi_ldivmod+0x22>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bfbe      	ittt	lt
 8000ac4:	2000      	movlt	r0, #0
 8000ac6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000aca:	e006      	blt.n	8000ada <__aeabi_ldivmod+0x1e>
 8000acc:	bf08      	it	eq
 8000ace:	2800      	cmpeq	r0, #0
 8000ad0:	bf1c      	itt	ne
 8000ad2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ad6:	f04f 30ff 	movne.w	r0, #4294967295
 8000ada:	f000 b9bb 	b.w	8000e54 <__aeabi_idiv0>
 8000ade:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae6:	2900      	cmp	r1, #0
 8000ae8:	db09      	blt.n	8000afe <__aeabi_ldivmod+0x42>
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db1a      	blt.n	8000b24 <__aeabi_ldivmod+0x68>
 8000aee:	f000 f84d 	bl	8000b8c <__udivmoddi4>
 8000af2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000afa:	b004      	add	sp, #16
 8000afc:	4770      	bx	lr
 8000afe:	4240      	negs	r0, r0
 8000b00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db1b      	blt.n	8000b40 <__aeabi_ldivmod+0x84>
 8000b08:	f000 f840 	bl	8000b8c <__udivmoddi4>
 8000b0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b14:	b004      	add	sp, #16
 8000b16:	4240      	negs	r0, r0
 8000b18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b1c:	4252      	negs	r2, r2
 8000b1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b22:	4770      	bx	lr
 8000b24:	4252      	negs	r2, r2
 8000b26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b2a:	f000 f82f 	bl	8000b8c <__udivmoddi4>
 8000b2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b36:	b004      	add	sp, #16
 8000b38:	4240      	negs	r0, r0
 8000b3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3e:	4770      	bx	lr
 8000b40:	4252      	negs	r2, r2
 8000b42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b46:	f000 f821 	bl	8000b8c <__udivmoddi4>
 8000b4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b52:	b004      	add	sp, #16
 8000b54:	4252      	negs	r2, r2
 8000b56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b970 	b.w	8000e54 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	460f      	mov	r7, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d14a      	bne.n	8000c32 <__udivmoddi4+0xa6>
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	4694      	mov	ip, r2
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0xe2>
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	b143      	cbz	r3, 8000bba <__udivmoddi4+0x2e>
 8000ba8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bac:	f1c3 0220 	rsb	r2, r3, #32
 8000bb0:	409f      	lsls	r7, r3
 8000bb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb6:	4317      	orrs	r7, r2
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bbe:	fa1f f58c 	uxth.w	r5, ip
 8000bc2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bc6:	0c22      	lsrs	r2, r4, #16
 8000bc8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bcc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd0:	fb01 f005 	mul.w	r0, r1, r5
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x62>
 8000bd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bdc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be0:	f080 811c 	bcs.w	8000e1c <__udivmoddi4+0x290>
 8000be4:	4290      	cmp	r0, r2
 8000be6:	f240 8119 	bls.w	8000e1c <__udivmoddi4+0x290>
 8000bea:	3902      	subs	r1, #2
 8000bec:	4462      	add	r2, ip
 8000bee:	1a12      	subs	r2, r2, r0
 8000bf0:	b2a4      	uxth	r4, r4
 8000bf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bfe:	fb00 f505 	mul.w	r5, r0, r5
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c06:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c0e:	f080 8107 	bcs.w	8000e20 <__udivmoddi4+0x294>
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	f240 8104 	bls.w	8000e20 <__udivmoddi4+0x294>
 8000c18:	4464      	add	r4, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c20:	1b64      	subs	r4, r4, r5
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40dc      	lsrs	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0xbc>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	f000 80ed 	beq.w	8000e16 <__udivmoddi4+0x28a>
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c42:	4608      	mov	r0, r1
 8000c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c48:	fab3 f183 	clz	r1, r3
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	d149      	bne.n	8000ce4 <__udivmoddi4+0x158>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	d302      	bcc.n	8000c5a <__udivmoddi4+0xce>
 8000c54:	4282      	cmp	r2, r0
 8000c56:	f200 80f8 	bhi.w	8000e4a <__udivmoddi4+0x2be>
 8000c5a:	1a84      	subs	r4, r0, r2
 8000c5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c60:	2001      	movs	r0, #1
 8000c62:	4617      	mov	r7, r2
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d0e2      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000c68:	e9c6 4700 	strd	r4, r7, [r6]
 8000c6c:	e7df      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xe6>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f382 	clz	r3, r2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 8090 	bne.w	8000d9c <__udivmoddi4+0x210>
 8000c7c:	1a8a      	subs	r2, r1, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f fe8c 	uxth.w	lr, ip
 8000c86:	2101      	movs	r1, #1
 8000c88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c90:	0c22      	lsrs	r2, r4, #16
 8000c92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c96:	fb0e f005 	mul.w	r0, lr, r5
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x124>
 8000c9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x122>
 8000ca8:	4290      	cmp	r0, r2
 8000caa:	f200 80cb 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000cae:	4645      	mov	r5, r8
 8000cb0:	1a12      	subs	r2, r2, r0
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc4:	45a6      	cmp	lr, r4
 8000cc6:	d908      	bls.n	8000cda <__udivmoddi4+0x14e>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x14c>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f200 80bb 	bhi.w	8000e4e <__udivmoddi4+0x2c2>
 8000cd8:	4610      	mov	r0, r2
 8000cda:	eba4 040e 	sub.w	r4, r4, lr
 8000cde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce2:	e79f      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ce4:	f1c1 0720 	rsb	r7, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfa:	40fd      	lsrs	r5, r7
 8000cfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d00:	4323      	orrs	r3, r4
 8000d02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d0e:	0c1c      	lsrs	r4, r3, #16
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb08 f50e 	mul.w	r5, r8, lr
 8000d18:	42a5      	cmp	r5, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d22:	d90b      	bls.n	8000d3c <__udivmoddi4+0x1b0>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d2c:	f080 8088 	bcs.w	8000e40 <__udivmoddi4+0x2b4>
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	f240 8085 	bls.w	8000e40 <__udivmoddi4+0x2b4>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	4464      	add	r4, ip
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	b29d      	uxth	r5, r3
 8000d40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d44:	fb09 4413 	mls	r4, r9, r3, r4
 8000d48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x1da>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d5c:	d26c      	bcs.n	8000e38 <__udivmoddi4+0x2ac>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	d96a      	bls.n	8000e38 <__udivmoddi4+0x2ac>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	4464      	add	r4, ip
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	42ac      	cmp	r4, r5
 8000d74:	46c8      	mov	r8, r9
 8000d76:	46ae      	mov	lr, r5
 8000d78:	d356      	bcc.n	8000e28 <__udivmoddi4+0x29c>
 8000d7a:	d053      	beq.n	8000e24 <__udivmoddi4+0x298>
 8000d7c:	b156      	cbz	r6, 8000d94 <__udivmoddi4+0x208>
 8000d7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d82:	eb64 040e 	sbc.w	r4, r4, lr
 8000d86:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8a:	40ca      	lsrs	r2, r1
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	e9c6 7400 	strd	r7, r4, [r6]
 8000d94:	4618      	mov	r0, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9c:	f1c3 0120 	rsb	r1, r3, #32
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	fa20 f201 	lsr.w	r2, r0, r1
 8000da8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dac:	409d      	lsls	r5, r3
 8000dae:	432a      	orrs	r2, r5
 8000db0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db4:	fa1f fe8c 	uxth.w	lr, ip
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc0:	0c11      	lsrs	r1, r2, #16
 8000dc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dca:	428d      	cmp	r5, r1
 8000dcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x258>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dda:	d22f      	bcs.n	8000e3c <__udivmoddi4+0x2b0>
 8000ddc:	428d      	cmp	r5, r1
 8000dde:	d92d      	bls.n	8000e3c <__udivmoddi4+0x2b0>
 8000de0:	3802      	subs	r0, #2
 8000de2:	4461      	add	r1, ip
 8000de4:	1b49      	subs	r1, r1, r5
 8000de6:	b292      	uxth	r2, r2
 8000de8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dec:	fb07 1115 	mls	r1, r7, r5, r1
 8000df0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df4:	fb05 f10e 	mul.w	r1, r5, lr
 8000df8:	4291      	cmp	r1, r2
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x282>
 8000dfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000e00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e04:	d216      	bcs.n	8000e34 <__udivmoddi4+0x2a8>
 8000e06:	4291      	cmp	r1, r2
 8000e08:	d914      	bls.n	8000e34 <__udivmoddi4+0x2a8>
 8000e0a:	3d02      	subs	r5, #2
 8000e0c:	4462      	add	r2, ip
 8000e0e:	1a52      	subs	r2, r2, r1
 8000e10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e14:	e738      	b.n	8000c88 <__udivmoddi4+0xfc>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e708      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e1c:	4639      	mov	r1, r7
 8000e1e:	e6e6      	b.n	8000bee <__udivmoddi4+0x62>
 8000e20:	4610      	mov	r0, r2
 8000e22:	e6fb      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e24:	4548      	cmp	r0, r9
 8000e26:	d2a9      	bcs.n	8000d7c <__udivmoddi4+0x1f0>
 8000e28:	ebb9 0802 	subs.w	r8, r9, r2
 8000e2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e30:	3b01      	subs	r3, #1
 8000e32:	e7a3      	b.n	8000d7c <__udivmoddi4+0x1f0>
 8000e34:	4645      	mov	r5, r8
 8000e36:	e7ea      	b.n	8000e0e <__udivmoddi4+0x282>
 8000e38:	462b      	mov	r3, r5
 8000e3a:	e794      	b.n	8000d66 <__udivmoddi4+0x1da>
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	e7d1      	b.n	8000de4 <__udivmoddi4+0x258>
 8000e40:	46d0      	mov	r8, sl
 8000e42:	e77b      	b.n	8000d3c <__udivmoddi4+0x1b0>
 8000e44:	3d02      	subs	r5, #2
 8000e46:	4462      	add	r2, ip
 8000e48:	e732      	b.n	8000cb0 <__udivmoddi4+0x124>
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e70a      	b.n	8000c64 <__udivmoddi4+0xd8>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e742      	b.n	8000cda <__udivmoddi4+0x14e>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <convert_rtc_to_ntp>:
struct tm timeinfo_for_alarm2;
bool isRequested = false;
bool isUpdated = false;

void convert_rtc_to_ntp(ntp_timestamp_t * ntp_time)
{
 8000e58:	b5b0      	push	{r4, r5, r7, lr}
 8000e5a:	b096      	sub	sp, #88	; 0x58
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef sDate;
	struct tm timeinfo;
	time_t unix_time;

	// Preia data si ora curente din RTC
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000e60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e64:	2200      	movs	r2, #0
 8000e66:	4619      	mov	r1, r3
 8000e68:	482f      	ldr	r0, [pc, #188]	; (8000f28 <convert_rtc_to_ntp+0xd0>)
 8000e6a:	f004 fac5 	bl	80053f8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000e6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e72:	2200      	movs	r2, #0
 8000e74:	4619      	mov	r1, r3
 8000e76:	482c      	ldr	r0, [pc, #176]	; (8000f28 <convert_rtc_to_ntp+0xd0>)
 8000e78:	f004 fba0 	bl	80055bc <HAL_RTC_GetDate>

	// Completeaza structura tm
	timeinfo.tm_hour = sTime.Hours;
 8000e7c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e80:	617b      	str	r3, [r7, #20]
	timeinfo.tm_min = sTime.Minutes;
 8000e82:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000e86:	613b      	str	r3, [r7, #16]
	timeinfo.tm_sec = sTime.Seconds;
 8000e88:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e8c:	60fb      	str	r3, [r7, #12]
	timeinfo.tm_mday = sDate.Date;
 8000e8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000e92:	61bb      	str	r3, [r7, #24]
	timeinfo.tm_mon = sDate.Month - 1; // struct tm are lunile de la 0 la 11
 8000e94:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	61fb      	str	r3, [r7, #28]
	timeinfo.tm_year = sDate.Year + 2000 - 1900; // struct tm are anii de la 1900
 8000e9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ea0:	3364      	adds	r3, #100	; 0x64
 8000ea2:	623b      	str	r3, [r7, #32]
	timeinfo.tm_isdst = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Convertire structura tm in timp UNIX
	unix_time = mktime(&timeinfo);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4618      	mov	r0, r3
 8000eae:	f011 fb8f 	bl	80125d0 <mktime>
 8000eb2:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50

	// Adaugare offset NTP pentru a obtine timpul in format NTP
	ntp_time->seconds = unix_time + NTP_UNIX_OFFSET;
 8000eb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <convert_rtc_to_ntp+0xd4>)
 8000eba:	4413      	add	r3, r2
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6013      	str	r3, [r2, #0]

	// Calculare fractiuni de secunda pentru RTC
	double fractiune = 0 ;
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	fractiune = sTime.SubSeconds*1.0 / sTime.SecondFraction;
 8000ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fb48 	bl	8000564 <__aeabi_ui2d>
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	460d      	mov	r5, r1
 8000ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fb42 	bl	8000564 <__aeabi_ui2d>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	f7ff fce0 	bl	80008ac <__aeabi_ddiv>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	ntp_time->fraction = MAX_VALUE_FOR_NTP_FRACTION * fractiune;
 8000ef4:	a30a      	add	r3, pc, #40	; (adr r3, 8000f20 <convert_rtc_to_ntp+0xc8>)
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000efe:	f7ff fbab 	bl	8000658 <__aeabi_dmul>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f7ff fdb7 	bl	8000a7c <__aeabi_d2uiz>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	605a      	str	r2, [r3, #4]
}
 8000f14:	bf00      	nop
 8000f16:	3758      	adds	r7, #88	; 0x58
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f1c:	f3af 8000 	nop.w
 8000f20:	ffe00000 	.word	0xffe00000
 8000f24:	41efffff 	.word	0x41efffff
 8000f28:	20000264 	.word	0x20000264
 8000f2c:	83aa7e80 	.word	0x83aa7e80

08000f30 <convert_ntp_to_rtc>:


void convert_ntp_to_rtc(ntp_timestamp_t ntp_time)
{
 8000f30:	b5b0      	push	{r4, r5, r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	463b      	mov	r3, r7
 8000f38:	e883 0003 	stmia.w	r3, {r0, r1}
    RTC_DateTypeDef sDate;
    struct tm timeinfo;
    time_t unix_time;

    // Convertire timp NTP in timp UNIX
    unix_time = ntp_time.seconds - NTP_UNIX_OFFSET;
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	4b46      	ldr	r3, [pc, #280]	; (8001058 <convert_ntp_to_rtc+0x128>)
 8000f40:	4413      	add	r3, r2
 8000f42:	2200      	movs	r2, #0
 8000f44:	461c      	mov	r4, r3
 8000f46:	4615      	mov	r5, r2
 8000f48:	e9c7 4502 	strd	r4, r5, [r7, #8]

    // Convertire timpul UNIX intr-o structura tm
    gmtime_r(&unix_time, &timeinfo);
 8000f4c:	f107 0210 	add.w	r2, r7, #16
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f011 f9be 	bl	80122d8 <gmtime_r>

    // Completare structurile RTC_TimeTypeDef si RTC_DateTypeDef
    sTime.Hours = timeinfo.tm_hour;
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    sTime.Minutes = timeinfo.tm_min;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    sTime.Seconds = timeinfo.tm_sec;
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    sDate.WeekDay = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    sDate.Date = timeinfo.tm_mday;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    sDate.Month = timeinfo.tm_mon + 1; // struct tm are lunile de la 0 la 11
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	3301      	adds	r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    sDate.Year = timeinfo.tm_year + 1900 - 2000; // struct tm are anii de la 1900
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	3b64      	subs	r3, #100	; 0x64
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    // Seteaza data si ora in RTC
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000f9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	482e      	ldr	r0, [pc, #184]	; (800105c <convert_ntp_to_rtc+0x12c>)
 8000fa4:	f004 f98e 	bl	80052c4 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000fa8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fac:	2200      	movs	r2, #0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	482a      	ldr	r0, [pc, #168]	; (800105c <convert_ntp_to_rtc+0x12c>)
 8000fb2:	f004 fa7f 	bl	80054b4 <HAL_RTC_SetDate>

//    isUpdated = true;

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000fb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4827      	ldr	r0, [pc, #156]	; (800105c <convert_ntp_to_rtc+0x12c>)
 8000fc0:	f004 fa1a 	bl	80053f8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000fc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4823      	ldr	r0, [pc, #140]	; (800105c <convert_ntp_to_rtc+0x12c>)
 8000fce:	f004 faf5 	bl	80055bc <HAL_RTC_GetDate>
    uint32_t rtc_subseconds = (ntp_time.fraction * 1.0 * FRACTIUNE_DE_SECUNDA_RTC) / MAX_VALUE_FOR_NTP_FRACTION;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fac5 	bl	8000564 <__aeabi_ui2d>
 8000fda:	a31b      	add	r3, pc, #108	; (adr r3, 8001048 <convert_ntp_to_rtc+0x118>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff fb3a 	bl	8000658 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	a318      	add	r3, pc, #96	; (adr r3, 8001050 <convert_ntp_to_rtc+0x120>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f7ff fc5b 	bl	80008ac <__aeabi_ddiv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f7ff fd3d 	bl	8000a7c <__aeabi_d2uiz>
 8001002:	4603      	mov	r3, r0
 8001004:	64fb      	str	r3, [r7, #76]	; 0x4c
    if(sTime.SubSeconds>rtc_subseconds)
 8001006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001008:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800100a:	429a      	cmp	r2, r3
 800100c:	d215      	bcs.n	800103a <convert_ntp_to_rtc+0x10a>
    {
        while(sTime.SubSeconds>rtc_subseconds)
 800100e:	e00d      	b.n	800102c <convert_ntp_to_rtc+0xfc>
        {
            HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001010:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001014:	2200      	movs	r2, #0
 8001016:	4619      	mov	r1, r3
 8001018:	4810      	ldr	r0, [pc, #64]	; (800105c <convert_ntp_to_rtc+0x12c>)
 800101a:	f004 f9ed 	bl	80053f8 <HAL_RTC_GetTime>
            HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800101e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001022:	2200      	movs	r2, #0
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <convert_ntp_to_rtc+0x12c>)
 8001028:	f004 fac8 	bl	80055bc <HAL_RTC_GetDate>
        while(sTime.SubSeconds>rtc_subseconds)
 800102c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800102e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001030:	429a      	cmp	r2, r3
 8001032:	d3ed      	bcc.n	8001010 <convert_ntp_to_rtc+0xe0>
        }
        isUpdated = true;
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <convert_ntp_to_rtc+0x130>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
    }
}
 800103a:	bf00      	nop
 800103c:	3750      	adds	r7, #80	; 0x50
 800103e:	46bd      	mov	sp, r7
 8001040:	bdb0      	pop	{r4, r5, r7, pc}
 8001042:	bf00      	nop
 8001044:	f3af 8000 	nop.w
 8001048:	00000000 	.word	0x00000000
 800104c:	40a36000 	.word	0x40a36000
 8001050:	ffe00000 	.word	0xffe00000
 8001054:	41efffff 	.word	0x41efffff
 8001058:	7c558180 	.word	0x7c558180
 800105c:	20000264 	.word	0x20000264
 8001060:	20000261 	.word	0x20000261

08001064 <convert_ntp_to_tm>:

// Functie care converteste din format NTP in format UNIX
struct tm convert_ntp_to_tm(ntp_timestamp_t ntp_time)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b090      	sub	sp, #64	; 0x40
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	e883 0006 	stmia.w	r3, {r1, r2}
	time_t unix_time;
	struct tm timeinfo;
	unix_time = ntp_time.seconds - NTP_UNIX_OFFSET;
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <convert_ntp_to_tm+0x4c>)
 8001076:	4413      	add	r3, r2
 8001078:	2200      	movs	r2, #0
 800107a:	461c      	mov	r4, r3
 800107c:	4615      	mov	r5, r2
 800107e:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38

	gmtime_r(&unix_time, &timeinfo);
 8001082:	f107 0214 	add.w	r2, r7, #20
 8001086:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f011 f923 	bl	80122d8 <gmtime_r>

	return timeinfo;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	461d      	mov	r5, r3
 8001096:	f107 0414 	add.w	r4, r7, #20
 800109a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	602b      	str	r3, [r5, #0]
}
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	3740      	adds	r7, #64	; 0x40
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bdb0      	pop	{r4, r5, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	7c558180 	.word	0x7c558180

080010b4 <set_alarm_from_serv>:


// Functie care seteaza intrerupere pentru alarma A
void set_alarm_from_serv(ntp_timestamp_t ntp_time)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0a0      	sub	sp, #128	; 0x80
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	463b      	mov	r3, r7
 80010bc:	e883 0003 	stmia.w	r3, {r0, r1}
	RTC_AlarmTypeDef sAlarm, getsAlarm;
    struct tm timeinfo;

    // Convertire in format compatibil cu RTC
    timeinfo = convert_ntp_to_tm(ntp_time);
 80010c0:	f107 000c 	add.w	r0, r7, #12
 80010c4:	463b      	mov	r3, r7
 80010c6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80010ca:	f7ff ffcb 	bl	8001064 <convert_ntp_to_tm>

    // Setare parametrii pentru alarma A
	sAlarm.AlarmTime.Hours = timeinfo.tm_hour;
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	sAlarm.AlarmTime.Minutes = timeinfo.tm_min;
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	sAlarm.AlarmTime.Seconds = timeinfo.tm_sec;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	sAlarm.AlarmTime.SubSeconds = ntp_time.fraction;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	65fb      	str	r3, [r7, #92]	; 0x5c
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	667b      	str	r3, [r7, #100]	; 0x64
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010ee:	2300      	movs	r3, #0
 80010f0:	66bb      	str	r3, [r7, #104]	; 0x68
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80010f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80010f6:	66fb      	str	r3, [r7, #108]	; 0x6c
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14;
 80010f8:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 80010fc:	673b      	str	r3, [r7, #112]	; 0x70
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80010fe:	2300      	movs	r3, #0
 8001100:	677b      	str	r3, [r7, #116]	; 0x74
	sAlarm.AlarmDateWeekDay = timeinfo.tm_mday;
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	sAlarm.Alarm = RTC_ALARM_A;
 800110a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800110e:	67fb      	str	r3, [r7, #124]	; 0x7c

	while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8001110:	bf00      	nop
 8001112:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	4809      	ldr	r0, [pc, #36]	; (8001140 <set_alarm_from_serv+0x8c>)
 800111c:	f004 fa9e 	bl	800565c <HAL_RTC_SetAlarm_IT>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f5      	bne.n	8001112 <set_alarm_from_serv+0x5e>

	HAL_RTC_GetAlarm(&hrtc,&getsAlarm,RTC_ALARM_A,FORMAT_BIN);
 8001126:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800112a:	2300      	movs	r3, #0
 800112c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <set_alarm_from_serv+0x8c>)
 8001132:	f004 fbd5 	bl	80058e0 <HAL_RTC_GetAlarm>
}
 8001136:	bf00      	nop
 8001138:	3780      	adds	r7, #128	; 0x80
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000264 	.word	0x20000264

08001144 <udp_client_connect>:


void udp_client_connect(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
    ip_addr_t server_ip;
    err_t err;

    // Creare un nou block UDP
    udp_client_pcb = udp_new();
 800114a:	f00e fba5 	bl	800f898 <udp_new>
 800114e:	4603      	mov	r3, r0
 8001150:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <udp_client_connect+0x84>)
 8001152:	6013      	str	r3, [r2, #0]
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 192, 168, 137, 110);
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <udp_client_connect+0x88>)
 8001156:	607b      	str	r3, [r7, #4]
	udp_bind(udp_client_pcb, &myIPaddr, 1234);
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <udp_client_connect+0x84>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	1d39      	adds	r1, r7, #4
 800115e:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8001162:	4618      	mov	r0, r3
 8001164:	f00e fa40 	bl	800f5e8 <udp_bind>
    if (udp_client_pcb == NULL) {
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <udp_client_connect+0x84>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d026      	beq.n	80011be <udp_client_connect+0x7a>
        return;
    }

    // Setare IP-ului serverului
    IP4_ADDR(&server_ip, 192, 168, 137, 1);
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <udp_client_connect+0x8c>)
 8001172:	60bb      	str	r3, [r7, #8]

    // Conectare la server
    err = udp_connect(udp_client_pcb, &server_ip, 1234); // Server port
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <udp_client_connect+0x84>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f107 0108 	add.w	r1, r7, #8
 800117c:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8001180:	4618      	mov	r0, r3
 8001182:	f00e fab9 	bl	800f6f8 <udp_connect>
 8001186:	4603      	mov	r3, r0
 8001188:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00d      	beq.n	80011ae <udp_client_connect+0x6a>
        printf("Cannot connect to server. Error: %d\n", err);
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	4619      	mov	r1, r3
 8001198:	480e      	ldr	r0, [pc, #56]	; (80011d4 <udp_client_connect+0x90>)
 800119a:	f011 f81b 	bl	80121d4 <iprintf>
        udp_remove(udp_client_pcb);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <udp_client_connect+0x84>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00e fb36 	bl	800f814 <udp_remove>
        udp_client_pcb = NULL;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <udp_client_connect+0x84>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
    }

    // Setare functie de callback
    udp_recv(udp_client_pcb, udp_receive_callback, NULL);
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <udp_client_connect+0x84>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	4908      	ldr	r1, [pc, #32]	; (80011d8 <udp_client_connect+0x94>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f00e fb0c 	bl	800f7d4 <udp_recv>
 80011bc:	e000      	b.n	80011c0 <udp_client_connect+0x7c>
        return;
 80011be:	bf00      	nop
}
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000024c 	.word	0x2000024c
 80011cc:	6e89a8c0 	.word	0x6e89a8c0
 80011d0:	0189a8c0 	.word	0x0189a8c0
 80011d4:	08014604 	.word	0x08014604
 80011d8:	08001249 	.word	0x08001249

080011dc <udp_client_send>:

void udp_client_send(const char* message)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    struct pbuf *p;

    // Alocare pbuf
    p = pbuf_alloc(PBUF_TRANSPORT, strlen(message), PBUF_RAM);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff f81d 	bl	8000224 <strlen>
 80011ea:	4603      	mov	r3, r0
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80011f2:	4619      	mov	r1, r3
 80011f4:	2036      	movs	r0, #54	; 0x36
 80011f6:	f007 fd85 	bl	8008d04 <pbuf_alloc>
 80011fa:	60f8      	str	r0, [r7, #12]
    if (p == NULL) {
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d017      	beq.n	8001232 <udp_client_send+0x56>
        return;
    }

    // Copiaza mesajul parametru in pbuf
    memcpy(p->payload, message, strlen(message));
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	685c      	ldr	r4, [r3, #4]
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff f80c 	bl	8000224 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4620      	mov	r0, r4
 8001214:	f011 fecd 	bl	8012fb2 <memcpy>

    // Trimitere pbuf
    if (udp_send(udp_client_pcb, p) != ERR_OK) {
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <udp_client_send+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68f9      	ldr	r1, [r7, #12]
 800121e:	4618      	mov	r0, r3
 8001220:	f00d fff8 	bl	800f214 <udp_send>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d105      	bne.n	8001236 <udp_client_send+0x5a>
    	return;
    }

    /* Free pbuf */
    pbuf_free(p);
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f008 f84e 	bl	80092cc <pbuf_free>
 8001230:	e002      	b.n	8001238 <udp_client_send+0x5c>
        return;
 8001232:	bf00      	nop
 8001234:	e000      	b.n	8001238 <udp_client_send+0x5c>
    	return;
 8001236:	bf00      	nop
}
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bd90      	pop	{r4, r7, pc}
 800123e:	bf00      	nop
 8001240:	2000024c 	.word	0x2000024c
 8001244:	00000000 	.word	0x00000000

08001248 <udp_receive_callback>:

void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	603b      	str	r3, [r7, #0]
	// Verificare pbuf daca este gol
    if (p != NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 8096 	beq.w	800138a <udp_receive_callback+0x142>
    {
    	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	4851      	ldr	r0, [pc, #324]	; (80013a8 <udp_receive_callback+0x160>)
 8001262:	f002 fc2c 	bl	8003abe <HAL_GPIO_TogglePin>
    	HAL_Delay(2);
 8001266:	2002      	movs	r0, #2
 8001268:	f001 f80a 	bl	8002280 <HAL_Delay>
    	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800126c:	2180      	movs	r1, #128	; 0x80
 800126e:	484e      	ldr	r0, [pc, #312]	; (80013a8 <udp_receive_callback+0x160>)
 8001270:	f002 fc25 	bl	8003abe <HAL_GPIO_TogglePin>
    	// Verificare daca lungimea este de 16 bytes
        if (p->len == 16)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	895b      	ldrh	r3, [r3, #10]
 8001278:	2b10      	cmp	r3, #16
 800127a:	f040 8083 	bne.w	8001384 <udp_receive_callback+0x13c>
        {
            uint64_t ntp_time1, ntp_time2;
            uint32_t sec, frac;

            // Parsare date in doua structuri ntp
            memcpy(&ntp_time1, p->payload, 8);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6859      	ldr	r1, [r3, #4]
 8001282:	f107 0318 	add.w	r3, r7, #24
 8001286:	2208      	movs	r2, #8
 8001288:	4618      	mov	r0, r3
 800128a:	f011 fe92 	bl	8012fb2 <memcpy>
            memcpy(&ntp_time2, (uint8_t*)p->payload + 8, 8);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f103 0108 	add.w	r1, r3, #8
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	2208      	movs	r2, #8
 800129c:	4618      	mov	r0, r3
 800129e:	f011 fe88 	bl	8012fb2 <memcpy>

            frac = (uint32_t)(ntp_time1 >> 32);
 80012a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	000a      	movs	r2, r1
 80012b0:	2300      	movs	r3, #0
 80012b2:	4613      	mov	r3, r2
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
            sec = (uint32_t)ntp_time1;
 80012b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012ba:	4613      	mov	r3, r2
 80012bc:	623b      	str	r3, [r7, #32]

            // Convertire din network byte order to host byte order
            sec = lwip_ntohl(sec);
 80012be:	6a38      	ldr	r0, [r7, #32]
 80012c0:	f006 fcbb 	bl	8007c3a <lwip_htonl>
 80012c4:	6238      	str	r0, [r7, #32]
            frac =  lwip_ntohl(frac);
 80012c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012c8:	f006 fcb7 	bl	8007c3a <lwip_htonl>
 80012cc:	6278      	str	r0, [r7, #36]	; 0x24

            // Setare parametrii
            ntp1_for_alarm.seconds = sec;
 80012ce:	4a37      	ldr	r2, [pc, #220]	; (80013ac <udp_receive_callback+0x164>)
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	6013      	str	r3, [r2, #0]
            ntp1_for_alarm.fraction = (frac* 1.0 * FRACTIUNE_DE_SECUNDA_RTC) / MAX_VALUE_FOR_NTP_FRACTION;
 80012d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012d6:	f7ff f945 	bl	8000564 <__aeabi_ui2d>
 80012da:	a32f      	add	r3, pc, #188	; (adr r3, 8001398 <udp_receive_callback+0x150>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	f7ff f9ba 	bl	8000658 <__aeabi_dmul>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	a32c      	add	r3, pc, #176	; (adr r3, 80013a0 <udp_receive_callback+0x158>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	f7ff fadb 	bl	80008ac <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff fbbd 	bl	8000a7c <__aeabi_d2uiz>
 8001302:	4603      	mov	r3, r0
 8001304:	4a29      	ldr	r2, [pc, #164]	; (80013ac <udp_receive_callback+0x164>)
 8001306:	6053      	str	r3, [r2, #4]

            // Setare alarma A pentru T0
            set_alarm_from_serv(ntp1_for_alarm);
 8001308:	4b28      	ldr	r3, [pc, #160]	; (80013ac <udp_receive_callback+0x164>)
 800130a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800130e:	f7ff fed1 	bl	80010b4 <set_alarm_from_serv>
            ntp1_for_alarm.seconds = 0;
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <udp_receive_callback+0x164>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
            ntp1_for_alarm.fraction = 0;
 8001318:	4b24      	ldr	r3, [pc, #144]	; (80013ac <udp_receive_callback+0x164>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]

            frac = (uint32_t)(ntp_time2 >> 32);
 800131e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	000a      	movs	r2, r1
 800132c:	2300      	movs	r3, #0
 800132e:	4613      	mov	r3, r2
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
            sec = (uint32_t)ntp_time2;
 8001332:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001336:	4613      	mov	r3, r2
 8001338:	623b      	str	r3, [r7, #32]

            sec = lwip_ntohl(sec);
 800133a:	6a38      	ldr	r0, [r7, #32]
 800133c:	f006 fc7d 	bl	8007c3a <lwip_htonl>
 8001340:	6238      	str	r0, [r7, #32]
            frac = lwip_ntohl(frac);
 8001342:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001344:	f006 fc79 	bl	8007c3a <lwip_htonl>
 8001348:	6278      	str	r0, [r7, #36]	; 0x24

            ntp2_for_alarm.seconds = sec;
 800134a:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <udp_receive_callback+0x168>)
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	6013      	str	r3, [r2, #0]
            ntp2_for_alarm.fraction = (frac* 1.0 * FRACTIUNE_DE_SECUNDA_RTC) / MAX_VALUE_FOR_NTP_FRACTION;
 8001350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001352:	f7ff f907 	bl	8000564 <__aeabi_ui2d>
 8001356:	a310      	add	r3, pc, #64	; (adr r3, 8001398 <udp_receive_callback+0x150>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff f97c 	bl	8000658 <__aeabi_dmul>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	a30d      	add	r3, pc, #52	; (adr r3, 80013a0 <udp_receive_callback+0x158>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	f7ff fa9d 	bl	80008ac <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	f7ff fb7f 	bl	8000a7c <__aeabi_d2uiz>
 800137e:	4603      	mov	r3, r0
 8001380:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <udp_receive_callback+0x168>)
 8001382:	6053      	str	r3, [r2, #4]
        }
        pbuf_free(p);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f007 ffa1 	bl	80092cc <pbuf_free>
    }

}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	f3af 8000 	nop.w
 8001398:	00000000 	.word	0x00000000
 800139c:	40a36000 	.word	0x40a36000
 80013a0:	ffe00000 	.word	0xffe00000
 80013a4:	41efffff 	.word	0x41efffff
 80013a8:	40020400 	.word	0x40020400
 80013ac:	20000250 	.word	0x20000250
 80013b0:	20000258 	.word	0x20000258

080013b4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2200      	movs	r2, #0
 80013c2:	4619      	mov	r1, r3
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f004 f817 	bl	80053f8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	2200      	movs	r2, #0
 80013d0:	4619      	mov	r1, r3
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f004 f8f2 	bl	80055bc <HAL_RTC_GetDate>

	if(ntp2_for_alarm.seconds == 0 && ntp2_for_alarm.fraction == 0)
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_RTC_AlarmAEventCallback+0x6c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d107      	bne.n	80013f0 <HAL_RTC_AlarmAEventCallback+0x3c>
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <HAL_RTC_AlarmAEventCallback+0x6c>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d103      	bne.n	80013f0 <HAL_RTC_AlarmAEventCallback+0x3c>
	{
		isRequested = false;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_RTC_AlarmAEventCallback+0x70>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	e00a      	b.n	8001406 <HAL_RTC_AlarmAEventCallback+0x52>
//		isUpdated = false;
	}
	else
	{
		//Setare alarma A pentru T1
		set_alarm_from_serv(ntp2_for_alarm);
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RTC_AlarmAEventCallback+0x6c>)
 80013f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013f6:	f7ff fe5d 	bl	80010b4 <set_alarm_from_serv>
		ntp2_for_alarm.seconds = 0;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_RTC_AlarmAEventCallback+0x6c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
		ntp2_for_alarm.fraction = 0;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8001402:	2200      	movs	r2, #0
 8001404:	605a      	str	r2, [r3, #4]
	}
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001406:	2101      	movs	r1, #1
 8001408:	4807      	ldr	r0, [pc, #28]	; (8001428 <HAL_RTC_AlarmAEventCallback+0x74>)
 800140a:	f002 fb58 	bl	8003abe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800140e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <HAL_RTC_AlarmAEventCallback+0x74>)
 8001414:	f002 fb53 	bl	8003abe <HAL_GPIO_TogglePin>
}
 8001418:	bf00      	nop
 800141a:	3720      	adds	r7, #32
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000258 	.word	0x20000258
 8001424:	20000260 	.word	0x20000260
 8001428:	40020400 	.word	0x40020400

0800142c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001430:	f3bf 8f4f 	dsb	sy
}
 8001434:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001436:	f3bf 8f6f 	isb	sy
}
 800143a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <SCB_EnableICache+0x48>)
 800143e:	2200      	movs	r2, #0
 8001440:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001444:	f3bf 8f4f 	dsb	sy
}
 8001448:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800144a:	f3bf 8f6f 	isb	sy
}
 800144e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <SCB_EnableICache+0x48>)
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	4a07      	ldr	r2, [pc, #28]	; (8001474 <SCB_EnableICache+0x48>)
 8001456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800145c:	f3bf 8f4f 	dsb	sy
}
 8001460:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001462:	f3bf 8f6f 	isb	sy
}
 8001466:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <SCB_EnableDCache+0x84>)
 8001480:	2200      	movs	r2, #0
 8001482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001486:	f3bf 8f4f 	dsb	sy
}
 800148a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <SCB_EnableDCache+0x84>)
 800148e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001492:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	0b5b      	lsrs	r3, r3, #13
 8001498:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800149c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	08db      	lsrs	r3, r3, #3
 80014a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014a6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	015a      	lsls	r2, r3, #5
 80014ac:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80014b0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014b6:	4911      	ldr	r1, [pc, #68]	; (80014fc <SCB_EnableDCache+0x84>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	60ba      	str	r2, [r7, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1ef      	bne.n	80014a8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	1e5a      	subs	r2, r3, #1
 80014cc:	60fa      	str	r2, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1e5      	bne.n	800149e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80014d2:	f3bf 8f4f 	dsb	sy
}
 80014d6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <SCB_EnableDCache+0x84>)
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <SCB_EnableDCache+0x84>)
 80014de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014e4:	f3bf 8f4f 	dsb	sy
}
 80014e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014ea:	f3bf 8f6f 	isb	sy
}
 80014ee:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b092      	sub	sp, #72	; 0x48
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001506:	f7ff ff91 	bl	800142c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800150a:	f7ff ffb5 	bl	8001478 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150e:	f000 fe51 	bl	80021b4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_RCC_DeInit();
 8001512:	f002 fc37 	bl	8003d84 <HAL_RCC_DeInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001516:	f000 f867 	bl	80015e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151a:	f000 f9c7 	bl	80018ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800151e:	f000 f967 	bl	80017f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001522:	f000 f995 	bl	8001850 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8001526:	f005 faf5 	bl	8006b14 <MX_LWIP_Init>
  MX_RTC_Init();
 800152a:	f000 f8c5 	bl	80016b8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  sntp_setoperatingmode(SNTP_OPMODE_POLL); //setare in polling mode pentru sntp
 800152e:	2000      	movs	r0, #0
 8001530:	f006 fb20 	bl	8007b74 <sntp_setoperatingmode>
  HAL_RTC_RegisterCallback(&hrtc, HAL_RTC_ALARM_A_EVENT_CB_ID, HAL_RTC_AlarmAEventCallback); //setare noua rutina pentru intrerupere
 8001534:	4a25      	ldr	r2, [pc, #148]	; (80015cc <main+0xcc>)
 8001536:	2100      	movs	r1, #0
 8001538:	4825      	ldr	r0, [pc, #148]	; (80015d0 <main+0xd0>)
 800153a:	f003 fe37 	bl	80051ac <HAL_RTC_RegisterCallback>

  ip_addr_t server_ntp;
  server_ntp.addr = 0x0189A8C0; //serverul NTP: 192.168.1.1
 800153e:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <main+0xd4>)
 8001540:	647b      	str	r3, [r7, #68]	; 0x44
  sntp_setserver(0, &server_ntp);
 8001542:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001546:	4619      	mov	r1, r3
 8001548:	2000      	movs	r0, #0
 800154a:	f006 fb41 	bl	8007bd0 <sntp_setserver>

  sntp_init();
 800154e:	f006 fa99 	bl	8007a84 <sntp_init>
  sntp_enabled();
 8001552:	f006 faff 	bl	8007b54 <sntp_enabled>
  RTC_TimeTypeDef time_rtc = {0};
 8001556:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date_rtc = {0};
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2228      	movs	r2, #40	; 0x28
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f010 fe96 	bl	80122a2 <memset>

  udp_client_connect();
 8001576:	f7ff fde5 	bl	8001144 <udp_client_connect>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 800157a:	4817      	ldr	r0, [pc, #92]	; (80015d8 <main+0xd8>)
 800157c:	f005 fd5a 	bl	8007034 <ethernetif_input>

	  HAL_RTC_GetTime(&hrtc, &time_rtc, RTC_FORMAT_BIN);
 8001580:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001584:	2200      	movs	r2, #0
 8001586:	4619      	mov	r1, r3
 8001588:	4811      	ldr	r0, [pc, #68]	; (80015d0 <main+0xd0>)
 800158a:	f003 ff35 	bl	80053f8 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date_rtc, RTC_FORMAT_BIN);
 800158e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001592:	2200      	movs	r2, #0
 8001594:	4619      	mov	r1, r3
 8001596:	480e      	ldr	r0, [pc, #56]	; (80015d0 <main+0xd0>)
 8001598:	f004 f810 	bl	80055bc <HAL_RTC_GetDate>
	  HAL_RTC_GetAlarm(&hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 800159c:	1d39      	adds	r1, r7, #4
 800159e:	2300      	movs	r3, #0
 80015a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a4:	480a      	ldr	r0, [pc, #40]	; (80015d0 <main+0xd0>)
 80015a6:	f004 f99b 	bl	80058e0 <HAL_RTC_GetAlarm>

	  if(isRequested == false && isUpdated == true)
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <main+0xdc>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <main+0xc6>
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <main+0xe0>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d105      	bne.n	80015c6 <main+0xc6>
	  {
		  isRequested = true;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <main+0xdc>)
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
//		  isUpdated = false;
		  udp_client_send("request interval");
 80015c0:	4808      	ldr	r0, [pc, #32]	; (80015e4 <main+0xe4>)
 80015c2:	f7ff fe0b 	bl	80011dc <udp_client_send>
	  }
	  sys_check_timeouts();
 80015c6:	f00d fc21 	bl	800ee0c <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80015ca:	e7d6      	b.n	800157a <main+0x7a>
 80015cc:	080013b5 	.word	0x080013b5
 80015d0:	20000264 	.word	0x20000264
 80015d4:	0189a8c0 	.word	0x0189a8c0
 80015d8:	20000844 	.word	0x20000844
 80015dc:	20000260 	.word	0x20000260
 80015e0:	20000261 	.word	0x20000261
 80015e4:	0801462c 	.word	0x0801462c

080015e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b094      	sub	sp, #80	; 0x50
 80015ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ee:	f107 0320 	add.w	r3, r7, #32
 80015f2:	2230      	movs	r2, #48	; 0x30
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f010 fe53 	bl	80122a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <SystemClock_Config+0xc8>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <SystemClock_Config+0xc8>)
 8001612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001616:	6413      	str	r3, [r2, #64]	; 0x40
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <SystemClock_Config+0xc8>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <SystemClock_Config+0xcc>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800162c:	4a21      	ldr	r2, [pc, #132]	; (80016b4 <SystemClock_Config+0xcc>)
 800162e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <SystemClock_Config+0xcc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001640:	2301      	movs	r3, #1
 8001642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164a:	2302      	movs	r3, #2
 800164c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001654:	230f      	movs	r3, #15
 8001656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001658:	2390      	movs	r3, #144	; 0x90
 800165a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800165c:	2302      	movs	r3, #2
 800165e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001660:	2305      	movs	r3, #5
 8001662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001664:	f107 0320 	add.w	r3, r7, #32
 8001668:	4618      	mov	r0, r3
 800166a:	f002 fc6b 	bl	8003f44 <HAL_RCC_OscConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001674:	f000 f9b0 	bl	80019d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001678:	230f      	movs	r3, #15
 800167a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167c:	2302      	movs	r3, #2
 800167e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001684:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800168a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	2103      	movs	r1, #3
 8001696:	4618      	mov	r0, r3
 8001698:	f002 fef8 	bl	800448c <HAL_RCC_ClockConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80016a2:	f000 f999 	bl	80019d8 <Error_Handler>
  }
}
 80016a6:	bf00      	nop
 80016a8:	3750      	adds	r7, #80	; 0x50
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40007000 	.word	0x40007000

080016b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b090      	sub	sp, #64	; 0x40
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80016d2:	463b      	mov	r3, r7
 80016d4:	2228      	movs	r2, #40	; 0x28
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f010 fde2 	bl	80122a2 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016de:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <MX_RTC_Init+0x130>)
 80016e0:	4a42      	ldr	r2, [pc, #264]	; (80017ec <MX_RTC_Init+0x134>)
 80016e2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016e4:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <MX_RTC_Init+0x130>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016ea:	4b3f      	ldr	r3, [pc, #252]	; (80017e8 <MX_RTC_Init+0x130>)
 80016ec:	227f      	movs	r2, #127	; 0x7f
 80016ee:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2480;
 80016f0:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <MX_RTC_Init+0x130>)
 80016f2:	f44f 621b 	mov.w	r2, #2480	; 0x9b0
 80016f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016f8:	4b3b      	ldr	r3, [pc, #236]	; (80017e8 <MX_RTC_Init+0x130>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016fe:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <MX_RTC_Init+0x130>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001704:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <MX_RTC_Init+0x130>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800170a:	4837      	ldr	r0, [pc, #220]	; (80017e8 <MX_RTC_Init+0x130>)
 800170c:	f003 fc94 	bl	8005038 <HAL_RTC_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001716:	f000 f95f 	bl	80019d8 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800171a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171e:	2200      	movs	r2, #0
 8001720:	4619      	mov	r1, r3
 8001722:	4831      	ldr	r0, [pc, #196]	; (80017e8 <MX_RTC_Init+0x130>)
 8001724:	f003 fe68 	bl	80053f8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001728:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172c:	2200      	movs	r2, #0
 800172e:	4619      	mov	r1, r3
 8001730:	482d      	ldr	r0, [pc, #180]	; (80017e8 <MX_RTC_Init+0x130>)
 8001732:	f003 ff43 	bl	80055bc <HAL_RTC_GetDate>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x18;
 8001736:	2318      	movs	r3, #24
 8001738:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x1;
 800173c:	2301      	movs	r3, #1
 800173e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x50;
 8001742:	2350      	movs	r3, #80	; 0x50
 8001744:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001748:	2300      	movs	r3, #0
 800174a:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001754:	2201      	movs	r2, #1
 8001756:	4619      	mov	r1, r3
 8001758:	4823      	ldr	r0, [pc, #140]	; (80017e8 <MX_RTC_Init+0x130>)
 800175a:	f003 fdb3 	bl	80052c4 <HAL_RTC_SetTime>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_RTC_Init+0xb0>
  {
    Error_Handler();
 8001764:	f000 f938 	bl	80019d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001768:	2305      	movs	r3, #5
 800176a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JUNE;
 800176e:	2306      	movs	r3, #6
 8001770:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x7;
 8001774:	2307      	movs	r3, #7
 8001776:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x24;
 800177a:	2324      	movs	r3, #36	; 0x24
 800177c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001780:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001784:	2201      	movs	r2, #1
 8001786:	4619      	mov	r1, r3
 8001788:	4817      	ldr	r0, [pc, #92]	; (80017e8 <MX_RTC_Init+0x130>)
 800178a:	f003 fe93 	bl	80054b4 <HAL_RTC_SetDate>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_RTC_Init+0xe0>
  {
    Error_Handler();
 8001794:	f000 f920 	bl	80019d8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001798:	2300      	movs	r3, #0
 800179a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800179c:	2300      	movs	r3, #0
 800179e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x2;
 80017a0:	2302      	movs	r3, #2
 80017a2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80017b4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80017b8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80017be:	2301      	movs	r3, #1
 80017c0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80017c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80017ca:	463b      	mov	r3, r7
 80017cc:	2201      	movs	r2, #1
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_RTC_Init+0x130>)
 80017d2:	f003 ff43 	bl	800565c <HAL_RTC_SetAlarm_IT>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 80017dc:	f000 f8fc 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3740      	adds	r7, #64	; 0x40
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000264 	.word	0x20000264
 80017ec:	40002800 	.word	0x40002800

080017f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_USART3_UART_Init+0x58>)
 80017f6:	4a15      	ldr	r2, [pc, #84]	; (800184c <MX_USART3_UART_Init+0x5c>)
 80017f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <MX_USART3_UART_Init+0x58>)
 80017fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001800:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_USART3_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_USART3_UART_Init+0x58>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_USART3_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_USART3_UART_Init+0x58>)
 8001816:	220c      	movs	r2, #12
 8001818:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <MX_USART3_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_USART3_UART_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <MX_USART3_UART_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_USART3_UART_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_USART3_UART_Init+0x58>)
 8001834:	f004 fa28 	bl	8005c88 <HAL_UART_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800183e:	f000 f8cb 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200002a8 	.word	0x200002a8
 800184c:	40004800 	.word	0x40004800

08001850 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001856:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800185a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800185e:	2206      	movs	r2, #6
 8001860:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001864:	2202      	movs	r2, #2
 8001866:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001870:	2202      	movs	r2, #2
 8001872:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001876:	2201      	movs	r2, #1
 8001878:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800187c:	2200      	movs	r2, #0
 800187e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001888:	2201      	movs	r2, #1
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800188e:	2200      	movs	r2, #0
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001894:	f002 f92d 	bl	8003af2 <HAL_PCD_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800189e:	f000 f89b 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000330 	.word	0x20000330

080018ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	; 0x30
 80018b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c2:	4b42      	ldr	r3, [pc, #264]	; (80019cc <MX_GPIO_Init+0x120>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a41      	ldr	r2, [pc, #260]	; (80019cc <MX_GPIO_Init+0x120>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b3f      	ldr	r3, [pc, #252]	; (80019cc <MX_GPIO_Init+0x120>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018da:	4b3c      	ldr	r3, [pc, #240]	; (80019cc <MX_GPIO_Init+0x120>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a3b      	ldr	r2, [pc, #236]	; (80019cc <MX_GPIO_Init+0x120>)
 80018e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b39      	ldr	r3, [pc, #228]	; (80019cc <MX_GPIO_Init+0x120>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	4b36      	ldr	r3, [pc, #216]	; (80019cc <MX_GPIO_Init+0x120>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a35      	ldr	r2, [pc, #212]	; (80019cc <MX_GPIO_Init+0x120>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b33      	ldr	r3, [pc, #204]	; (80019cc <MX_GPIO_Init+0x120>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	4b30      	ldr	r3, [pc, #192]	; (80019cc <MX_GPIO_Init+0x120>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a2f      	ldr	r2, [pc, #188]	; (80019cc <MX_GPIO_Init+0x120>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <MX_GPIO_Init+0x120>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001922:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <MX_GPIO_Init+0x120>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a29      	ldr	r2, [pc, #164]	; (80019cc <MX_GPIO_Init+0x120>)
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b27      	ldr	r3, [pc, #156]	; (80019cc <MX_GPIO_Init+0x120>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800193a:	4b24      	ldr	r3, [pc, #144]	; (80019cc <MX_GPIO_Init+0x120>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a23      	ldr	r2, [pc, #140]	; (80019cc <MX_GPIO_Init+0x120>)
 8001940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <MX_GPIO_Init+0x120>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001952:	2201      	movs	r2, #1
 8001954:	2101      	movs	r1, #1
 8001956:	481e      	ldr	r0, [pc, #120]	; (80019d0 <MX_GPIO_Init+0x124>)
 8001958:	f002 f898 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001962:	481b      	ldr	r0, [pc, #108]	; (80019d0 <MX_GPIO_Init+0x124>)
 8001964:	f002 f892 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	2140      	movs	r1, #64	; 0x40
 800196c:	4819      	ldr	r0, [pc, #100]	; (80019d4 <MX_GPIO_Init+0x128>)
 800196e:	f002 f88d 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001972:	f244 0381 	movw	r3, #16513	; 0x4081
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	4811      	ldr	r0, [pc, #68]	; (80019d0 <MX_GPIO_Init+0x124>)
 800198c:	f001 fed2 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001990:	2340      	movs	r3, #64	; 0x40
 8001992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	2301      	movs	r3, #1
 8001996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	480b      	ldr	r0, [pc, #44]	; (80019d4 <MX_GPIO_Init+0x128>)
 80019a8:	f001 fec4 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4619      	mov	r1, r3
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_GPIO_Init+0x128>)
 80019c0:	f001 feb8 	bl	8003734 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019c4:	bf00      	nop
 80019c6:	3730      	adds	r7, #48	; 0x30
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40021800 	.word	0x40021800

080019d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019dc:	b672      	cpsid	i
}
 80019de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <Error_Handler+0x8>
	...

080019e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_MspInit+0x44>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_MspInit+0x44>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_MspInit+0x44>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_MspInit+0x44>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_MspInit+0x44>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_MspInit+0x44>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b0a4      	sub	sp, #144	; 0x90
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	2284      	movs	r2, #132	; 0x84
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f010 fc30 	bl	80122a2 <memset>
  if(hrtc->Instance==RTC)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a11      	ldr	r2, [pc, #68]	; (8001a8c <HAL_RTC_MspInit+0x60>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d11b      	bne.n	8001a84 <HAL_RTC_MspInit+0x58>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_RTC_MspInit+0x64>)
 8001a52:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 fefd 	bl	8004858 <HAL_RCCEx_PeriphCLKConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8001a64:	f7ff ffb8 	bl	80019d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_RTC_MspInit+0x68>)
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6c:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <HAL_RTC_MspInit+0x68>)
 8001a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a72:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2100      	movs	r1, #0
 8001a78:	2029      	movs	r0, #41	; 0x29
 8001a7a:	f000 fd24 	bl	80024c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a7e:	2029      	movs	r0, #41	; 0x29
 8001a80:	f000 fd3d 	bl	80024fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a84:	bf00      	nop
 8001a86:	3790      	adds	r7, #144	; 0x90
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40002800 	.word	0x40002800
 8001a90:	00190300 	.word	0x00190300
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <HAL_RTC_MspDeInit+0x2c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d108      	bne.n	8001abc <HAL_RTC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_RTC_MspDeInit+0x30>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aae:	4a06      	ldr	r2, [pc, #24]	; (8001ac8 <HAL_RTC_MspDeInit+0x30>)
 8001ab0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ab4:	6713      	str	r3, [r2, #112]	; 0x70

    /* RTC interrupt DeInit */
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 8001ab6:	2029      	movs	r0, #41	; 0x29
 8001ab8:	f000 fd2f 	bl	800251a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40002800 	.word	0x40002800
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b0aa      	sub	sp, #168	; 0xa8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae4:	f107 0310 	add.w	r3, r7, #16
 8001ae8:	2284      	movs	r2, #132	; 0x84
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f010 fbd8 	bl	80122a2 <memset>
  if(huart->Instance==USART3)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a22      	ldr	r2, [pc, #136]	; (8001b80 <HAL_UART_MspInit+0xb4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d13c      	bne.n	8001b76 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b00:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b06:	f107 0310 	add.w	r3, r7, #16
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 fea4 	bl	8004858 <HAL_RCCEx_PeriphCLKConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b16:	f7ff ff5f 	bl	80019d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_UART_MspInit+0xb8>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <HAL_UART_MspInit+0xb8>)
 8001b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <HAL_UART_MspInit+0xb8>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_UART_MspInit+0xb8>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <HAL_UART_MspInit+0xb8>)
 8001b38:	f043 0308 	orr.w	r3, r3, #8
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_UART_MspInit+0xb8>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b64:	2307      	movs	r3, #7
 8001b66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b6a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4805      	ldr	r0, [pc, #20]	; (8001b88 <HAL_UART_MspInit+0xbc>)
 8001b72:	f001 fddf 	bl	8003734 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b76:	bf00      	nop
 8001b78:	37a8      	adds	r7, #168	; 0xa8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40004800 	.word	0x40004800
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020c00 	.word	0x40020c00

08001b8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0ac      	sub	sp, #176	; 0xb0
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba4:	f107 0318 	add.w	r3, r7, #24
 8001ba8:	2284      	movs	r2, #132	; 0x84
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f010 fb78 	bl	80122a2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bba:	d159      	bne.n	8001c70 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001bbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bc0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc8:	f107 0318 	add.w	r3, r7, #24
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f002 fe43 	bl	8004858 <HAL_RCCEx_PeriphCLKConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001bd8:	f7ff fefe 	bl	80019d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bdc:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <HAL_PCD_MspInit+0xec>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	4a25      	ldr	r2, [pc, #148]	; (8001c78 <HAL_PCD_MspInit+0xec>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6313      	str	r3, [r2, #48]	; 0x30
 8001be8:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <HAL_PCD_MspInit+0xec>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001bf4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001bf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c0e:	230a      	movs	r3, #10
 8001c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4818      	ldr	r0, [pc, #96]	; (8001c7c <HAL_PCD_MspInit+0xf0>)
 8001c1c:	f001 fd8a 	bl	8003734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4810      	ldr	r0, [pc, #64]	; (8001c7c <HAL_PCD_MspInit+0xf0>)
 8001c3c:	f001 fd7a 	bl	8003734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c40:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_PCD_MspInit+0xec>)
 8001c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c44:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <HAL_PCD_MspInit+0xec>)
 8001c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4a:	6353      	str	r3, [r2, #52]	; 0x34
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_PCD_MspInit+0xec>)
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_PCD_MspInit+0xec>)
 8001c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5c:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <HAL_PCD_MspInit+0xec>)
 8001c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c62:	6453      	str	r3, [r2, #68]	; 0x44
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <HAL_PCD_MspInit+0xec>)
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c70:	bf00      	nop
 8001c72:	37b0      	adds	r7, #176	; 0xb0
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000

08001c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c84:	e7fe      	b.n	8001c84 <NMI_Handler+0x4>

08001c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8a:	e7fe      	b.n	8001c8a <HardFault_Handler+0x4>

08001c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <MemManage_Handler+0x4>

08001c92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <BusFault_Handler+0x4>

08001c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <UsageFault_Handler+0x4>

08001c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ccc:	f000 fab8 	bl	8002240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <RTC_Alarm_IRQHandler+0x10>)
 8001cda:	f003 fe91 	bl	8005a00 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000264 	.word	0x20000264

08001ce8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return 1;
 8001cec:	2301      	movs	r3, #1
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_kill>:

int _kill(int pid, int sig)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <_kill+0x20>)
 8001d04:	2216      	movs	r2, #22
 8001d06:	601a      	str	r2, [r3, #0]
  return -1;
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	2000ad34 	.word	0x2000ad34

08001d1c <_exit>:

void _exit (int status)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ffe5 	bl	8001cf8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d2e:	e7fe      	b.n	8001d2e <_exit+0x12>

08001d30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	e00a      	b.n	8001d58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d42:	f3af 8000 	nop.w
 8001d46:	4601      	mov	r1, r0
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	60ba      	str	r2, [r7, #8]
 8001d4e:	b2ca      	uxtb	r2, r1
 8001d50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dbf0      	blt.n	8001d42 <_read+0x12>
  }

  return len;
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	e009      	b.n	8001d90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	60ba      	str	r2, [r7, #8]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dbf1      	blt.n	8001d7c <_write+0x12>
  }
  return len;
 8001d98:	687b      	ldr	r3, [r7, #4]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_close>:

int _close(int file)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dca:	605a      	str	r2, [r3, #4]
  return 0;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_isatty>:

int _isatty(int file)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e14:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <_sbrk+0x5c>)
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <_sbrk+0x60>)
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <_sbrk+0x64>)
 8001e2a:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <_sbrk+0x68>)
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d205      	bcs.n	8001e48 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <_sbrk+0x6c>)
 8001e3e:	220c      	movs	r2, #12
 8001e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	e009      	b.n	8001e5c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	4a06      	ldr	r2, [pc, #24]	; (8001e70 <_sbrk+0x64>)
 8001e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	20050000 	.word	0x20050000
 8001e6c:	00000400 	.word	0x00000400
 8001e70:	2000083c 	.word	0x2000083c
 8001e74:	2000ad48 	.word	0x2000ad48
 8001e78:	2000ad34 	.word	0x2000ad34

08001e7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <SystemInit+0x20>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <SystemInit+0x20>)
 8001e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea4:	480d      	ldr	r0, [pc, #52]	; (8001edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ea6:	490e      	ldr	r1, [pc, #56]	; (8001ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ea8:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
   b LoopCopyDataInit
 8001eac:	e002      	b.n	8001eb4 <LoopCopyDataInit>

08001eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb2:	3304      	adds	r3, #4

08001eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb8:	d3f9      	bcc.n	8001eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eba:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ebc:	4c0b      	ldr	r4, [pc, #44]	; (8001eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec0:	e001      	b.n	8001ec6 <LoopFillZerobss>

08001ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec4:	3204      	adds	r2, #4

08001ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec8:	d3fb      	bcc.n	8001ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eca:	f7ff ffd7 	bl	8001e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ece:	f011 f83f 	bl	8012f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ed2:	f7ff fb15 	bl	8001500 <main>
  bx  lr    
 8001ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ed8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee0:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8001ee4:	08017544 	.word	0x08017544
  ldr r2, =_sbss
 8001ee8:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8001eec:	2000ad44 	.word	0x2000ad44

08001ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC_IRQHandler>

08001ef2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00b      	beq.n	8001f1a <LAN8742_RegisterBusIO+0x28>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <LAN8742_RegisterBusIO+0x28>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <LAN8742_RegisterBusIO+0x28>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	e014      	b.n	8001f4a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d17c      	bne.n	8002070 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	e01c      	b.n	8001fca <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f107 0208 	add.w	r2, r7, #8
 8001f98:	2112      	movs	r1, #18
 8001f9a:	6978      	ldr	r0, [r7, #20]
 8001f9c:	4798      	blx	r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	da03      	bge.n	8001fac <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001fa4:	f06f 0304 	mvn.w	r3, #4
 8001fa8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001faa:	e00b      	b.n	8001fc4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d105      	bne.n	8001fc4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
         break;
 8001fc2:	e005      	b.n	8001fd0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b1f      	cmp	r3, #31
 8001fce:	d9df      	bls.n	8001f90 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b1f      	cmp	r3, #31
 8001fd6:	d902      	bls.n	8001fde <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001fd8:	f06f 0302 	mvn.w	r3, #2
 8001fdc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d145      	bne.n	8002070 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6810      	ldr	r0, [r2, #0]
 8001fec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4798      	blx	r3
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db37      	blt.n	800206a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6810      	ldr	r0, [r2, #0]
 8002002:	f107 0208 	add.w	r2, r7, #8
 8002006:	2100      	movs	r1, #0
 8002008:	4798      	blx	r3
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	db28      	blt.n	8002062 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	4798      	blx	r3
 8002016:	4603      	mov	r3, r0
 8002018:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800201a:	e01c      	b.n	8002056 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4798      	blx	r3
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800202e:	d80e      	bhi.n	800204e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6810      	ldr	r0, [r2, #0]
 8002038:	f107 0208 	add.w	r2, r7, #8
 800203c:	2100      	movs	r1, #0
 800203e:	4798      	blx	r3
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	da07      	bge.n	8002056 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002046:	f06f 0304 	mvn.w	r3, #4
 800204a:	613b      	str	r3, [r7, #16]
                 break;
 800204c:	e010      	b.n	8002070 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800204e:	f06f 0301 	mvn.w	r3, #1
 8002052:	613b      	str	r3, [r7, #16]
               break;
 8002054:	e00c      	b.n	8002070 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1dd      	bne.n	800201c <LAN8742_Init+0xc6>
 8002060:	e006      	b.n	8002070 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002062:	f06f 0304 	mvn.w	r3, #4
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e002      	b.n	8002070 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800206a:	f06f 0303 	mvn.w	r3, #3
 800206e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d112      	bne.n	800209c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	4798      	blx	r3
 800207c:	4603      	mov	r3, r0
 800207e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002080:	bf00      	nop
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	4798      	blx	r3
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002094:	d9f5      	bls.n	8002082 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800209c:	693b      	ldr	r3, [r7, #16]
 }
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6810      	ldr	r0, [r2, #0]
 80020ba:	f107 020c 	add.w	r2, r7, #12
 80020be:	2101      	movs	r1, #1
 80020c0:	4798      	blx	r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	da02      	bge.n	80020ce <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80020c8:	f06f 0304 	mvn.w	r3, #4
 80020cc:	e06e      	b.n	80021ac <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6810      	ldr	r0, [r2, #0]
 80020d6:	f107 020c 	add.w	r2, r7, #12
 80020da:	2101      	movs	r1, #1
 80020dc:	4798      	blx	r3
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	da02      	bge.n	80020ea <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80020e4:	f06f 0304 	mvn.w	r3, #4
 80020e8:	e060      	b.n	80021ac <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80020f4:	2301      	movs	r3, #1
 80020f6:	e059      	b.n	80021ac <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6810      	ldr	r0, [r2, #0]
 8002100:	f107 020c 	add.w	r2, r7, #12
 8002104:	2100      	movs	r1, #0
 8002106:	4798      	blx	r3
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	da02      	bge.n	8002114 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800210e:	f06f 0304 	mvn.w	r3, #4
 8002112:	e04b      	b.n	80021ac <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d11b      	bne.n	8002156 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d006      	beq.n	8002136 <LAN8742_GetLinkState+0x90>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002132:	2302      	movs	r3, #2
 8002134:	e03a      	b.n	80021ac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002140:	2303      	movs	r3, #3
 8002142:	e033      	b.n	80021ac <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800214e:	2304      	movs	r3, #4
 8002150:	e02c      	b.n	80021ac <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002152:	2305      	movs	r3, #5
 8002154:	e02a      	b.n	80021ac <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6810      	ldr	r0, [r2, #0]
 800215e:	f107 020c 	add.w	r2, r7, #12
 8002162:	211f      	movs	r1, #31
 8002164:	4798      	blx	r3
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	da02      	bge.n	8002172 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800216c:	f06f 0304 	mvn.w	r3, #4
 8002170:	e01c      	b.n	80021ac <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800217c:	2306      	movs	r3, #6
 800217e:	e015      	b.n	80021ac <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 031c 	and.w	r3, r3, #28
 8002186:	2b18      	cmp	r3, #24
 8002188:	d101      	bne.n	800218e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800218a:	2302      	movs	r3, #2
 800218c:	e00e      	b.n	80021ac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 031c 	and.w	r3, r3, #28
 8002194:	2b08      	cmp	r3, #8
 8002196:	d101      	bne.n	800219c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002198:	2303      	movs	r3, #3
 800219a:	e007      	b.n	80021ac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 031c 	and.w	r3, r3, #28
 80021a2:	2b14      	cmp	r3, #20
 80021a4:	d101      	bne.n	80021aa <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80021a6:	2304      	movs	r3, #4
 80021a8:	e000      	b.n	80021ac <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80021aa:	2305      	movs	r3, #5
    }				
  }
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_Init+0x28>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a07      	ldr	r2, [pc, #28]	; (80021dc <HAL_Init+0x28>)
 80021be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c4:	2003      	movs	r0, #3
 80021c6:	f000 f973 	bl	80024b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f000 f808 	bl	80021e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d0:	f7ff fc08 	bl	80019e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023c00 	.word	0x40023c00

080021e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_InitTick+0x54>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_InitTick+0x58>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f999 	bl	8002536 <HAL_SYSTICK_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e00e      	b.n	800222c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0f      	cmp	r3, #15
 8002212:	d80a      	bhi.n	800222a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002214:	2200      	movs	r2, #0
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	f000 f953 	bl	80024c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002220:	4a06      	ldr	r2, [pc, #24]	; (800223c <HAL_InitTick+0x5c>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e000      	b.n	800222c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000004 	.word	0x20000004
 8002238:	2000000c 	.word	0x2000000c
 800223c:	20000008 	.word	0x20000008

08002240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_IncTick+0x20>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_IncTick+0x24>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4413      	add	r3, r2
 8002250:	4a04      	ldr	r2, [pc, #16]	; (8002264 <HAL_IncTick+0x24>)
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	2000000c 	.word	0x2000000c
 8002264:	20000840 	.word	0x20000840

08002268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return uwTick;
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <HAL_GetTick+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000840 	.word	0x20000840

08002280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002288:	f7ff ffee 	bl	8002268 <HAL_GetTick>
 800228c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d005      	beq.n	80022a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_Delay+0x44>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022a6:	bf00      	nop
 80022a8:	f7ff ffde 	bl	8002268 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d8f7      	bhi.n	80022a8 <HAL_Delay+0x28>
  {
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	2000000c 	.word	0x2000000c

080022c8 <__NVIC_SetPriorityGrouping>:
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <__NVIC_SetPriorityGrouping+0x40>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f6:	4a04      	ldr	r2, [pc, #16]	; (8002308 <__NVIC_SetPriorityGrouping+0x40>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	60d3      	str	r3, [r2, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00
 800230c:	05fa0000 	.word	0x05fa0000

08002310 <__NVIC_GetPriorityGrouping>:
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <__NVIC_GetPriorityGrouping+0x18>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 0307 	and.w	r3, r3, #7
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_EnableIRQ>:
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	2b00      	cmp	r3, #0
 800233c:	db0b      	blt.n	8002356 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4907      	ldr	r1, [pc, #28]	; (8002364 <__NVIC_EnableIRQ+0x38>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2001      	movs	r0, #1
 800234e:	fa00 f202 	lsl.w	r2, r0, r2
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000e100 	.word	0xe000e100

08002368 <__NVIC_DisableIRQ>:
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	2b00      	cmp	r3, #0
 8002378:	db12      	blt.n	80023a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	f003 021f 	and.w	r2, r3, #31
 8002380:	490a      	ldr	r1, [pc, #40]	; (80023ac <__NVIC_DisableIRQ+0x44>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	2001      	movs	r0, #1
 800238a:	fa00 f202 	lsl.w	r2, r0, r2
 800238e:	3320      	adds	r3, #32
 8002390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002394:	f3bf 8f4f 	dsb	sy
}
 8002398:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800239a:	f3bf 8f6f 	isb	sy
}
 800239e:	bf00      	nop
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000e100 	.word	0xe000e100

080023b0 <__NVIC_SetPriority>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	; (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_EncodePriority>:
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800247c:	d301      	bcc.n	8002482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247e:	2301      	movs	r3, #1
 8002480:	e00f      	b.n	80024a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <SysTick_Config+0x40>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248a:	210f      	movs	r1, #15
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f7ff ff8e 	bl	80023b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <SysTick_Config+0x40>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249a:	4b04      	ldr	r3, [pc, #16]	; (80024ac <SysTick_Config+0x40>)
 800249c:	2207      	movs	r2, #7
 800249e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	e000e010 	.word	0xe000e010

080024b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff05 	bl	80022c8 <__NVIC_SetPriorityGrouping>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d8:	f7ff ff1a 	bl	8002310 <__NVIC_GetPriorityGrouping>
 80024dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7ff ff8e 	bl	8002404 <NVIC_EncodePriority>
 80024e8:	4602      	mov	r2, r0
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff5d 	bl	80023b0 <__NVIC_SetPriority>
}
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff0d 	bl	800232c <__NVIC_EnableIRQ>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff1d 	bl	8002368 <__NVIC_DisableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ff94 	bl	800246c <SysTick_Config>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e06a      	b.n	8002638 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002568:	2b00      	cmp	r3, #0
 800256a:	d106      	bne.n	800257a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2223      	movs	r2, #35	; 0x23
 8002570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f004 fdcd 	bl	8007114 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	4b31      	ldr	r3, [pc, #196]	; (8002640 <HAL_ETH_Init+0xf0>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4a30      	ldr	r2, [pc, #192]	; (8002640 <HAL_ETH_Init+0xf0>)
 8002580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
 8002586:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <HAL_ETH_Init+0xf0>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002592:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <HAL_ETH_Init+0xf4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4a2b      	ldr	r2, [pc, #172]	; (8002644 <HAL_ETH_Init+0xf4>)
 8002598:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800259c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_ETH_Init+0xf4>)
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	4927      	ldr	r1, [pc, #156]	; (8002644 <HAL_ETH_Init+0xf4>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_ETH_Init+0xf4>)
 80025ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025c8:	f7ff fe4e 	bl	8002268 <HAL_GetTick>
 80025cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025ce:	e011      	b.n	80025f4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025d0:	f7ff fe4a 	bl	8002268 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025de:	d909      	bls.n	80025f4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2204      	movs	r2, #4
 80025e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	22e0      	movs	r2, #224	; 0xe0
 80025ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e021      	b.n	8002638 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1e4      	bne.n	80025d0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fdf0 	bl	80031ec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fe97 	bl	8003340 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 feed 	bl	80033f2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	461a      	mov	r2, r3
 800261e:	2100      	movs	r1, #0
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fe55 	bl	80032d0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2210      	movs	r2, #16
 8002632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	40013800 	.word	0x40013800

08002648 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002656:	2b10      	cmp	r3, #16
 8002658:	d150      	bne.n	80026fc <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2223      	movs	r2, #35	; 0x23
 800265e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2204      	movs	r2, #4
 8002666:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f9fd 	bl	8002a68 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0208 	orr.w	r2, r2, #8
 800267c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002686:	2001      	movs	r0, #1
 8002688:	f7ff fdfa 	bl	8002280 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0204 	orr.w	r2, r2, #4
 80026a2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ac:	2001      	movs	r0, #1
 80026ae:	f7ff fde7 	bl	8002280 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fc36 	bl	8002f2c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026d6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	f043 0302 	orr.w	r3, r3, #2
 80026ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026ee:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2223      	movs	r2, #35	; 0x23
 80026f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e000      	b.n	80026fe <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
  }
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002714:	2b23      	cmp	r3, #35	; 0x23
 8002716:	d14a      	bne.n	80027ae <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2223      	movs	r2, #35	; 0x23
 800271c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002732:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002736:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	f023 0302 	bic.w	r3, r3, #2
 800274a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800274e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0204 	bic.w	r2, r2, #4
 800275e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002768:	2001      	movs	r0, #1
 800276a:	f7ff fd89 	bl	8002280 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fbd8 	bl	8002f2c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0208 	bic.w	r2, r2, #8
 800278a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002794:	2001      	movs	r0, #1
 8002796:	f7ff fd73 	bl	8002280 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2210      	movs	r2, #16
 80027a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e000      	b.n	80027b0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
  }
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	f043 0201 	orr.w	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e07c      	b.n	80028d8 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027e4:	2b23      	cmp	r3, #35	; 0x23
 80027e6:	d176      	bne.n	80028d6 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80027e8:	2200      	movs	r2, #0
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fe6d 	bl	80034cc <ETH_Prepare_Tx_Descriptors>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d009      	beq.n	800280c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f043 0202 	orr.w	r2, r3, #2
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e065      	b.n	80028d8 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 800280c:	f3bf 8f4f 	dsb	sy
}
 8002810:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3206      	adds	r2, #6
 800281a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800281e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	629a      	str	r2, [r3, #40]	; 0x28
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	2b03      	cmp	r3, #3
 8002830:	d904      	bls.n	800283c <HAL_ETH_Transmit+0x84>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	1f1a      	subs	r2, r3, #4
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3106      	adds	r1, #6
 8002848:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800284c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002850:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002852:	f7ff fd09 	bl	8002268 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002858:	e037      	b.n	80028ca <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d011      	beq.n	8002890 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f043 0208 	orr.w	r2, r3, #8
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e023      	b.n	80028d8 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002896:	d018      	beq.n	80028ca <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002898:	f7ff fce6 	bl	8002268 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d302      	bcc.n	80028ae <HAL_ETH_Transmit+0xf6>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10d      	bne.n	80028ca <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b4:	f043 0204 	orr.w	r2, r3, #4
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80028c4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e006      	b.n	80028d8 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	dbc3      	blt.n	800285a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e000      	b.n	80028d8 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
  }
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	f043 0201 	orr.w	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0a8      	b.n	8002a5e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002912:	2b23      	cmp	r3, #35	; 0x23
 8002914:	d001      	beq.n	800291a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0a1      	b.n	8002a5e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	3212      	adds	r2, #18
 8002926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800292a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002930:	f1c3 0304 	rsb	r3, r3, #4
 8002934:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002936:	e06a      	b.n	8002a0e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	69da      	ldr	r2, [r3, #28]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295c:	2b00      	cmp	r3, #0
 800295e:	d103      	bne.n	8002968 <HAL_ETH_ReadData+0x88>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002964:	2b00      	cmp	r3, #0
 8002966:	d040      	beq.n	80029ea <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00c      	beq.n	80029ac <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	0c1b      	lsrs	r3, r3, #16
 8002998:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800299c:	3b04      	subs	r3, #4
 800299e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80029c4:	461a      	mov	r2, r3
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f004 fd65 	bl	8007498 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	441a      	add	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2200      	movs	r2, #0
 80029e8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3301      	adds	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d902      	bls.n	80029fc <HAL_ETH_ReadData+0x11c>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3b04      	subs	r3, #4
 80029fa:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	3212      	adds	r2, #18
 8002a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a06:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	db06      	blt.n	8002a24 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d202      	bcs.n	8002a24 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d089      	beq.n	8002938 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	441a      	add	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f815 	bl	8002a68 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d108      	bne.n	8002a5c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	e000      	b.n	8002a5e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3720      	adds	r7, #32
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002a74:	2301      	movs	r3, #1
 8002a76:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a7c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	3212      	adds	r2, #18
 8002a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a88:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a8e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002a90:	e040      	b.n	8002b14 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d112      	bne.n	8002ac0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f004 fcca 	bl	8007438 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d102      	bne.n	8002ab0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	74fb      	strb	r3, [r7, #19]
 8002aae:	e007      	b.n	8002ac0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	461a      	mov	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d026      	beq.n	8002b14 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	4a1e      	ldr	r2, [pc, #120]	; (8002b4c <ETH_UpdateDescriptor+0xe4>)
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	e003      	b.n	8002ade <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002adc:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002ade:	f3bf 8f5f 	dmb	sy
}
 8002ae2:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	3301      	adds	r3, #1
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d902      	bls.n	8002b02 <ETH_UpdateDescriptor+0x9a>
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	3b04      	subs	r3, #4
 8002b00:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	3212      	adds	r2, #18
 8002b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0c:	617b      	str	r3, [r7, #20]
      desccount--;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <ETH_UpdateDescriptor+0xb8>
 8002b1a:	7cfb      	ldrb	r3, [r7, #19]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1b8      	bne.n	8002a92 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d00c      	beq.n	8002b44 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b32:	461a      	mov	r2, r3
 8002b34:	2300      	movs	r3, #0
 8002b36:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002b44:	bf00      	nop
 8002b46:	3720      	adds	r7, #32
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	80004600 	.word	0x80004600

08002b50 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f003 031c 	and.w	r3, r3, #28
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	02db      	lsls	r3, r3, #11
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	019b      	lsls	r3, r3, #6
 8002b7e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f023 0302 	bic.w	r3, r3, #2
 8002b8e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002ba0:	f7ff fb62 	bl	8002268 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ba6:	e00d      	b.n	8002bc4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002ba8:	f7ff fb5e 	bl	8002268 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb6:	d301      	bcc.n	8002bbc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e010      	b.n	8002bde <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1ec      	bne.n	8002ba8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f003 031c 	and.w	r3, r3, #28
 8002c02:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	02db      	lsls	r3, r3, #11
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	019b      	lsls	r3, r3, #6
 8002c14:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f043 0302 	orr.w	r3, r3, #2
 8002c24:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c40:	f7ff fb12 	bl	8002268 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c46:	e00d      	b.n	8002c64 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002c48:	f7ff fb0e 	bl	8002268 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c56:	d301      	bcc.n	8002c5c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e009      	b.n	8002c70 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1ec      	bne.n	8002c48 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0d9      	b.n	8002e40 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bf14      	ite	ne
 8002c9a:	2301      	movne	r3, #1
 8002c9c:	2300      	moveq	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	bf14      	ite	ne
 8002ce0:	2301      	movne	r3, #1
 8002ce2:	2300      	moveq	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf0c      	ite	eq
 8002cfa:	2301      	moveq	r3, #1
 8002cfc:	2300      	movne	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bf0c      	ite	eq
 8002d4a:	2301      	moveq	r3, #1
 8002d4c:	2300      	movne	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf0c      	ite	eq
 8002d64:	2301      	moveq	r3, #1
 8002d66:	2300      	movne	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bf14      	ite	ne
 8002d7e:	2301      	movne	r3, #1
 8002d80:	2300      	moveq	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	bf14      	ite	ne
 8002da6:	2301      	movne	r3, #1
 8002da8:	2300      	moveq	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf14      	ite	ne
 8002dc0:	2301      	movne	r3, #1
 8002dc2:	2300      	moveq	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	0c1b      	lsrs	r3, r3, #16
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e00b      	b.n	8002e78 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d105      	bne.n	8002e76 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002e6a:	6839      	ldr	r1, [r7, #0]
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f883 	bl	8002f78 <ETH_SetMACConfig>

    return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
  }
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 031c 	bic.w	r3, r3, #28
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e98:	f001 fcaa 	bl	80047f0 <HAL_RCC_GetHCLKFreq>
 8002e9c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d908      	bls.n	8002eb8 <HAL_ETH_SetMDIOClockRange+0x38>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4a1c      	ldr	r2, [pc, #112]	; (8002f1c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d804      	bhi.n	8002eb8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f043 0308 	orr.w	r3, r3, #8
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	e027      	b.n	8002f08 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4a18      	ldr	r2, [pc, #96]	; (8002f1c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d908      	bls.n	8002ed2 <HAL_ETH_SetMDIOClockRange+0x52>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d204      	bcs.n	8002ed2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f043 030c 	orr.w	r3, r3, #12
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	e01a      	b.n	8002f08 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4a12      	ldr	r2, [pc, #72]	; (8002f20 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d303      	bcc.n	8002ee2 <HAL_ETH_SetMDIOClockRange+0x62>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4a11      	ldr	r2, [pc, #68]	; (8002f24 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d911      	bls.n	8002f06 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4a0f      	ldr	r2, [pc, #60]	; (8002f24 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d908      	bls.n	8002efc <HAL_ETH_SetMDIOClockRange+0x7c>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4a0e      	ldr	r2, [pc, #56]	; (8002f28 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d804      	bhi.n	8002efc <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f043 0304 	orr.w	r3, r3, #4
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	e005      	b.n	8002f08 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f043 0310 	orr.w	r3, r3, #16
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	e000      	b.n	8002f08 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002f06:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	01312cff 	.word	0x01312cff
 8002f1c:	02160ebf 	.word	0x02160ebf
 8002f20:	03938700 	.word	0x03938700
 8002f24:	05f5e0ff 	.word	0x05f5e0ff
 8002f28:	08f0d17f 	.word	0x08f0d17f

08002f2c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f4e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	f7ff f98f 	bl	8002280 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f6c:	6193      	str	r3, [r2, #24]
}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4b51      	ldr	r3, [pc, #324]	; (80030d4 <ETH_SetMACConfig+0x15c>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	7c1b      	ldrb	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <ETH_SetMACConfig+0x28>
 8002f9a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002f9e:	e000      	b.n	8002fa2 <ETH_SetMACConfig+0x2a>
 8002fa0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	7c5b      	ldrb	r3, [r3, #17]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d102      	bne.n	8002fb0 <ETH_SetMACConfig+0x38>
 8002faa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fae:	e000      	b.n	8002fb2 <ETH_SetMACConfig+0x3a>
 8002fb0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002fb2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002fb8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	7fdb      	ldrb	r3, [r3, #31]
 8002fbe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002fc0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002fc6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	7f92      	ldrb	r2, [r2, #30]
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d102      	bne.n	8002fd6 <ETH_SetMACConfig+0x5e>
 8002fd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fd4:	e000      	b.n	8002fd8 <ETH_SetMACConfig+0x60>
 8002fd6:	2200      	movs	r2, #0
                        macconf->Speed |
 8002fd8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	7f1b      	ldrb	r3, [r3, #28]
 8002fde:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002fe0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002fe6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	791b      	ldrb	r3, [r3, #4]
 8002fec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002fee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ff6:	2a00      	cmp	r2, #0
 8002ff8:	d102      	bne.n	8003000 <ETH_SetMACConfig+0x88>
 8002ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ffe:	e000      	b.n	8003002 <ETH_SetMACConfig+0x8a>
 8003000:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003002:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	7bdb      	ldrb	r3, [r3, #15]
 8003008:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800300a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003010:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003018:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800301a:	4313      	orrs	r3, r2
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003032:	2001      	movs	r0, #1
 8003034:	f7ff f924 	bl	8002280 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800304e:	4013      	ands	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003056:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800305e:	2a00      	cmp	r2, #0
 8003060:	d101      	bne.n	8003066 <ETH_SetMACConfig+0xee>
 8003062:	2280      	movs	r2, #128	; 0x80
 8003064:	e000      	b.n	8003068 <ETH_SetMACConfig+0xf0>
 8003066:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003068:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800306e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003076:	2a01      	cmp	r2, #1
 8003078:	d101      	bne.n	800307e <ETH_SetMACConfig+0x106>
 800307a:	2208      	movs	r2, #8
 800307c:	e000      	b.n	8003080 <ETH_SetMACConfig+0x108>
 800307e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003080:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003088:	2a01      	cmp	r2, #1
 800308a:	d101      	bne.n	8003090 <ETH_SetMACConfig+0x118>
 800308c:	2204      	movs	r2, #4
 800308e:	e000      	b.n	8003092 <ETH_SetMACConfig+0x11a>
 8003090:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003092:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800309a:	2a01      	cmp	r2, #1
 800309c:	d101      	bne.n	80030a2 <ETH_SetMACConfig+0x12a>
 800309e:	2202      	movs	r2, #2
 80030a0:	e000      	b.n	80030a4 <ETH_SetMACConfig+0x12c>
 80030a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030a4:	4313      	orrs	r3, r2
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030bc:	2001      	movs	r0, #1
 80030be:	f7ff f8df 	bl	8002280 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	619a      	str	r2, [r3, #24]
}
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	ff20810f 	.word	0xff20810f

080030d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <ETH_SetDMAConfig+0x110>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	7b1b      	ldrb	r3, [r3, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d102      	bne.n	8003104 <ETH_SetDMAConfig+0x2c>
 80030fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003102:	e000      	b.n	8003106 <ETH_SetDMAConfig+0x2e>
 8003104:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	7b5b      	ldrb	r3, [r3, #13]
 800310a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800310c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	7f52      	ldrb	r2, [r2, #29]
 8003112:	2a00      	cmp	r2, #0
 8003114:	d102      	bne.n	800311c <ETH_SetDMAConfig+0x44>
 8003116:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800311a:	e000      	b.n	800311e <ETH_SetDMAConfig+0x46>
 800311c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800311e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	7b9b      	ldrb	r3, [r3, #14]
 8003124:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003126:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800312c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	7f1b      	ldrb	r3, [r3, #28]
 8003132:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003134:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	7f9b      	ldrb	r3, [r3, #30]
 800313a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800313c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003142:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800314a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800314c:	4313      	orrs	r3, r2
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800315c:	461a      	mov	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800316e:	2001      	movs	r0, #1
 8003170:	f7ff f886 	bl	8002280 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800317c:	461a      	mov	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	791b      	ldrb	r3, [r3, #4]
 8003186:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800318c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003192:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003198:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031a0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80031a2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80031aa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80031b0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031be:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031cc:	2001      	movs	r0, #1
 80031ce:	f7ff f857 	bl	8002280 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031da:	461a      	mov	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6013      	str	r3, [r2, #0]
}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	f8de3f23 	.word	0xf8de3f23

080031ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b0a6      	sub	sp, #152	; 0x98
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80031f4:	2301      	movs	r3, #1
 80031f6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003200:	2300      	movs	r3, #0
 8003202:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003204:	2300      	movs	r3, #0
 8003206:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800320a:	2301      	movs	r3, #1
 800320c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003210:	2300      	movs	r3, #0
 8003212:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003216:	2301      	movs	r3, #1
 8003218:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800321c:	2300      	movs	r3, #0
 800321e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003222:	2300      	movs	r3, #0
 8003224:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003228:	2300      	movs	r3, #0
 800322a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800322c:	2300      	movs	r3, #0
 800322e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003232:	2300      	movs	r3, #0
 8003234:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003236:	2300      	movs	r3, #0
 8003238:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800323c:	2300      	movs	r3, #0
 800323e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003242:	2300      	movs	r3, #0
 8003244:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003248:	2300      	movs	r3, #0
 800324a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800324e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003252:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003254:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003258:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800325a:	2300      	movs	r3, #0
 800325c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003260:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003264:	4619      	mov	r1, r3
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff fe86 	bl	8002f78 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800326c:	2301      	movs	r3, #1
 800326e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003270:	2301      	movs	r3, #1
 8003272:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800327a:	2301      	movs	r3, #1
 800327c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003282:	2300      	movs	r3, #0
 8003284:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003288:	2300      	movs	r3, #0
 800328a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800328e:	2300      	movs	r3, #0
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003298:	2301      	movs	r3, #1
 800329a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800329c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032a0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80032a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80032a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80032bc:	f107 0308 	add.w	r3, r7, #8
 80032c0:	4619      	mov	r1, r3
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff ff08 	bl	80030d8 <ETH_SetDMAConfig>
}
 80032c8:	bf00      	nop
 80032ca:	3798      	adds	r7, #152	; 0x98
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3305      	adds	r3, #5
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	3204      	adds	r2, #4
 80032e8:	7812      	ldrb	r2, [r2, #0]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	4b11      	ldr	r3, [pc, #68]	; (8003338 <ETH_MACAddressConfig+0x68>)
 80032f2:	4413      	add	r3, r2
 80032f4:	461a      	mov	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3303      	adds	r3, #3
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	061a      	lsls	r2, r3, #24
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3302      	adds	r3, #2
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	041b      	lsls	r3, r3, #16
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3301      	adds	r3, #1
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	4313      	orrs	r3, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	7812      	ldrb	r2, [r2, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <ETH_MACAddressConfig+0x6c>)
 8003322:	4413      	add	r3, r2
 8003324:	461a      	mov	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	6013      	str	r3, [r2, #0]
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40028040 	.word	0x40028040
 800333c:	40028044 	.word	0x40028044

08003340 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e03e      	b.n	80033cc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68d9      	ldr	r1, [r3, #12]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	440b      	add	r3, r1
 800335e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2200      	movs	r2, #0
 800336a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2200      	movs	r2, #0
 8003376:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	3206      	adds	r2, #6
 8003380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d80c      	bhi.n	80033b0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68d9      	ldr	r1, [r3, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	440b      	add	r3, r1
 80033a8:	461a      	mov	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	e004      	b.n	80033ba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	461a      	mov	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3301      	adds	r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d9bd      	bls.n	800334e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e4:	611a      	str	r2, [r3, #16]
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	e046      	b.n	800348e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6919      	ldr	r1, [r3, #16]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	440b      	add	r3, r1
 8003410:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2200      	movs	r2, #0
 800341c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2200      	movs	r2, #0
 8003422:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2200      	movs	r2, #0
 8003428:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2200      	movs	r2, #0
 800342e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2200      	movs	r2, #0
 8003434:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800343c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003444:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	3212      	adds	r2, #18
 800345a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b02      	cmp	r3, #2
 8003462:	d80c      	bhi.n	800347e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6919      	ldr	r1, [r3, #16]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	440b      	add	r3, r1
 8003476:	461a      	mov	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	60da      	str	r2, [r3, #12]
 800347c:	e004      	b.n	8003488 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	461a      	mov	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3301      	adds	r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d9b5      	bls.n	8003400 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034be:	60da      	str	r2, [r3, #12]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b08d      	sub	sp, #52	; 0x34
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3318      	adds	r3, #24
 80034dc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800350a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800350e:	d007      	beq.n	8003520 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	3304      	adds	r3, #4
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003520:	2302      	movs	r3, #2
 8003522:	e0ff      	b.n	8003724 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	3301      	adds	r3, #1
 8003528:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	4b7d      	ldr	r3, [pc, #500]	; (8003730 <ETH_Prepare_Tx_Descriptors+0x264>)
 800353a:	4013      	ands	r3, r2
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	6852      	ldr	r2, [r2, #4]
 8003540:	431a      	orrs	r2, r3
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	431a      	orrs	r2, r3
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	431a      	orrs	r2, r3
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80035a6:	f3bf 8f5f 	dmb	sy
}
 80035aa:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80035b8:	e082      	b.n	80036c0 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d006      	beq.n	80035da <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	e005      	b.n	80035e6 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	3301      	adds	r3, #1
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	d902      	bls.n	80035f8 <ETH_Prepare_Tx_Descriptors+0x12c>
 80035f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f4:	3b04      	subs	r3, #4
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003600:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003616:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800361a:	d007      	beq.n	800362c <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	3304      	adds	r3, #4
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d029      	beq.n	8003680 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003638:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800363a:	2300      	movs	r3, #0
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
 800363e:	e019      	b.n	8003674 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8003640:	f3bf 8f5f 	dmb	sy
}
 8003644:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	3301      	adds	r3, #1
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	2b03      	cmp	r3, #3
 800365c:	d902      	bls.n	8003664 <ETH_Prepare_Tx_Descriptors+0x198>
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	3b04      	subs	r3, #4
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800366c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	3301      	adds	r3, #1
 8003672:	62bb      	str	r3, [r7, #40]	; 0x28
 8003674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	429a      	cmp	r2, r3
 800367a:	d3e1      	bcc.n	8003640 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800367c:	2302      	movs	r3, #2
 800367e:	e051      	b.n	8003724 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	3301      	adds	r3, #1
 8003684:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	4b25      	ldr	r3, [pc, #148]	; (8003730 <ETH_Prepare_Tx_Descriptors+0x264>)
 800369c:	4013      	ands	r3, r2
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	6852      	ldr	r2, [r2, #4]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	3301      	adds	r3, #1
 80036ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80036ae:	f3bf 8f5f 	dmb	sy
}
 80036b2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f47f af78 	bne.w	80035ba <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d006      	beq.n	80036de <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	e005      	b.n	80036ea <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036fa:	6979      	ldr	r1, [r7, #20]
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fe:	3304      	adds	r3, #4
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800370a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800370c:	b672      	cpsid	i
}
 800370e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	4413      	add	r3, r2
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800371e:	b662      	cpsie	i
}
 8003720:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3734      	adds	r7, #52	; 0x34
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	ffffe000 	.word	0xffffe000

08003734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	; 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800374a:	2300      	movs	r3, #0
 800374c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	e175      	b.n	8003a40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003754:	2201      	movs	r2, #1
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	429a      	cmp	r2, r3
 800376e:	f040 8164 	bne.w	8003a3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b01      	cmp	r3, #1
 800377c:	d005      	beq.n	800378a <HAL_GPIO_Init+0x56>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d130      	bne.n	80037ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	2203      	movs	r2, #3
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4013      	ands	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037c0:	2201      	movs	r2, #1
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 0201 	and.w	r2, r3, #1
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d017      	beq.n	8003828 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	2203      	movs	r2, #3
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d123      	bne.n	800387c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	08da      	lsrs	r2, r3, #3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3208      	adds	r2, #8
 800383c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	220f      	movs	r2, #15
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	08da      	lsrs	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3208      	adds	r2, #8
 8003876:	69b9      	ldr	r1, [r7, #24]
 8003878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	2203      	movs	r2, #3
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 0203 	and.w	r2, r3, #3
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80be 	beq.w	8003a3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038be:	4b66      	ldr	r3, [pc, #408]	; (8003a58 <HAL_GPIO_Init+0x324>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	4a65      	ldr	r2, [pc, #404]	; (8003a58 <HAL_GPIO_Init+0x324>)
 80038c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ca:	4b63      	ldr	r3, [pc, #396]	; (8003a58 <HAL_GPIO_Init+0x324>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80038d6:	4a61      	ldr	r2, [pc, #388]	; (8003a5c <HAL_GPIO_Init+0x328>)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	3302      	adds	r3, #2
 80038de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	220f      	movs	r2, #15
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a58      	ldr	r2, [pc, #352]	; (8003a60 <HAL_GPIO_Init+0x32c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d037      	beq.n	8003972 <HAL_GPIO_Init+0x23e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a57      	ldr	r2, [pc, #348]	; (8003a64 <HAL_GPIO_Init+0x330>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d031      	beq.n	800396e <HAL_GPIO_Init+0x23a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a56      	ldr	r2, [pc, #344]	; (8003a68 <HAL_GPIO_Init+0x334>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d02b      	beq.n	800396a <HAL_GPIO_Init+0x236>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a55      	ldr	r2, [pc, #340]	; (8003a6c <HAL_GPIO_Init+0x338>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d025      	beq.n	8003966 <HAL_GPIO_Init+0x232>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a54      	ldr	r2, [pc, #336]	; (8003a70 <HAL_GPIO_Init+0x33c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d01f      	beq.n	8003962 <HAL_GPIO_Init+0x22e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a53      	ldr	r2, [pc, #332]	; (8003a74 <HAL_GPIO_Init+0x340>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d019      	beq.n	800395e <HAL_GPIO_Init+0x22a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a52      	ldr	r2, [pc, #328]	; (8003a78 <HAL_GPIO_Init+0x344>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <HAL_GPIO_Init+0x226>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a51      	ldr	r2, [pc, #324]	; (8003a7c <HAL_GPIO_Init+0x348>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00d      	beq.n	8003956 <HAL_GPIO_Init+0x222>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a50      	ldr	r2, [pc, #320]	; (8003a80 <HAL_GPIO_Init+0x34c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <HAL_GPIO_Init+0x21e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a4f      	ldr	r2, [pc, #316]	; (8003a84 <HAL_GPIO_Init+0x350>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_GPIO_Init+0x21a>
 800394a:	2309      	movs	r3, #9
 800394c:	e012      	b.n	8003974 <HAL_GPIO_Init+0x240>
 800394e:	230a      	movs	r3, #10
 8003950:	e010      	b.n	8003974 <HAL_GPIO_Init+0x240>
 8003952:	2308      	movs	r3, #8
 8003954:	e00e      	b.n	8003974 <HAL_GPIO_Init+0x240>
 8003956:	2307      	movs	r3, #7
 8003958:	e00c      	b.n	8003974 <HAL_GPIO_Init+0x240>
 800395a:	2306      	movs	r3, #6
 800395c:	e00a      	b.n	8003974 <HAL_GPIO_Init+0x240>
 800395e:	2305      	movs	r3, #5
 8003960:	e008      	b.n	8003974 <HAL_GPIO_Init+0x240>
 8003962:	2304      	movs	r3, #4
 8003964:	e006      	b.n	8003974 <HAL_GPIO_Init+0x240>
 8003966:	2303      	movs	r3, #3
 8003968:	e004      	b.n	8003974 <HAL_GPIO_Init+0x240>
 800396a:	2302      	movs	r3, #2
 800396c:	e002      	b.n	8003974 <HAL_GPIO_Init+0x240>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <HAL_GPIO_Init+0x240>
 8003972:	2300      	movs	r3, #0
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	f002 0203 	and.w	r2, r2, #3
 800397a:	0092      	lsls	r2, r2, #2
 800397c:	4093      	lsls	r3, r2
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003984:	4935      	ldr	r1, [pc, #212]	; (8003a5c <HAL_GPIO_Init+0x328>)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	3302      	adds	r3, #2
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003992:	4b3d      	ldr	r3, [pc, #244]	; (8003a88 <HAL_GPIO_Init+0x354>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039b6:	4a34      	ldr	r2, [pc, #208]	; (8003a88 <HAL_GPIO_Init+0x354>)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039bc:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <HAL_GPIO_Init+0x354>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039e0:	4a29      	ldr	r2, [pc, #164]	; (8003a88 <HAL_GPIO_Init+0x354>)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039e6:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_GPIO_Init+0x354>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a0a:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <HAL_GPIO_Init+0x354>)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a10:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <HAL_GPIO_Init+0x354>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a34:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <HAL_GPIO_Init+0x354>)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	2b0f      	cmp	r3, #15
 8003a44:	f67f ae86 	bls.w	8003754 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	3724      	adds	r7, #36	; 0x24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40013800 	.word	0x40013800
 8003a60:	40020000 	.word	0x40020000
 8003a64:	40020400 	.word	0x40020400
 8003a68:	40020800 	.word	0x40020800
 8003a6c:	40020c00 	.word	0x40020c00
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40021400 	.word	0x40021400
 8003a78:	40021800 	.word	0x40021800
 8003a7c:	40021c00 	.word	0x40021c00
 8003a80:	40022000 	.word	0x40022000
 8003a84:	40022400 	.word	0x40022400
 8003a88:	40013c00 	.word	0x40013c00

08003a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a9c:	787b      	ldrb	r3, [r7, #1]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aa2:	887a      	ldrh	r2, [r7, #2]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003aa8:	e003      	b.n	8003ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	041a      	lsls	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	619a      	str	r2, [r3, #24]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ad0:	887a      	ldrh	r2, [r7, #2]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	041a      	lsls	r2, r3, #16
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	43d9      	mvns	r1, r3
 8003adc:	887b      	ldrh	r3, [r7, #2]
 8003ade:	400b      	ands	r3, r1
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	619a      	str	r2, [r3, #24]
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003af4:	b08f      	sub	sp, #60	; 0x3c
 8003af6:	af0a      	add	r7, sp, #40	; 0x28
 8003af8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e116      	b.n	8003d32 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fe f834 	bl	8001b8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2203      	movs	r2, #3
 8003b28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f002 fd4a 	bl	80065dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	603b      	str	r3, [r7, #0]
 8003b4e:	687e      	ldr	r6, [r7, #4]
 8003b50:	466d      	mov	r5, sp
 8003b52:	f106 0410 	add.w	r4, r6, #16
 8003b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b62:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b66:	1d33      	adds	r3, r6, #4
 8003b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b6a:	6838      	ldr	r0, [r7, #0]
 8003b6c:	f002 fcde 	bl	800652c <USB_CoreInit>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e0d7      	b.n	8003d32 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f002 fd38 	bl	80065fe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]
 8003b92:	e04a      	b.n	8003c2a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	333d      	adds	r3, #61	; 0x3d
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	333c      	adds	r3, #60	; 0x3c
 8003bb8:	7bfa      	ldrb	r2, [r7, #15]
 8003bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bbc:	7bfa      	ldrb	r2, [r7, #15]
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	b298      	uxth	r0, r3
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	3344      	adds	r3, #68	; 0x44
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bd4:	7bfa      	ldrb	r2, [r7, #15]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	3340      	adds	r3, #64	; 0x40
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003be8:	7bfa      	ldrb	r2, [r7, #15]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3348      	adds	r3, #72	; 0x48
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bfc:	7bfa      	ldrb	r2, [r7, #15]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	334c      	adds	r3, #76	; 0x4c
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c10:	7bfa      	ldrb	r2, [r7, #15]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	3354      	adds	r3, #84	; 0x54
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	3301      	adds	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]
 8003c2a:	7bfa      	ldrb	r2, [r7, #15]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d3af      	bcc.n	8003b94 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c34:	2300      	movs	r3, #0
 8003c36:	73fb      	strb	r3, [r7, #15]
 8003c38:	e044      	b.n	8003cc4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c3a:	7bfa      	ldrb	r2, [r7, #15]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c50:	7bfa      	ldrb	r2, [r7, #15]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003c62:	7bfa      	ldrb	r2, [r7, #15]
 8003c64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c66:	7bfa      	ldrb	r2, [r7, #15]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c7c:	7bfa      	ldrb	r2, [r7, #15]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c92:	7bfa      	ldrb	r2, [r7, #15]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	73fb      	strb	r3, [r7, #15]
 8003cc4:	7bfa      	ldrb	r2, [r7, #15]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d3b5      	bcc.n	8003c3a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	687e      	ldr	r6, [r7, #4]
 8003cd6:	466d      	mov	r5, sp
 8003cd8:	f106 0410 	add.w	r4, r6, #16
 8003cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ce4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ce8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cec:	1d33      	adds	r3, r6, #4
 8003cee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cf0:	6838      	ldr	r0, [r7, #0]
 8003cf2:	f002 fcd1 	bl	8006698 <USB_DevInit>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e014      	b.n	8003d32 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d102      	bne.n	8003d26 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f80b 	bl	8003d3c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f002 fe8f 	bl	8006a4e <USB_DevDisconnect>

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003d3c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_PCDEx_ActivateLPM+0x44>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	10000003 	.word	0x10000003

08003d84 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003d8a:	f7fe fa6d 	bl	8002268 <HAL_GetTick>
 8003d8e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003d90:	4b66      	ldr	r3, [pc, #408]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a65      	ldr	r2, [pc, #404]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d9e:	f7fe fa63 	bl	8002268 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e0b8      	b.n	8003f22 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003db0:	4b5e      	ldr	r3, [pc, #376]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003dbc:	4b5b      	ldr	r3, [pc, #364]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a5a      	ldr	r2, [pc, #360]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003dc8:	f7fe fa4e 	bl	8002268 <HAL_GetTick>
 8003dcc:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003dce:	4b57      	ldr	r3, [pc, #348]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd6:	f7fe fa47 	bl	8002268 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e09a      	b.n	8003f22 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003dec:	4b4f      	ldr	r3, [pc, #316]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 030c 	and.w	r3, r3, #12
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1ee      	bne.n	8003dd6 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003df8:	f7fe fa36 	bl	8002268 <HAL_GetTick>
 8003dfc:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003dfe:	4b4b      	ldr	r3, [pc, #300]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a4a      	ldr	r2, [pc, #296]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003e04:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003e08:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fe fa2c 	bl	8002268 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	; 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e081      	b.n	8003f22 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003e1e:	4b43      	ldr	r3, [pc, #268]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003e2a:	f7fe fa1d 	bl	8002268 <HAL_GetTick>
 8003e2e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003e30:	4b3e      	ldr	r3, [pc, #248]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a3d      	ldr	r2, [pc, #244]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e3a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3e:	f7fe fa13 	bl	8002268 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e068      	b.n	8003f22 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003e50:	4b36      	ldr	r3, [pc, #216]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1f0      	bne.n	8003e3e <HAL_RCC_DeInit+0xba>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003e5c:	f7fe fa04 	bl	8002268 <HAL_GetTick>
 8003e60:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003e62:	4b32      	ldr	r3, [pc, #200]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a31      	ldr	r2, [pc, #196]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003e68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e6c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e70:	f7fe f9fa 	bl	8002268 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e04f      	b.n	8003f22 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003e82:	4b2a      	ldr	r3, [pc, #168]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_DeInit+0xec>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003e8e:	f7fe f9eb 	bl	8002268 <HAL_GetTick>
 8003e92:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8003e94:	4b25      	ldr	r3, [pc, #148]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a24      	ldr	r2, [pc, #144]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ea2:	f7fe f9e1 	bl	8002268 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b64      	cmp	r3, #100	; 0x64
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e036      	b.n	8003f22 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f0      	bne.n	8003ea2 <HAL_RCC_DeInit+0x11e>
    }
  }

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 8003ec0:	4b1a      	ldr	r3, [pc, #104]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003ec2:	4a1b      	ldr	r2, [pc, #108]	; (8003f30 <HAL_RCC_DeInit+0x1ac>)
 8003ec4:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register to default value */
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003ec6:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003ec8:	4a1a      	ldr	r2, [pc, #104]	; (8003f34 <HAL_RCC_DeInit+0x1b0>)
 8003eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register to default value */
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
 8003ece:	4b17      	ldr	r3, [pc, #92]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003ed0:	4a18      	ldr	r2, [pc, #96]	; (8003f34 <HAL_RCC_DeInit+0x1b0>)
 8003ed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
 8003ed6:	4b15      	ldr	r3, [pc, #84]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	4a14      	ldr	r2, [pc, #80]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003edc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ee0:	60d3      	str	r3, [r2, #12]

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
 8003ee2:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	4a11      	ldr	r2, [pc, #68]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eec:	60d3      	str	r3, [r2, #12]

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003eee:	4b0f      	ldr	r3, [pc, #60]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef2:	4a0e      	ldr	r2, [pc, #56]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003efa:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efe:	4a0b      	ldr	r2, [pc, #44]	; (8003f2c <HAL_RCC_DeInit+0x1a8>)
 8003f00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f04:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003f06:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <HAL_RCC_DeInit+0x1b4>)
 8003f08:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <HAL_RCC_DeInit+0x1b8>)
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <HAL_RCC_DeInit+0x1bc>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe f965 	bl	80021e0 <HAL_InitTick>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_DeInit+0x19c>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_DeInit+0x19e>
  }
  else
  {
    return HAL_OK;
 8003f20:	2300      	movs	r3, #0
  }
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	24003010 	.word	0x24003010
 8003f34:	24003000 	.word	0x24003000
 8003f38:	20000004 	.word	0x20000004
 8003f3c:	00f42400 	.word	0x00f42400
 8003f40:	20000008 	.word	0x20000008

08003f44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e291      	b.n	800447e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8087 	beq.w	8004076 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f68:	4b96      	ldr	r3, [pc, #600]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d00c      	beq.n	8003f8e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f74:	4b93      	ldr	r3, [pc, #588]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d112      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x62>
 8003f80:	4b90      	ldr	r3, [pc, #576]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f8c:	d10b      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8e:	4b8d      	ldr	r3, [pc, #564]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d06c      	beq.n	8004074 <HAL_RCC_OscConfig+0x130>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d168      	bne.n	8004074 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e26b      	b.n	800447e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fae:	d106      	bne.n	8003fbe <HAL_RCC_OscConfig+0x7a>
 8003fb0:	4b84      	ldr	r3, [pc, #528]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a83      	ldr	r2, [pc, #524]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	e02e      	b.n	800401c <HAL_RCC_OscConfig+0xd8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x9c>
 8003fc6:	4b7f      	ldr	r3, [pc, #508]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a7e      	ldr	r2, [pc, #504]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	4b7c      	ldr	r3, [pc, #496]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a7b      	ldr	r2, [pc, #492]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e01d      	b.n	800401c <HAL_RCC_OscConfig+0xd8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCC_OscConfig+0xc0>
 8003fea:	4b76      	ldr	r3, [pc, #472]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a75      	ldr	r2, [pc, #468]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	4b73      	ldr	r3, [pc, #460]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a72      	ldr	r2, [pc, #456]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e00b      	b.n	800401c <HAL_RCC_OscConfig+0xd8>
 8004004:	4b6f      	ldr	r3, [pc, #444]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6e      	ldr	r2, [pc, #440]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 800400a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	4b6c      	ldr	r3, [pc, #432]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6b      	ldr	r2, [pc, #428]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d013      	beq.n	800404c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fe f920 	bl	8002268 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800402c:	f7fe f91c 	bl	8002268 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	; 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e21f      	b.n	800447e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	4b61      	ldr	r3, [pc, #388]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0xe8>
 800404a:	e014      	b.n	8004076 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fe f90c 	bl	8002268 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004054:	f7fe f908 	bl	8002268 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	; 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e20b      	b.n	800447e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	4b57      	ldr	r3, [pc, #348]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x110>
 8004072:	e000      	b.n	8004076 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d069      	beq.n	8004156 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004082:	4b50      	ldr	r3, [pc, #320]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408e:	4b4d      	ldr	r3, [pc, #308]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b08      	cmp	r3, #8
 8004098:	d11c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x190>
 800409a:	4b4a      	ldr	r3, [pc, #296]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d116      	bne.n	80040d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a6:	4b47      	ldr	r3, [pc, #284]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_RCC_OscConfig+0x17a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d001      	beq.n	80040be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e1df      	b.n	800447e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040be:	4b41      	ldr	r3, [pc, #260]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	493d      	ldr	r1, [pc, #244]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d2:	e040      	b.n	8004156 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d023      	beq.n	8004124 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040dc:	4b39      	ldr	r3, [pc, #228]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a38      	ldr	r2, [pc, #224]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fe f8be 	bl	8002268 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f0:	f7fe f8ba 	bl	8002268 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e1bd      	b.n	800447e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004102:	4b30      	ldr	r3, [pc, #192]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410e:	4b2d      	ldr	r3, [pc, #180]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4929      	ldr	r1, [pc, #164]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
 8004122:	e018      	b.n	8004156 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004124:	4b27      	ldr	r3, [pc, #156]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a26      	ldr	r2, [pc, #152]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 800412a:	f023 0301 	bic.w	r3, r3, #1
 800412e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fe f89a 	bl	8002268 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004138:	f7fe f896 	bl	8002268 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e199      	b.n	800447e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414a:	4b1e      	ldr	r3, [pc, #120]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d038      	beq.n	80041d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d019      	beq.n	800419e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416a:	4b16      	ldr	r3, [pc, #88]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 800416c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416e:	4a15      	ldr	r2, [pc, #84]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004176:	f7fe f877 	bl	8002268 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800417e:	f7fe f873 	bl	8002268 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e176      	b.n	800447e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004190:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x23a>
 800419c:	e01a      	b.n	80041d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 80041a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a2:	4a08      	ldr	r2, [pc, #32]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041aa:	f7fe f85d 	bl	8002268 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b0:	e00a      	b.n	80041c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b2:	f7fe f859 	bl	8002268 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d903      	bls.n	80041c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e15c      	b.n	800447e <HAL_RCC_OscConfig+0x53a>
 80041c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c8:	4b91      	ldr	r3, [pc, #580]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 80041ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1ee      	bne.n	80041b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 80a4 	beq.w	800432a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e2:	4b8b      	ldr	r3, [pc, #556]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10d      	bne.n	800420a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ee:	4b88      	ldr	r3, [pc, #544]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	4a87      	ldr	r2, [pc, #540]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 80041f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f8:	6413      	str	r3, [r2, #64]	; 0x40
 80041fa:	4b85      	ldr	r3, [pc, #532]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004206:	2301      	movs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800420a:	4b82      	ldr	r3, [pc, #520]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d118      	bne.n	8004248 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004216:	4b7f      	ldr	r3, [pc, #508]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a7e      	ldr	r2, [pc, #504]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 800421c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004222:	f7fe f821 	bl	8002268 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422a:	f7fe f81d 	bl	8002268 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b64      	cmp	r3, #100	; 0x64
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e120      	b.n	800447e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423c:	4b75      	ldr	r3, [pc, #468]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d106      	bne.n	800425e <HAL_RCC_OscConfig+0x31a>
 8004250:	4b6f      	ldr	r3, [pc, #444]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004254:	4a6e      	ldr	r2, [pc, #440]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	6713      	str	r3, [r2, #112]	; 0x70
 800425c:	e02d      	b.n	80042ba <HAL_RCC_OscConfig+0x376>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10c      	bne.n	8004280 <HAL_RCC_OscConfig+0x33c>
 8004266:	4b6a      	ldr	r3, [pc, #424]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a69      	ldr	r2, [pc, #420]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	6713      	str	r3, [r2, #112]	; 0x70
 8004272:	4b67      	ldr	r3, [pc, #412]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a66      	ldr	r2, [pc, #408]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 8004278:	f023 0304 	bic.w	r3, r3, #4
 800427c:	6713      	str	r3, [r2, #112]	; 0x70
 800427e:	e01c      	b.n	80042ba <HAL_RCC_OscConfig+0x376>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b05      	cmp	r3, #5
 8004286:	d10c      	bne.n	80042a2 <HAL_RCC_OscConfig+0x35e>
 8004288:	4b61      	ldr	r3, [pc, #388]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	4a60      	ldr	r2, [pc, #384]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 800428e:	f043 0304 	orr.w	r3, r3, #4
 8004292:	6713      	str	r3, [r2, #112]	; 0x70
 8004294:	4b5e      	ldr	r3, [pc, #376]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	4a5d      	ldr	r2, [pc, #372]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6713      	str	r3, [r2, #112]	; 0x70
 80042a0:	e00b      	b.n	80042ba <HAL_RCC_OscConfig+0x376>
 80042a2:	4b5b      	ldr	r3, [pc, #364]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	4a5a      	ldr	r2, [pc, #360]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	6713      	str	r3, [r2, #112]	; 0x70
 80042ae:	4b58      	ldr	r3, [pc, #352]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	4a57      	ldr	r2, [pc, #348]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 80042b4:	f023 0304 	bic.w	r3, r3, #4
 80042b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d015      	beq.n	80042ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c2:	f7fd ffd1 	bl	8002268 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c8:	e00a      	b.n	80042e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ca:	f7fd ffcd 	bl	8002268 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d8:	4293      	cmp	r3, r2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e0ce      	b.n	800447e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e0:	4b4b      	ldr	r3, [pc, #300]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 80042e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0ee      	beq.n	80042ca <HAL_RCC_OscConfig+0x386>
 80042ec:	e014      	b.n	8004318 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ee:	f7fd ffbb 	bl	8002268 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f4:	e00a      	b.n	800430c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f6:	f7fd ffb7 	bl	8002268 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	f241 3288 	movw	r2, #5000	; 0x1388
 8004304:	4293      	cmp	r3, r2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e0b8      	b.n	800447e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430c:	4b40      	ldr	r3, [pc, #256]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ee      	bne.n	80042f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d105      	bne.n	800432a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431e:	4b3c      	ldr	r3, [pc, #240]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4a3b      	ldr	r2, [pc, #236]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 8004324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004328:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 80a4 	beq.w	800447c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004334:	4b36      	ldr	r3, [pc, #216]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 030c 	and.w	r3, r3, #12
 800433c:	2b08      	cmp	r3, #8
 800433e:	d06b      	beq.n	8004418 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d149      	bne.n	80043dc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004348:	4b31      	ldr	r3, [pc, #196]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a30      	ldr	r2, [pc, #192]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 800434e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fd ff88 	bl	8002268 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800435c:	f7fd ff84 	bl	8002268 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e087      	b.n	800447e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436e:	4b28      	ldr	r3, [pc, #160]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69da      	ldr	r2, [r3, #28]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	019b      	lsls	r3, r3, #6
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	3b01      	subs	r3, #1
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	061b      	lsls	r3, r3, #24
 800439e:	4313      	orrs	r3, r2
 80043a0:	4a1b      	ldr	r2, [pc, #108]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 80043a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043a6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a8:	4b19      	ldr	r3, [pc, #100]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a18      	ldr	r2, [pc, #96]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 80043ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fd ff58 	bl	8002268 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043bc:	f7fd ff54 	bl	8002268 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e057      	b.n	800447e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ce:	4b10      	ldr	r3, [pc, #64]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0x478>
 80043da:	e04f      	b.n	800447c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043dc:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0b      	ldr	r2, [pc, #44]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 80043e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fd ff3e 	bl	8002268 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fd ff3a 	bl	8002268 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e03d      	b.n	800447e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004402:	4b03      	ldr	r3, [pc, #12]	; (8004410 <HAL_RCC_OscConfig+0x4cc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x4ac>
 800440e:	e035      	b.n	800447c <HAL_RCC_OscConfig+0x538>
 8004410:	40023800 	.word	0x40023800
 8004414:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004418:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <HAL_RCC_OscConfig+0x544>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d028      	beq.n	8004478 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d121      	bne.n	8004478 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d11a      	bne.n	8004478 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004448:	4013      	ands	r3, r2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800444e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004450:	4293      	cmp	r3, r2
 8004452:	d111      	bne.n	8004478 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	3b01      	subs	r3, #1
 8004462:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d107      	bne.n	8004478 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004474:	429a      	cmp	r2, r3
 8004476:	d001      	beq.n	800447c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40023800 	.word	0x40023800

0800448c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0d0      	b.n	8004646 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044a4:	4b6a      	ldr	r3, [pc, #424]	; (8004650 <HAL_RCC_ClockConfig+0x1c4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d910      	bls.n	80044d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b2:	4b67      	ldr	r3, [pc, #412]	; (8004650 <HAL_RCC_ClockConfig+0x1c4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 020f 	bic.w	r2, r3, #15
 80044ba:	4965      	ldr	r1, [pc, #404]	; (8004650 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	4313      	orrs	r3, r2
 80044c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c2:	4b63      	ldr	r3, [pc, #396]	; (8004650 <HAL_RCC_ClockConfig+0x1c4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d001      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0b8      	b.n	8004646 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d020      	beq.n	8004522 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044ec:	4b59      	ldr	r3, [pc, #356]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	4a58      	ldr	r2, [pc, #352]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 80044f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004504:	4b53      	ldr	r3, [pc, #332]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4a52      	ldr	r2, [pc, #328]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 800450a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800450e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004510:	4b50      	ldr	r3, [pc, #320]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	494d      	ldr	r1, [pc, #308]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 800451e:	4313      	orrs	r3, r2
 8004520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d040      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d107      	bne.n	8004546 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004536:	4b47      	ldr	r3, [pc, #284]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d115      	bne.n	800456e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e07f      	b.n	8004646 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d107      	bne.n	800455e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800454e:	4b41      	ldr	r3, [pc, #260]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e073      	b.n	8004646 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455e:	4b3d      	ldr	r3, [pc, #244]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e06b      	b.n	8004646 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800456e:	4b39      	ldr	r3, [pc, #228]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f023 0203 	bic.w	r2, r3, #3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	4936      	ldr	r1, [pc, #216]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 800457c:	4313      	orrs	r3, r2
 800457e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004580:	f7fd fe72 	bl	8002268 <HAL_GetTick>
 8004584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004586:	e00a      	b.n	800459e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004588:	f7fd fe6e 	bl	8002268 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f241 3288 	movw	r2, #5000	; 0x1388
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e053      	b.n	8004646 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459e:	4b2d      	ldr	r3, [pc, #180]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 020c 	and.w	r2, r3, #12
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d1eb      	bne.n	8004588 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045b0:	4b27      	ldr	r3, [pc, #156]	; (8004650 <HAL_RCC_ClockConfig+0x1c4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d210      	bcs.n	80045e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045be:	4b24      	ldr	r3, [pc, #144]	; (8004650 <HAL_RCC_ClockConfig+0x1c4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 020f 	bic.w	r2, r3, #15
 80045c6:	4922      	ldr	r1, [pc, #136]	; (8004650 <HAL_RCC_ClockConfig+0x1c4>)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ce:	4b20      	ldr	r3, [pc, #128]	; (8004650 <HAL_RCC_ClockConfig+0x1c4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e032      	b.n	8004646 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ec:	4b19      	ldr	r3, [pc, #100]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4916      	ldr	r1, [pc, #88]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800460a:	4b12      	ldr	r3, [pc, #72]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	490e      	ldr	r1, [pc, #56]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 800461a:	4313      	orrs	r3, r2
 800461c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800461e:	f000 f821 	bl	8004664 <HAL_RCC_GetSysClockFreq>
 8004622:	4602      	mov	r2, r0
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	490a      	ldr	r1, [pc, #40]	; (8004658 <HAL_RCC_ClockConfig+0x1cc>)
 8004630:	5ccb      	ldrb	r3, [r1, r3]
 8004632:	fa22 f303 	lsr.w	r3, r2, r3
 8004636:	4a09      	ldr	r2, [pc, #36]	; (800465c <HAL_RCC_ClockConfig+0x1d0>)
 8004638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800463a:	4b09      	ldr	r3, [pc, #36]	; (8004660 <HAL_RCC_ClockConfig+0x1d4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7fd fdce 	bl	80021e0 <HAL_InitTick>

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40023c00 	.word	0x40023c00
 8004654:	40023800 	.word	0x40023800
 8004658:	08017120 	.word	0x08017120
 800465c:	20000004 	.word	0x20000004
 8004660:	20000008 	.word	0x20000008

08004664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004668:	b090      	sub	sp, #64	; 0x40
 800466a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	637b      	str	r3, [r7, #52]	; 0x34
 8004670:	2300      	movs	r3, #0
 8004672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004674:	2300      	movs	r3, #0
 8004676:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800467c:	4b59      	ldr	r3, [pc, #356]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 030c 	and.w	r3, r3, #12
 8004684:	2b08      	cmp	r3, #8
 8004686:	d00d      	beq.n	80046a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004688:	2b08      	cmp	r3, #8
 800468a:	f200 80a1 	bhi.w	80047d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <HAL_RCC_GetSysClockFreq+0x34>
 8004692:	2b04      	cmp	r3, #4
 8004694:	d003      	beq.n	800469e <HAL_RCC_GetSysClockFreq+0x3a>
 8004696:	e09b      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004698:	4b53      	ldr	r3, [pc, #332]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800469a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800469c:	e09b      	b.n	80047d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800469e:	4b53      	ldr	r3, [pc, #332]	; (80047ec <HAL_RCC_GetSysClockFreq+0x188>)
 80046a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046a2:	e098      	b.n	80047d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046a4:	4b4f      	ldr	r3, [pc, #316]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046ae:	4b4d      	ldr	r3, [pc, #308]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d028      	beq.n	800470c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ba:	4b4a      	ldr	r3, [pc, #296]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	099b      	lsrs	r3, r3, #6
 80046c0:	2200      	movs	r2, #0
 80046c2:	623b      	str	r3, [r7, #32]
 80046c4:	627a      	str	r2, [r7, #36]	; 0x24
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046cc:	2100      	movs	r1, #0
 80046ce:	4b47      	ldr	r3, [pc, #284]	; (80047ec <HAL_RCC_GetSysClockFreq+0x188>)
 80046d0:	fb03 f201 	mul.w	r2, r3, r1
 80046d4:	2300      	movs	r3, #0
 80046d6:	fb00 f303 	mul.w	r3, r0, r3
 80046da:	4413      	add	r3, r2
 80046dc:	4a43      	ldr	r2, [pc, #268]	; (80047ec <HAL_RCC_GetSysClockFreq+0x188>)
 80046de:	fba0 1202 	umull	r1, r2, r0, r2
 80046e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046e4:	460a      	mov	r2, r1
 80046e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80046e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ea:	4413      	add	r3, r2
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f0:	2200      	movs	r2, #0
 80046f2:	61bb      	str	r3, [r7, #24]
 80046f4:	61fa      	str	r2, [r7, #28]
 80046f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046fe:	f7fc fa2d 	bl	8000b5c <__aeabi_uldivmod>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4613      	mov	r3, r2
 8004708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800470a:	e053      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470c:	4b35      	ldr	r3, [pc, #212]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	099b      	lsrs	r3, r3, #6
 8004712:	2200      	movs	r2, #0
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	617a      	str	r2, [r7, #20]
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800471e:	f04f 0b00 	mov.w	fp, #0
 8004722:	4652      	mov	r2, sl
 8004724:	465b      	mov	r3, fp
 8004726:	f04f 0000 	mov.w	r0, #0
 800472a:	f04f 0100 	mov.w	r1, #0
 800472e:	0159      	lsls	r1, r3, #5
 8004730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004734:	0150      	lsls	r0, r2, #5
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	ebb2 080a 	subs.w	r8, r2, sl
 800473e:	eb63 090b 	sbc.w	r9, r3, fp
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800474e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004752:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004756:	ebb2 0408 	subs.w	r4, r2, r8
 800475a:	eb63 0509 	sbc.w	r5, r3, r9
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	00eb      	lsls	r3, r5, #3
 8004768:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800476c:	00e2      	lsls	r2, r4, #3
 800476e:	4614      	mov	r4, r2
 8004770:	461d      	mov	r5, r3
 8004772:	eb14 030a 	adds.w	r3, r4, sl
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	eb45 030b 	adc.w	r3, r5, fp
 800477c:	607b      	str	r3, [r7, #4]
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	e9d7 4500 	ldrd	r4, r5, [r7]
 800478a:	4629      	mov	r1, r5
 800478c:	028b      	lsls	r3, r1, #10
 800478e:	4621      	mov	r1, r4
 8004790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004794:	4621      	mov	r1, r4
 8004796:	028a      	lsls	r2, r1, #10
 8004798:	4610      	mov	r0, r2
 800479a:	4619      	mov	r1, r3
 800479c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479e:	2200      	movs	r2, #0
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	60fa      	str	r2, [r7, #12]
 80047a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047a8:	f7fc f9d8 	bl	8000b5c <__aeabi_uldivmod>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4613      	mov	r3, r2
 80047b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80047b4:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	0c1b      	lsrs	r3, r3, #16
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	3301      	adds	r3, #1
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80047c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047ce:	e002      	b.n	80047d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80047d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3740      	adds	r7, #64	; 0x40
 80047dc:	46bd      	mov	sp, r7
 80047de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047e2:	bf00      	nop
 80047e4:	40023800 	.word	0x40023800
 80047e8:	00f42400 	.word	0x00f42400
 80047ec:	017d7840 	.word	0x017d7840

080047f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047f4:	4b03      	ldr	r3, [pc, #12]	; (8004804 <HAL_RCC_GetHCLKFreq+0x14>)
 80047f6:	681b      	ldr	r3, [r3, #0]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20000004 	.word	0x20000004

08004808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800480c:	f7ff fff0 	bl	80047f0 <HAL_RCC_GetHCLKFreq>
 8004810:	4602      	mov	r2, r0
 8004812:	4b05      	ldr	r3, [pc, #20]	; (8004828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	0a9b      	lsrs	r3, r3, #10
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	4903      	ldr	r1, [pc, #12]	; (800482c <HAL_RCC_GetPCLK1Freq+0x24>)
 800481e:	5ccb      	ldrb	r3, [r1, r3]
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40023800 	.word	0x40023800
 800482c:	08017130 	.word	0x08017130

08004830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004834:	f7ff ffdc 	bl	80047f0 <HAL_RCC_GetHCLKFreq>
 8004838:	4602      	mov	r2, r0
 800483a:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	0b5b      	lsrs	r3, r3, #13
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	4903      	ldr	r1, [pc, #12]	; (8004854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004846:	5ccb      	ldrb	r3, [r1, r3]
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800484c:	4618      	mov	r0, r3
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40023800 	.word	0x40023800
 8004854:	08017130 	.word	0x08017130

08004858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d012      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004880:	4b69      	ldr	r3, [pc, #420]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4a68      	ldr	r2, [pc, #416]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004886:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800488a:	6093      	str	r3, [r2, #8]
 800488c:	4b66      	ldr	r3, [pc, #408]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004894:	4964      	ldr	r1, [pc, #400]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80048a2:	2301      	movs	r3, #1
 80048a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d017      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048b2:	4b5d      	ldr	r3, [pc, #372]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c0:	4959      	ldr	r1, [pc, #356]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048d0:	d101      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80048d2:	2301      	movs	r3, #1
 80048d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80048de:	2301      	movs	r3, #1
 80048e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d017      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048ee:	4b4e      	ldr	r3, [pc, #312]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	494a      	ldr	r1, [pc, #296]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800490c:	d101      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800490e:	2301      	movs	r3, #1
 8004910:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800491a:	2301      	movs	r3, #1
 800491c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800492a:	2301      	movs	r3, #1
 800492c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 808b 	beq.w	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800493c:	4b3a      	ldr	r3, [pc, #232]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	4a39      	ldr	r2, [pc, #228]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004946:	6413      	str	r3, [r2, #64]	; 0x40
 8004948:	4b37      	ldr	r3, [pc, #220]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004954:	4b35      	ldr	r3, [pc, #212]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a34      	ldr	r2, [pc, #208]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800495a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004960:	f7fd fc82 	bl	8002268 <HAL_GetTick>
 8004964:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004966:	e008      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004968:	f7fd fc7e 	bl	8002268 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	; 0x64
 8004974:	d901      	bls.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e357      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800497a:	4b2c      	ldr	r3, [pc, #176]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004986:	4b28      	ldr	r3, [pc, #160]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d035      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d02e      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049a4:	4b20      	ldr	r3, [pc, #128]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049ae:	4b1e      	ldr	r3, [pc, #120]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b2:	4a1d      	ldr	r2, [pc, #116]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049ba:	4b1b      	ldr	r3, [pc, #108]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	4a1a      	ldr	r2, [pc, #104]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80049c6:	4a18      	ldr	r2, [pc, #96]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049cc:	4b16      	ldr	r3, [pc, #88]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d114      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fd fc46 	bl	8002268 <HAL_GetTick>
 80049dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049de:	e00a      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e0:	f7fd fc42 	bl	8002268 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e319      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f6:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0ee      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a0e:	d111      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a1c:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a1e:	400b      	ands	r3, r1
 8004a20:	4901      	ldr	r1, [pc, #4]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
 8004a26:	e00b      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40007000 	.word	0x40007000
 8004a30:	0ffffcff 	.word	0x0ffffcff
 8004a34:	4baa      	ldr	r3, [pc, #680]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4aa9      	ldr	r2, [pc, #676]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a3e:	6093      	str	r3, [r2, #8]
 8004a40:	4ba7      	ldr	r3, [pc, #668]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a4c:	49a4      	ldr	r1, [pc, #656]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d010      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a5e:	4ba0      	ldr	r3, [pc, #640]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a64:	4a9e      	ldr	r2, [pc, #632]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a6e:	4b9c      	ldr	r3, [pc, #624]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	4999      	ldr	r1, [pc, #612]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a8c:	4b94      	ldr	r3, [pc, #592]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a9a:	4991      	ldr	r1, [pc, #580]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004aae:	4b8c      	ldr	r3, [pc, #560]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004abc:	4988      	ldr	r1, [pc, #544]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ad0:	4b83      	ldr	r3, [pc, #524]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ade:	4980      	ldr	r1, [pc, #512]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004af2:	4b7b      	ldr	r3, [pc, #492]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b00:	4977      	ldr	r1, [pc, #476]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b14:	4b72      	ldr	r3, [pc, #456]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	f023 0203 	bic.w	r2, r3, #3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b22:	496f      	ldr	r1, [pc, #444]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b36:	4b6a      	ldr	r3, [pc, #424]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	f023 020c 	bic.w	r2, r3, #12
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b44:	4966      	ldr	r1, [pc, #408]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b58:	4b61      	ldr	r3, [pc, #388]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b66:	495e      	ldr	r1, [pc, #376]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b7a:	4b59      	ldr	r3, [pc, #356]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b80:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b88:	4955      	ldr	r1, [pc, #340]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b9c:	4b50      	ldr	r3, [pc, #320]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004baa:	494d      	ldr	r1, [pc, #308]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004bbe:	4b48      	ldr	r3, [pc, #288]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bcc:	4944      	ldr	r1, [pc, #272]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004be0:	4b3f      	ldr	r3, [pc, #252]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bee:	493c      	ldr	r1, [pc, #240]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c02:	4b37      	ldr	r3, [pc, #220]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c10:	4933      	ldr	r1, [pc, #204]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c24:	4b2e      	ldr	r3, [pc, #184]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c32:	492b      	ldr	r1, [pc, #172]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d011      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c46:	4b26      	ldr	r3, [pc, #152]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c54:	4922      	ldr	r1, [pc, #136]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c64:	d101      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c66:	2301      	movs	r3, #1
 8004c68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c76:	2301      	movs	r3, #1
 8004c78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c86:	4b16      	ldr	r3, [pc, #88]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c94:	4912      	ldr	r1, [pc, #72]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00b      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ca8:	4b0d      	ldr	r3, [pc, #52]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb8:	4909      	ldr	r1, [pc, #36]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d006      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 80d9 	beq.w	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cd4:	4b02      	ldr	r3, [pc, #8]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a01      	ldr	r2, [pc, #4]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cde:	e001      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce6:	f7fd fabf 	bl	8002268 <HAL_GetTick>
 8004cea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cec:	e008      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cee:	f7fd fabb 	bl	8002268 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b64      	cmp	r3, #100	; 0x64
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e194      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d00:	4b6c      	ldr	r3, [pc, #432]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f0      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d021      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d11d      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d20:	4b64      	ldr	r3, [pc, #400]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d26:	0c1b      	lsrs	r3, r3, #16
 8004d28:	f003 0303 	and.w	r3, r3, #3
 8004d2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d2e:	4b61      	ldr	r3, [pc, #388]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d34:	0e1b      	lsrs	r3, r3, #24
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	019a      	lsls	r2, r3, #6
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	041b      	lsls	r3, r3, #16
 8004d46:	431a      	orrs	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	061b      	lsls	r3, r3, #24
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	071b      	lsls	r3, r3, #28
 8004d54:	4957      	ldr	r1, [pc, #348]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d004      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d70:	d00a      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d02e      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d86:	d129      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d88:	4b4a      	ldr	r3, [pc, #296]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d8e:	0c1b      	lsrs	r3, r3, #16
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d96:	4b47      	ldr	r3, [pc, #284]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d9c:	0f1b      	lsrs	r3, r3, #28
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	019a      	lsls	r2, r3, #6
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	041b      	lsls	r3, r3, #16
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	061b      	lsls	r3, r3, #24
 8004db6:	431a      	orrs	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	071b      	lsls	r3, r3, #28
 8004dbc:	493d      	ldr	r1, [pc, #244]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004dc4:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dca:	f023 021f 	bic.w	r2, r3, #31
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	4937      	ldr	r1, [pc, #220]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01d      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004de8:	4b32      	ldr	r3, [pc, #200]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dee:	0e1b      	lsrs	r3, r3, #24
 8004df0:	f003 030f 	and.w	r3, r3, #15
 8004df4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004df6:	4b2f      	ldr	r3, [pc, #188]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dfc:	0f1b      	lsrs	r3, r3, #28
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	019a      	lsls	r2, r3, #6
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	041b      	lsls	r3, r3, #16
 8004e10:	431a      	orrs	r2, r3
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	061b      	lsls	r3, r3, #24
 8004e16:	431a      	orrs	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	071b      	lsls	r3, r3, #28
 8004e1c:	4925      	ldr	r1, [pc, #148]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d011      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	019a      	lsls	r2, r3, #6
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	041b      	lsls	r3, r3, #16
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	061b      	lsls	r3, r3, #24
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	071b      	lsls	r3, r3, #28
 8004e4c:	4919      	ldr	r1, [pc, #100]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e54:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a16      	ldr	r2, [pc, #88]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e60:	f7fd fa02 	bl	8002268 <HAL_GetTick>
 8004e64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e68:	f7fd f9fe 	bl	8002268 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b64      	cmp	r3, #100	; 0x64
 8004e74:	d901      	bls.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e0d7      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e7a:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	f040 80cd 	bne.w	8005028 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e8e:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a08      	ldr	r2, [pc, #32]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9a:	f7fd f9e5 	bl	8002268 <HAL_GetTick>
 8004e9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ea0:	e00a      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ea2:	f7fd f9e1 	bl	8002268 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b64      	cmp	r3, #100	; 0x64
 8004eae:	d903      	bls.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e0ba      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004eb4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004eb8:	4b5e      	ldr	r3, [pc, #376]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec4:	d0ed      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d009      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d02e      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d12a      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004eee:	4b51      	ldr	r3, [pc, #324]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef4:	0c1b      	lsrs	r3, r3, #16
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004efc:	4b4d      	ldr	r3, [pc, #308]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f02:	0f1b      	lsrs	r3, r3, #28
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	019a      	lsls	r2, r3, #6
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	041b      	lsls	r3, r3, #16
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	061b      	lsls	r3, r3, #24
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	071b      	lsls	r3, r3, #28
 8004f22:	4944      	ldr	r1, [pc, #272]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f2a:	4b42      	ldr	r3, [pc, #264]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	493d      	ldr	r1, [pc, #244]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d022      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f58:	d11d      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f5a:	4b36      	ldr	r3, [pc, #216]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f60:	0e1b      	lsrs	r3, r3, #24
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f68:	4b32      	ldr	r3, [pc, #200]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6e:	0f1b      	lsrs	r3, r3, #28
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	019a      	lsls	r2, r3, #6
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	431a      	orrs	r2, r3
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	061b      	lsls	r3, r3, #24
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	071b      	lsls	r3, r3, #28
 8004f8e:	4929      	ldr	r1, [pc, #164]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d028      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fa2:	4b24      	ldr	r3, [pc, #144]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa8:	0e1b      	lsrs	r3, r3, #24
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004fb0:	4b20      	ldr	r3, [pc, #128]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb6:	0c1b      	lsrs	r3, r3, #16
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	019a      	lsls	r2, r3, #6
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	041b      	lsls	r3, r3, #16
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	061b      	lsls	r3, r3, #24
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	071b      	lsls	r3, r3, #28
 8004fd6:	4917      	ldr	r1, [pc, #92]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004fde:	4b15      	ldr	r3, [pc, #84]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fe4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	4911      	ldr	r1, [pc, #68]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a0e      	ldr	r2, [pc, #56]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005000:	f7fd f932 	bl	8002268 <HAL_GetTick>
 8005004:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005006:	e008      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005008:	f7fd f92e 	bl	8002268 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b64      	cmp	r3, #100	; 0x64
 8005014:	d901      	bls.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e007      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800501a:	4b06      	ldr	r3, [pc, #24]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005026:	d1ef      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3720      	adds	r7, #32
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40023800 	.word	0x40023800

08005038 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e095      	b.n	800517a <HAL_RTC_Init+0x142>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	7f5b      	ldrb	r3, [r3, #29]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d129      	bne.n	80050ac <HAL_RTC_Init+0x74>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a48      	ldr	r2, [pc, #288]	; (8005184 <HAL_RTC_Init+0x14c>)
 8005062:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a48      	ldr	r2, [pc, #288]	; (8005188 <HAL_RTC_Init+0x150>)
 8005068:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a47      	ldr	r2, [pc, #284]	; (800518c <HAL_RTC_Init+0x154>)
 800506e:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a47      	ldr	r2, [pc, #284]	; (8005190 <HAL_RTC_Init+0x158>)
 8005074:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a46      	ldr	r2, [pc, #280]	; (8005194 <HAL_RTC_Init+0x15c>)
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a46      	ldr	r2, [pc, #280]	; (8005198 <HAL_RTC_Init+0x160>)
 8005080:	635a      	str	r2, [r3, #52]	; 0x34
    hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;     /* Legacy weak Tamper3EventCallback     */
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a45      	ldr	r2, [pc, #276]	; (800519c <HAL_RTC_Init+0x164>)
 8005086:	639a      	str	r2, [r3, #56]	; 0x38

    if (hrtc->MspInitCallback == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <HAL_RTC_Init+0x5e>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a43      	ldr	r2, [pc, #268]	; (80051a0 <HAL_RTC_Init+0x168>)
 8005094:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d102      	bne.n	80050ac <HAL_RTC_Init+0x74>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a3e      	ldr	r2, [pc, #248]	; (80051a4 <HAL_RTC_Init+0x16c>)
 80050aa:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f003 0310 	and.w	r3, r3, #16
 80050bc:	2b10      	cmp	r3, #16
 80050be:	d053      	beq.n	8005168 <HAL_RTC_Init+0x130>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	22ca      	movs	r2, #202	; 0xca
 80050c6:	625a      	str	r2, [r3, #36]	; 0x24
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2253      	movs	r2, #83	; 0x53
 80050ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fd05 	bl	8005ae0 <RTC_EnterInitMode>
 80050d6:	4603      	mov	r3, r0
 80050d8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80050da:	7bfb      	ldrb	r3, [r7, #15]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d12a      	bne.n	8005136 <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6899      	ldr	r1, [r3, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b2f      	ldr	r3, [pc, #188]	; (80051a8 <HAL_RTC_Init+0x170>)
 80050ec:	400b      	ands	r3, r1
 80050ee:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6899      	ldr	r1, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	68d2      	ldr	r2, [r2, #12]
 8005116:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6919      	ldr	r1, [r3, #16]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	041a      	lsls	r2, r3, #16
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fd0e 	bl	8005b4e <RTC_ExitInitMode>
 8005132:	4603      	mov	r3, r0
 8005134:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005136:	7bfb      	ldrb	r3, [r7, #15]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d110      	bne.n	800515e <HAL_RTC_Init+0x126>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0208 	bic.w	r2, r2, #8
 800514a:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	22ff      	movs	r2, #255	; 0xff
 8005164:	625a      	str	r2, [r3, #36]	; 0x24
 8005166:	e001      	b.n	800516c <HAL_RTC_Init+0x134>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <HAL_RTC_Init+0x140>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005178:	7bfb      	ldrb	r3, [r7, #15]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	080013b5 	.word	0x080013b5
 8005188:	08005c75 	.word	0x08005c75
 800518c:	08005c11 	.word	0x08005c11
 8005190:	08005c61 	.word	0x08005c61
 8005194:	08005c25 	.word	0x08005c25
 8005198:	08005c39 	.word	0x08005c39
 800519c:	08005c4d 	.word	0x08005c4d
 80051a0:	08001a2d 	.word	0x08001a2d
 80051a4:	08001a99 	.word	0x08001a99
 80051a8:	ff8fffbf 	.word	0xff8fffbf

080051ac <HAL_RTC_RegisterCallback>:
  *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID              Msp DeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_RegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef CallbackID, pRTC_CallbackTypeDef pCallback)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	460b      	mov	r3, r1
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_RTC_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e076      	b.n	80052b6 <HAL_RTC_RegisterCallback+0x10a>
  }

  /* Process locked */
  __HAL_LOCK(hrtc);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	7f1b      	ldrb	r3, [r3, #28]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_RTC_RegisterCallback+0x28>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e070      	b.n	80052b6 <HAL_RTC_RegisterCallback+0x10a>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	771a      	strb	r2, [r3, #28]

  if (HAL_RTC_STATE_READY == hrtc->State)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	7f5b      	ldrb	r3, [r3, #29]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d14c      	bne.n	800527e <HAL_RTC_RegisterCallback+0xd2>
  {
    switch (CallbackID)
 80051e4:	7afb      	ldrb	r3, [r7, #11]
 80051e6:	2b0f      	cmp	r3, #15
 80051e8:	d846      	bhi.n	8005278 <HAL_RTC_RegisterCallback+0xcc>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <HAL_RTC_RegisterCallback+0x44>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005231 	.word	0x08005231
 80051f4:	08005239 	.word	0x08005239
 80051f8:	08005241 	.word	0x08005241
 80051fc:	08005249 	.word	0x08005249
 8005200:	08005251 	.word	0x08005251
 8005204:	08005259 	.word	0x08005259
 8005208:	08005261 	.word	0x08005261
 800520c:	08005279 	.word	0x08005279
 8005210:	08005279 	.word	0x08005279
 8005214:	08005279 	.word	0x08005279
 8005218:	08005279 	.word	0x08005279
 800521c:	08005279 	.word	0x08005279
 8005220:	08005279 	.word	0x08005279
 8005224:	08005279 	.word	0x08005279
 8005228:	08005269 	.word	0x08005269
 800522c:	08005271 	.word	0x08005271
    {
      case HAL_RTC_ALARM_A_EVENT_CB_ID :
        hrtc->AlarmAEventCallback = pCallback;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	621a      	str	r2, [r3, #32]
        break;
 8005236:	e03a      	b.n	80052ae <HAL_RTC_RegisterCallback+0x102>

      case HAL_RTC_ALARM_B_EVENT_CB_ID :
        hrtc->AlarmBEventCallback = pCallback;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800523e:	e036      	b.n	80052ae <HAL_RTC_RegisterCallback+0x102>

      case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
        hrtc->TimeStampEventCallback = pCallback;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8005246:	e032      	b.n	80052ae <HAL_RTC_RegisterCallback+0x102>

      case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
        hrtc->WakeUpTimerEventCallback = pCallback;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800524e:	e02e      	b.n	80052ae <HAL_RTC_RegisterCallback+0x102>

      case HAL_RTC_TAMPER1_EVENT_CB_ID :
        hrtc->Tamper1EventCallback = pCallback;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 8005256:	e02a      	b.n	80052ae <HAL_RTC_RegisterCallback+0x102>

      case HAL_RTC_TAMPER2_EVENT_CB_ID :
        hrtc->Tamper2EventCallback = pCallback;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 800525e:	e026      	b.n	80052ae <HAL_RTC_RegisterCallback+0x102>

      case HAL_RTC_TAMPER3_EVENT_CB_ID :
        hrtc->Tamper3EventCallback = pCallback;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8005266:	e022      	b.n	80052ae <HAL_RTC_RegisterCallback+0x102>

      case HAL_RTC_MSPINIT_CB_ID :
        hrtc->MspInitCallback = pCallback;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 800526e:	e01e      	b.n	80052ae <HAL_RTC_RegisterCallback+0x102>

      case HAL_RTC_MSPDEINIT_CB_ID :
        hrtc->MspDeInitCallback = pCallback;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 8005276:	e01a      	b.n	80052ae <HAL_RTC_RegisterCallback+0x102>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	75fb      	strb	r3, [r7, #23]
        break;
 800527c:	e017      	b.n	80052ae <HAL_RTC_RegisterCallback+0x102>
    }
  }
  else if (HAL_RTC_STATE_RESET == hrtc->State)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	7f5b      	ldrb	r3, [r3, #29]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d110      	bne.n	80052aa <HAL_RTC_RegisterCallback+0xfe>
  {
    switch (CallbackID)
 8005288:	7afb      	ldrb	r3, [r7, #11]
 800528a:	2b0e      	cmp	r3, #14
 800528c:	d002      	beq.n	8005294 <HAL_RTC_RegisterCallback+0xe8>
 800528e:	2b0f      	cmp	r3, #15
 8005290:	d004      	beq.n	800529c <HAL_RTC_RegisterCallback+0xf0>
 8005292:	e007      	b.n	80052a4 <HAL_RTC_RegisterCallback+0xf8>
    {
      case HAL_RTC_MSPINIT_CB_ID :
        hrtc->MspInitCallback = pCallback;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 800529a:	e008      	b.n	80052ae <HAL_RTC_RegisterCallback+0x102>

      case HAL_RTC_MSPDEINIT_CB_ID :
        hrtc->MspDeInitCallback = pCallback;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 80052a2:	e004      	b.n	80052ae <HAL_RTC_RegisterCallback+0x102>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	75fb      	strb	r3, [r7, #23]
        break;
 80052a8:	e001      	b.n	80052ae <HAL_RTC_RegisterCallback+0x102>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hrtc);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	771a      	strb	r2, [r3, #28]

  return status;
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop

080052c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052c4:	b590      	push	{r4, r7, lr}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	7f1b      	ldrb	r3, [r3, #28]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_RTC_SetTime+0x1c>
 80052dc:	2302      	movs	r3, #2
 80052de:	e085      	b.n	80053ec <HAL_RTC_SetTime+0x128>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2201      	movs	r2, #1
 80052e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2202      	movs	r2, #2
 80052ea:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d126      	bne.n	8005340 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d102      	bne.n	8005306 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2200      	movs	r2, #0
 8005304:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fc44 	bl	8005b98 <RTC_ByteToBcd2>
 8005310:	4603      	mov	r3, r0
 8005312:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	785b      	ldrb	r3, [r3, #1]
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fc3d 	bl	8005b98 <RTC_ByteToBcd2>
 800531e:	4603      	mov	r3, r0
 8005320:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005322:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	789b      	ldrb	r3, [r3, #2]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fc35 	bl	8005b98 <RTC_ByteToBcd2>
 800532e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005330:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	78db      	ldrb	r3, [r3, #3]
 8005338:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	e018      	b.n	8005372 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2200      	movs	r2, #0
 8005352:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	785b      	ldrb	r3, [r3, #1]
 800535e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005360:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005366:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	78db      	ldrb	r3, [r3, #3]
 800536c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	22ca      	movs	r2, #202	; 0xca
 8005378:	625a      	str	r2, [r3, #36]	; 0x24
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2253      	movs	r2, #83	; 0x53
 8005380:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 fbac 	bl	8005ae0 <RTC_EnterInitMode>
 8005388:	4603      	mov	r3, r0
 800538a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800538c:	7cfb      	ldrb	r3, [r7, #19]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d11e      	bne.n	80053d0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	6979      	ldr	r1, [r7, #20]
 8005398:	4b16      	ldr	r3, [pc, #88]	; (80053f4 <HAL_RTC_SetTime+0x130>)
 800539a:	400b      	ands	r3, r1
 800539c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053ac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6899      	ldr	r1, [r3, #8]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	431a      	orrs	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 fbc1 	bl	8005b4e <RTC_ExitInitMode>
 80053cc:	4603      	mov	r3, r0
 80053ce:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80053d0:	7cfb      	ldrb	r3, [r7, #19]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d102      	bne.n	80053dc <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	22ff      	movs	r2, #255	; 0xff
 80053e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	771a      	strb	r2, [r3, #28]

  return status;
 80053ea:	7cfb      	ldrb	r3, [r7, #19]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd90      	pop	{r4, r7, pc}
 80053f4:	007f7f7f 	.word	0x007f7f7f

080053f8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b22      	ldr	r3, [pc, #136]	; (80054b0 <HAL_RTC_GetTime+0xb8>)
 8005428:	4013      	ands	r3, r2
 800542a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	0c1b      	lsrs	r3, r3, #16
 8005430:	b2db      	uxtb	r3, r3
 8005432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005436:	b2da      	uxtb	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	0a1b      	lsrs	r3, r3, #8
 8005440:	b2db      	uxtb	r3, r3
 8005442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005446:	b2da      	uxtb	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005454:	b2da      	uxtb	r2, r3
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	0d9b      	lsrs	r3, r3, #22
 800545e:	b2db      	uxtb	r3, r3
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	b2da      	uxtb	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d11a      	bne.n	80054a6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fbad 	bl	8005bd4 <RTC_Bcd2ToByte>
 800547a:	4603      	mov	r3, r0
 800547c:	461a      	mov	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	785b      	ldrb	r3, [r3, #1]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fba4 	bl	8005bd4 <RTC_Bcd2ToByte>
 800548c:	4603      	mov	r3, r0
 800548e:	461a      	mov	r2, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	789b      	ldrb	r3, [r3, #2]
 8005498:	4618      	mov	r0, r3
 800549a:	f000 fb9b 	bl	8005bd4 <RTC_Bcd2ToByte>
 800549e:	4603      	mov	r3, r0
 80054a0:	461a      	mov	r2, r3
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	007f7f7f 	.word	0x007f7f7f

080054b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80054b4:	b590      	push	{r4, r7, lr}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	7f1b      	ldrb	r3, [r3, #28]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_RTC_SetDate+0x1c>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e06f      	b.n	80055b0 <HAL_RTC_SetDate+0xfc>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2201      	movs	r2, #1
 80054d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2202      	movs	r2, #2
 80054da:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10e      	bne.n	8005500 <HAL_RTC_SetDate+0x4c>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d008      	beq.n	8005500 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	785b      	ldrb	r3, [r3, #1]
 80054f2:	f023 0310 	bic.w	r3, r3, #16
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	330a      	adds	r3, #10
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d11c      	bne.n	8005540 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	78db      	ldrb	r3, [r3, #3]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fb44 	bl	8005b98 <RTC_ByteToBcd2>
 8005510:	4603      	mov	r3, r0
 8005512:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	785b      	ldrb	r3, [r3, #1]
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fb3d 	bl	8005b98 <RTC_ByteToBcd2>
 800551e:	4603      	mov	r3, r0
 8005520:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005522:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	789b      	ldrb	r3, [r3, #2]
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fb35 	bl	8005b98 <RTC_ByteToBcd2>
 800552e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005530:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	e00e      	b.n	800555e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	78db      	ldrb	r3, [r3, #3]
 8005544:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	785b      	ldrb	r3, [r3, #1]
 800554a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800554c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005552:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	22ca      	movs	r2, #202	; 0xca
 8005564:	625a      	str	r2, [r3, #36]	; 0x24
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2253      	movs	r2, #83	; 0x53
 800556c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 fab6 	bl	8005ae0 <RTC_EnterInitMode>
 8005574:	4603      	mov	r3, r0
 8005576:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005578:	7cfb      	ldrb	r3, [r7, #19]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10a      	bne.n	8005594 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	6979      	ldr	r1, [r7, #20]
 8005584:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <HAL_RTC_SetDate+0x104>)
 8005586:	400b      	ands	r3, r1
 8005588:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 fadf 	bl	8005b4e <RTC_ExitInitMode>
 8005590:	4603      	mov	r3, r0
 8005592:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005594:	7cfb      	ldrb	r3, [r7, #19]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d102      	bne.n	80055a0 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	22ff      	movs	r2, #255	; 0xff
 80055a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	771a      	strb	r2, [r3, #28]

  return status;
 80055ae:	7cfb      	ldrb	r3, [r7, #19]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	371c      	adds	r7, #28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd90      	pop	{r4, r7, pc}
 80055b8:	00ffff3f 	.word	0x00ffff3f

080055bc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	4b21      	ldr	r3, [pc, #132]	; (8005658 <HAL_RTC_GetDate+0x9c>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	0c1b      	lsrs	r3, r3, #16
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	0a1b      	lsrs	r3, r3, #8
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	0b5b      	lsrs	r3, r3, #13
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	b2da      	uxtb	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d11a      	bne.n	800564c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	78db      	ldrb	r3, [r3, #3]
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fada 	bl	8005bd4 <RTC_Bcd2ToByte>
 8005620:	4603      	mov	r3, r0
 8005622:	461a      	mov	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fad1 	bl	8005bd4 <RTC_Bcd2ToByte>
 8005632:	4603      	mov	r3, r0
 8005634:	461a      	mov	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	789b      	ldrb	r3, [r3, #2]
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fac8 	bl	8005bd4 <RTC_Bcd2ToByte>
 8005644:	4603      	mov	r3, r0
 8005646:	461a      	mov	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	00ffff3f 	.word	0x00ffff3f

0800565c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800565c:	b590      	push	{r4, r7, lr}
 800565e:	b089      	sub	sp, #36	; 0x24
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005668:	4b9a      	ldr	r3, [pc, #616]	; (80058d4 <HAL_RTC_SetAlarm_IT+0x278>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a9a      	ldr	r2, [pc, #616]	; (80058d8 <HAL_RTC_SetAlarm_IT+0x27c>)
 800566e:	fba2 2303 	umull	r2, r3, r2, r3
 8005672:	0adb      	lsrs	r3, r3, #11
 8005674:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005678:	fb02 f303 	mul.w	r3, r2, r3
 800567c:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	7f1b      	ldrb	r3, [r3, #28]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_RTC_SetAlarm_IT+0x36>
 800568e:	2302      	movs	r3, #2
 8005690:	e11c      	b.n	80058cc <HAL_RTC_SetAlarm_IT+0x270>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2202      	movs	r2, #2
 800569c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d137      	bne.n	8005714 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d102      	bne.n	80056b8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2200      	movs	r2, #0
 80056b6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fa6b 	bl	8005b98 <RTC_ByteToBcd2>
 80056c2:	4603      	mov	r3, r0
 80056c4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	785b      	ldrb	r3, [r3, #1]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fa64 	bl	8005b98 <RTC_ByteToBcd2>
 80056d0:	4603      	mov	r3, r0
 80056d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80056d4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	789b      	ldrb	r3, [r3, #2]
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fa5c 	bl	8005b98 <RTC_ByteToBcd2>
 80056e0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80056e2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	78db      	ldrb	r3, [r3, #3]
 80056ea:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80056ec:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fa4e 	bl	8005b98 <RTC_ByteToBcd2>
 80056fc:	4603      	mov	r3, r0
 80056fe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005700:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005708:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800570e:	4313      	orrs	r3, r2
 8005710:	61fb      	str	r3, [r7, #28]
 8005712:	e023      	b.n	800575c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d102      	bne.n	8005728 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2200      	movs	r2, #0
 8005726:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	785b      	ldrb	r3, [r3, #1]
 8005732:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005734:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800573a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	78db      	ldrb	r3, [r3, #3]
 8005740:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005742:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f893 3020 	ldrb.w	r3, [r3, #32]
 800574a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800574c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005752:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005758:	4313      	orrs	r3, r2
 800575a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005764:	4313      	orrs	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	22ca      	movs	r2, #202	; 0xca
 800576e:	625a      	str	r2, [r3, #36]	; 0x24
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2253      	movs	r2, #83	; 0x53
 8005776:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005780:	d141      	bne.n	8005806 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005790:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	b2da      	uxtb	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80057a2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	1e5a      	subs	r2, r3, #1
 80057a8:	617a      	str	r2, [r7, #20]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10b      	bne.n	80057c6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	22ff      	movs	r2, #255	; 0xff
 80057b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2203      	movs	r2, #3
 80057ba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e082      	b.n	80058cc <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0e7      	beq.n	80057a4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057f2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005802:	609a      	str	r2, [r3, #8]
 8005804:	e04b      	b.n	800589e <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005814:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	b2da      	uxtb	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005826:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005828:	4b2a      	ldr	r3, [pc, #168]	; (80058d4 <HAL_RTC_SetAlarm_IT+0x278>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a2a      	ldr	r2, [pc, #168]	; (80058d8 <HAL_RTC_SetAlarm_IT+0x27c>)
 800582e:	fba2 2303 	umull	r2, r3, r2, r3
 8005832:	0adb      	lsrs	r3, r3, #11
 8005834:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005838:	fb02 f303 	mul.w	r3, r2, r3
 800583c:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	1e5a      	subs	r2, r3, #1
 8005842:	617a      	str	r2, [r7, #20]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10b      	bne.n	8005860 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	22ff      	movs	r2, #255	; 0xff
 800584e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2203      	movs	r2, #3
 8005854:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e035      	b.n	80058cc <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0e7      	beq.n	800583e <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800588c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800589c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800589e:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <HAL_RTC_SetAlarm_IT+0x280>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a0e      	ldr	r2, [pc, #56]	; (80058dc <HAL_RTC_SetAlarm_IT+0x280>)
 80058a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058a8:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80058aa:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <HAL_RTC_SetAlarm_IT+0x280>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	4a0b      	ldr	r2, [pc, #44]	; (80058dc <HAL_RTC_SetAlarm_IT+0x280>)
 80058b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b4:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	22ff      	movs	r2, #255	; 0xff
 80058bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3724      	adds	r7, #36	; 0x24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd90      	pop	{r4, r7, pc}
 80058d4:	20000004 	.word	0x20000004
 80058d8:	10624dd3 	.word	0x10624dd3
 80058dc:	40013c00 	.word	0x40013c00

080058e0 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fc:	d10e      	bne.n	800591c <HAL_RTC_GetAlarm+0x3c>
  {
    sAlarm->Alarm = RTC_ALARM_A;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005904:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005914:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	e00d      	b.n	8005938 <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005922:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005932:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005936:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	0c1b      	lsrs	r3, r3, #16
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005942:	b2da      	uxtb	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	0a1b      	lsrs	r3, r3, #8
 800594c:	b2db      	uxtb	r3, r3
 800594e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005952:	b2da      	uxtb	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005960:	b2da      	uxtb	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	0d9b      	lsrs	r3, r3, #22
 800596a:	b2db      	uxtb	r3, r3
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	b2da      	uxtb	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	0e1b      	lsrs	r3, r3, #24
 8005980:	b2db      	uxtb	r3, r3
 8005982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005986:	b2da      	uxtb	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d125      	bne.n	80059f4 <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 f911 	bl	8005bd4 <RTC_Bcd2ToByte>
 80059b2:	4603      	mov	r3, r0
 80059b4:	461a      	mov	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 f908 	bl	8005bd4 <RTC_Bcd2ToByte>
 80059c4:	4603      	mov	r3, r0
 80059c6:	461a      	mov	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	789b      	ldrb	r3, [r3, #2]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 f8ff 	bl	8005bd4 <RTC_Bcd2ToByte>
 80059d6:	4603      	mov	r3, r0
 80059d8:	461a      	mov	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 f8f5 	bl	8005bd4 <RTC_Bcd2ToByte>
 80059ea:	4603      	mov	r3, r0
 80059ec:	461a      	mov	r2, r3
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005a08:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <HAL_RTC_AlarmIRQHandler+0x8c>)
 8005a0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a0e:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d013      	beq.n	8005a46 <HAL_RTC_AlarmIRQHandler+0x46>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00c      	beq.n	8005a46 <HAL_RTC_AlarmIRQHandler+0x46>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005a3c:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	4798      	blx	r3
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d013      	beq.n	8005a7c <HAL_RTC_AlarmIRQHandler+0x7c>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00c      	beq.n	8005a7c <HAL_RTC_AlarmIRQHandler+0x7c>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005a72:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	4798      	blx	r3
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	775a      	strb	r2, [r3, #29]
}
 8005a82:	bf00      	nop
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40013c00 	.word	0x40013c00

08005a90 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005aaa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005aac:	f7fc fbdc 	bl	8002268 <HAL_GetTick>
 8005ab0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ab2:	e009      	b.n	8005ac8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ab4:	f7fc fbd8 	bl	8002268 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e007      	b.n	8005ad8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0ee      	beq.n	8005ab4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d122      	bne.n	8005b44 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b0c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b0e:	f7fc fbab 	bl	8002268 <HAL_GetTick>
 8005b12:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b14:	e00c      	b.n	8005b30 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b16:	f7fc fba7 	bl	8002268 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b24:	d904      	bls.n	8005b30 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2204      	movs	r2, #4
 8005b2a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d102      	bne.n	8005b44 <RTC_EnterInitMode+0x64>
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d1e8      	bne.n	8005b16 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b68:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10a      	bne.n	8005b8e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff ff89 	bl	8005a90 <HAL_RTC_WaitForSynchro>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d004      	beq.n	8005b8e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2204      	movs	r2, #4
 8005b88:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005ba6:	e005      	b.n	8005bb4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3301      	adds	r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	3b0a      	subs	r3, #10
 8005bb2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	2b09      	cmp	r3, #9
 8005bb8:	d8f6      	bhi.n	8005ba8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	79fb      	ldrb	r3, [r7, #7]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	b2db      	uxtb	r3, r3
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	091b      	lsrs	r3, r3, #4
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	79fb      	ldrb	r3, [r7, #7]
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	4413      	add	r3, r2
 8005c02:	b2db      	uxtb	r3, r3
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_RTCEx_Tamper3EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e040      	b.n	8005d1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fb ff0e 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2224      	movs	r2, #36	; 0x24
 8005cb4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0201 	bic.w	r2, r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f82c 	bl	8005d24 <UART_SetConfig>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e022      	b.n	8005d1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fa84 	bl	80061ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fb0b 	bl	8006330 <UART_CheckIdleState>
 8005d1a:	4603      	mov	r3, r0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	4ba6      	ldr	r3, [pc, #664]	; (8005fe8 <UART_SetConfig+0x2c4>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6812      	ldr	r2, [r2, #0]
 8005d56:	6979      	ldr	r1, [r7, #20]
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a94      	ldr	r2, [pc, #592]	; (8005fec <UART_SetConfig+0x2c8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d120      	bne.n	8005de2 <UART_SetConfig+0xbe>
 8005da0:	4b93      	ldr	r3, [pc, #588]	; (8005ff0 <UART_SetConfig+0x2cc>)
 8005da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d816      	bhi.n	8005ddc <UART_SetConfig+0xb8>
 8005dae:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <UART_SetConfig+0x90>)
 8005db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db4:	08005dc5 	.word	0x08005dc5
 8005db8:	08005dd1 	.word	0x08005dd1
 8005dbc:	08005dcb 	.word	0x08005dcb
 8005dc0:	08005dd7 	.word	0x08005dd7
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	77fb      	strb	r3, [r7, #31]
 8005dc8:	e150      	b.n	800606c <UART_SetConfig+0x348>
 8005dca:	2302      	movs	r3, #2
 8005dcc:	77fb      	strb	r3, [r7, #31]
 8005dce:	e14d      	b.n	800606c <UART_SetConfig+0x348>
 8005dd0:	2304      	movs	r3, #4
 8005dd2:	77fb      	strb	r3, [r7, #31]
 8005dd4:	e14a      	b.n	800606c <UART_SetConfig+0x348>
 8005dd6:	2308      	movs	r3, #8
 8005dd8:	77fb      	strb	r3, [r7, #31]
 8005dda:	e147      	b.n	800606c <UART_SetConfig+0x348>
 8005ddc:	2310      	movs	r3, #16
 8005dde:	77fb      	strb	r3, [r7, #31]
 8005de0:	e144      	b.n	800606c <UART_SetConfig+0x348>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a83      	ldr	r2, [pc, #524]	; (8005ff4 <UART_SetConfig+0x2d0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d132      	bne.n	8005e52 <UART_SetConfig+0x12e>
 8005dec:	4b80      	ldr	r3, [pc, #512]	; (8005ff0 <UART_SetConfig+0x2cc>)
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df2:	f003 030c 	and.w	r3, r3, #12
 8005df6:	2b0c      	cmp	r3, #12
 8005df8:	d828      	bhi.n	8005e4c <UART_SetConfig+0x128>
 8005dfa:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <UART_SetConfig+0xdc>)
 8005dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e00:	08005e35 	.word	0x08005e35
 8005e04:	08005e4d 	.word	0x08005e4d
 8005e08:	08005e4d 	.word	0x08005e4d
 8005e0c:	08005e4d 	.word	0x08005e4d
 8005e10:	08005e41 	.word	0x08005e41
 8005e14:	08005e4d 	.word	0x08005e4d
 8005e18:	08005e4d 	.word	0x08005e4d
 8005e1c:	08005e4d 	.word	0x08005e4d
 8005e20:	08005e3b 	.word	0x08005e3b
 8005e24:	08005e4d 	.word	0x08005e4d
 8005e28:	08005e4d 	.word	0x08005e4d
 8005e2c:	08005e4d 	.word	0x08005e4d
 8005e30:	08005e47 	.word	0x08005e47
 8005e34:	2300      	movs	r3, #0
 8005e36:	77fb      	strb	r3, [r7, #31]
 8005e38:	e118      	b.n	800606c <UART_SetConfig+0x348>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	77fb      	strb	r3, [r7, #31]
 8005e3e:	e115      	b.n	800606c <UART_SetConfig+0x348>
 8005e40:	2304      	movs	r3, #4
 8005e42:	77fb      	strb	r3, [r7, #31]
 8005e44:	e112      	b.n	800606c <UART_SetConfig+0x348>
 8005e46:	2308      	movs	r3, #8
 8005e48:	77fb      	strb	r3, [r7, #31]
 8005e4a:	e10f      	b.n	800606c <UART_SetConfig+0x348>
 8005e4c:	2310      	movs	r3, #16
 8005e4e:	77fb      	strb	r3, [r7, #31]
 8005e50:	e10c      	b.n	800606c <UART_SetConfig+0x348>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a68      	ldr	r2, [pc, #416]	; (8005ff8 <UART_SetConfig+0x2d4>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d120      	bne.n	8005e9e <UART_SetConfig+0x17a>
 8005e5c:	4b64      	ldr	r3, [pc, #400]	; (8005ff0 <UART_SetConfig+0x2cc>)
 8005e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e66:	2b30      	cmp	r3, #48	; 0x30
 8005e68:	d013      	beq.n	8005e92 <UART_SetConfig+0x16e>
 8005e6a:	2b30      	cmp	r3, #48	; 0x30
 8005e6c:	d814      	bhi.n	8005e98 <UART_SetConfig+0x174>
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d009      	beq.n	8005e86 <UART_SetConfig+0x162>
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d810      	bhi.n	8005e98 <UART_SetConfig+0x174>
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <UART_SetConfig+0x15c>
 8005e7a:	2b10      	cmp	r3, #16
 8005e7c:	d006      	beq.n	8005e8c <UART_SetConfig+0x168>
 8005e7e:	e00b      	b.n	8005e98 <UART_SetConfig+0x174>
 8005e80:	2300      	movs	r3, #0
 8005e82:	77fb      	strb	r3, [r7, #31]
 8005e84:	e0f2      	b.n	800606c <UART_SetConfig+0x348>
 8005e86:	2302      	movs	r3, #2
 8005e88:	77fb      	strb	r3, [r7, #31]
 8005e8a:	e0ef      	b.n	800606c <UART_SetConfig+0x348>
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	77fb      	strb	r3, [r7, #31]
 8005e90:	e0ec      	b.n	800606c <UART_SetConfig+0x348>
 8005e92:	2308      	movs	r3, #8
 8005e94:	77fb      	strb	r3, [r7, #31]
 8005e96:	e0e9      	b.n	800606c <UART_SetConfig+0x348>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	77fb      	strb	r3, [r7, #31]
 8005e9c:	e0e6      	b.n	800606c <UART_SetConfig+0x348>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a56      	ldr	r2, [pc, #344]	; (8005ffc <UART_SetConfig+0x2d8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d120      	bne.n	8005eea <UART_SetConfig+0x1c6>
 8005ea8:	4b51      	ldr	r3, [pc, #324]	; (8005ff0 <UART_SetConfig+0x2cc>)
 8005eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8005eb4:	d013      	beq.n	8005ede <UART_SetConfig+0x1ba>
 8005eb6:	2bc0      	cmp	r3, #192	; 0xc0
 8005eb8:	d814      	bhi.n	8005ee4 <UART_SetConfig+0x1c0>
 8005eba:	2b80      	cmp	r3, #128	; 0x80
 8005ebc:	d009      	beq.n	8005ed2 <UART_SetConfig+0x1ae>
 8005ebe:	2b80      	cmp	r3, #128	; 0x80
 8005ec0:	d810      	bhi.n	8005ee4 <UART_SetConfig+0x1c0>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <UART_SetConfig+0x1a8>
 8005ec6:	2b40      	cmp	r3, #64	; 0x40
 8005ec8:	d006      	beq.n	8005ed8 <UART_SetConfig+0x1b4>
 8005eca:	e00b      	b.n	8005ee4 <UART_SetConfig+0x1c0>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	77fb      	strb	r3, [r7, #31]
 8005ed0:	e0cc      	b.n	800606c <UART_SetConfig+0x348>
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	77fb      	strb	r3, [r7, #31]
 8005ed6:	e0c9      	b.n	800606c <UART_SetConfig+0x348>
 8005ed8:	2304      	movs	r3, #4
 8005eda:	77fb      	strb	r3, [r7, #31]
 8005edc:	e0c6      	b.n	800606c <UART_SetConfig+0x348>
 8005ede:	2308      	movs	r3, #8
 8005ee0:	77fb      	strb	r3, [r7, #31]
 8005ee2:	e0c3      	b.n	800606c <UART_SetConfig+0x348>
 8005ee4:	2310      	movs	r3, #16
 8005ee6:	77fb      	strb	r3, [r7, #31]
 8005ee8:	e0c0      	b.n	800606c <UART_SetConfig+0x348>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a44      	ldr	r2, [pc, #272]	; (8006000 <UART_SetConfig+0x2dc>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d125      	bne.n	8005f40 <UART_SetConfig+0x21c>
 8005ef4:	4b3e      	ldr	r3, [pc, #248]	; (8005ff0 <UART_SetConfig+0x2cc>)
 8005ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f02:	d017      	beq.n	8005f34 <UART_SetConfig+0x210>
 8005f04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f08:	d817      	bhi.n	8005f3a <UART_SetConfig+0x216>
 8005f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f0e:	d00b      	beq.n	8005f28 <UART_SetConfig+0x204>
 8005f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f14:	d811      	bhi.n	8005f3a <UART_SetConfig+0x216>
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <UART_SetConfig+0x1fe>
 8005f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f1e:	d006      	beq.n	8005f2e <UART_SetConfig+0x20a>
 8005f20:	e00b      	b.n	8005f3a <UART_SetConfig+0x216>
 8005f22:	2300      	movs	r3, #0
 8005f24:	77fb      	strb	r3, [r7, #31]
 8005f26:	e0a1      	b.n	800606c <UART_SetConfig+0x348>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	77fb      	strb	r3, [r7, #31]
 8005f2c:	e09e      	b.n	800606c <UART_SetConfig+0x348>
 8005f2e:	2304      	movs	r3, #4
 8005f30:	77fb      	strb	r3, [r7, #31]
 8005f32:	e09b      	b.n	800606c <UART_SetConfig+0x348>
 8005f34:	2308      	movs	r3, #8
 8005f36:	77fb      	strb	r3, [r7, #31]
 8005f38:	e098      	b.n	800606c <UART_SetConfig+0x348>
 8005f3a:	2310      	movs	r3, #16
 8005f3c:	77fb      	strb	r3, [r7, #31]
 8005f3e:	e095      	b.n	800606c <UART_SetConfig+0x348>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a2f      	ldr	r2, [pc, #188]	; (8006004 <UART_SetConfig+0x2e0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d125      	bne.n	8005f96 <UART_SetConfig+0x272>
 8005f4a:	4b29      	ldr	r3, [pc, #164]	; (8005ff0 <UART_SetConfig+0x2cc>)
 8005f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f58:	d017      	beq.n	8005f8a <UART_SetConfig+0x266>
 8005f5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f5e:	d817      	bhi.n	8005f90 <UART_SetConfig+0x26c>
 8005f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f64:	d00b      	beq.n	8005f7e <UART_SetConfig+0x25a>
 8005f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f6a:	d811      	bhi.n	8005f90 <UART_SetConfig+0x26c>
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <UART_SetConfig+0x254>
 8005f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f74:	d006      	beq.n	8005f84 <UART_SetConfig+0x260>
 8005f76:	e00b      	b.n	8005f90 <UART_SetConfig+0x26c>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	77fb      	strb	r3, [r7, #31]
 8005f7c:	e076      	b.n	800606c <UART_SetConfig+0x348>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	77fb      	strb	r3, [r7, #31]
 8005f82:	e073      	b.n	800606c <UART_SetConfig+0x348>
 8005f84:	2304      	movs	r3, #4
 8005f86:	77fb      	strb	r3, [r7, #31]
 8005f88:	e070      	b.n	800606c <UART_SetConfig+0x348>
 8005f8a:	2308      	movs	r3, #8
 8005f8c:	77fb      	strb	r3, [r7, #31]
 8005f8e:	e06d      	b.n	800606c <UART_SetConfig+0x348>
 8005f90:	2310      	movs	r3, #16
 8005f92:	77fb      	strb	r3, [r7, #31]
 8005f94:	e06a      	b.n	800606c <UART_SetConfig+0x348>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1b      	ldr	r2, [pc, #108]	; (8006008 <UART_SetConfig+0x2e4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d138      	bne.n	8006012 <UART_SetConfig+0x2ee>
 8005fa0:	4b13      	ldr	r3, [pc, #76]	; (8005ff0 <UART_SetConfig+0x2cc>)
 8005fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005faa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fae:	d017      	beq.n	8005fe0 <UART_SetConfig+0x2bc>
 8005fb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fb4:	d82a      	bhi.n	800600c <UART_SetConfig+0x2e8>
 8005fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fba:	d00b      	beq.n	8005fd4 <UART_SetConfig+0x2b0>
 8005fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc0:	d824      	bhi.n	800600c <UART_SetConfig+0x2e8>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <UART_SetConfig+0x2aa>
 8005fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fca:	d006      	beq.n	8005fda <UART_SetConfig+0x2b6>
 8005fcc:	e01e      	b.n	800600c <UART_SetConfig+0x2e8>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	77fb      	strb	r3, [r7, #31]
 8005fd2:	e04b      	b.n	800606c <UART_SetConfig+0x348>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	77fb      	strb	r3, [r7, #31]
 8005fd8:	e048      	b.n	800606c <UART_SetConfig+0x348>
 8005fda:	2304      	movs	r3, #4
 8005fdc:	77fb      	strb	r3, [r7, #31]
 8005fde:	e045      	b.n	800606c <UART_SetConfig+0x348>
 8005fe0:	2308      	movs	r3, #8
 8005fe2:	77fb      	strb	r3, [r7, #31]
 8005fe4:	e042      	b.n	800606c <UART_SetConfig+0x348>
 8005fe6:	bf00      	nop
 8005fe8:	efff69f3 	.word	0xefff69f3
 8005fec:	40011000 	.word	0x40011000
 8005ff0:	40023800 	.word	0x40023800
 8005ff4:	40004400 	.word	0x40004400
 8005ff8:	40004800 	.word	0x40004800
 8005ffc:	40004c00 	.word	0x40004c00
 8006000:	40005000 	.word	0x40005000
 8006004:	40011400 	.word	0x40011400
 8006008:	40007800 	.word	0x40007800
 800600c:	2310      	movs	r3, #16
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e02c      	b.n	800606c <UART_SetConfig+0x348>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a72      	ldr	r2, [pc, #456]	; (80061e0 <UART_SetConfig+0x4bc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d125      	bne.n	8006068 <UART_SetConfig+0x344>
 800601c:	4b71      	ldr	r3, [pc, #452]	; (80061e4 <UART_SetConfig+0x4c0>)
 800601e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006022:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006026:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800602a:	d017      	beq.n	800605c <UART_SetConfig+0x338>
 800602c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006030:	d817      	bhi.n	8006062 <UART_SetConfig+0x33e>
 8006032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006036:	d00b      	beq.n	8006050 <UART_SetConfig+0x32c>
 8006038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800603c:	d811      	bhi.n	8006062 <UART_SetConfig+0x33e>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <UART_SetConfig+0x326>
 8006042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006046:	d006      	beq.n	8006056 <UART_SetConfig+0x332>
 8006048:	e00b      	b.n	8006062 <UART_SetConfig+0x33e>
 800604a:	2300      	movs	r3, #0
 800604c:	77fb      	strb	r3, [r7, #31]
 800604e:	e00d      	b.n	800606c <UART_SetConfig+0x348>
 8006050:	2302      	movs	r3, #2
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e00a      	b.n	800606c <UART_SetConfig+0x348>
 8006056:	2304      	movs	r3, #4
 8006058:	77fb      	strb	r3, [r7, #31]
 800605a:	e007      	b.n	800606c <UART_SetConfig+0x348>
 800605c:	2308      	movs	r3, #8
 800605e:	77fb      	strb	r3, [r7, #31]
 8006060:	e004      	b.n	800606c <UART_SetConfig+0x348>
 8006062:	2310      	movs	r3, #16
 8006064:	77fb      	strb	r3, [r7, #31]
 8006066:	e001      	b.n	800606c <UART_SetConfig+0x348>
 8006068:	2310      	movs	r3, #16
 800606a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006074:	d15b      	bne.n	800612e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006076:	7ffb      	ldrb	r3, [r7, #31]
 8006078:	2b08      	cmp	r3, #8
 800607a:	d828      	bhi.n	80060ce <UART_SetConfig+0x3aa>
 800607c:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <UART_SetConfig+0x360>)
 800607e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006082:	bf00      	nop
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060b1 	.word	0x080060b1
 800608c:	080060b9 	.word	0x080060b9
 8006090:	080060cf 	.word	0x080060cf
 8006094:	080060bf 	.word	0x080060bf
 8006098:	080060cf 	.word	0x080060cf
 800609c:	080060cf 	.word	0x080060cf
 80060a0:	080060cf 	.word	0x080060cf
 80060a4:	080060c7 	.word	0x080060c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a8:	f7fe fbae 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
 80060ac:	61b8      	str	r0, [r7, #24]
        break;
 80060ae:	e013      	b.n	80060d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060b0:	f7fe fbbe 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
 80060b4:	61b8      	str	r0, [r7, #24]
        break;
 80060b6:	e00f      	b.n	80060d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060b8:	4b4b      	ldr	r3, [pc, #300]	; (80061e8 <UART_SetConfig+0x4c4>)
 80060ba:	61bb      	str	r3, [r7, #24]
        break;
 80060bc:	e00c      	b.n	80060d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060be:	f7fe fad1 	bl	8004664 <HAL_RCC_GetSysClockFreq>
 80060c2:	61b8      	str	r0, [r7, #24]
        break;
 80060c4:	e008      	b.n	80060d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ca:	61bb      	str	r3, [r7, #24]
        break;
 80060cc:	e004      	b.n	80060d8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	77bb      	strb	r3, [r7, #30]
        break;
 80060d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d074      	beq.n	80061c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	005a      	lsls	r2, r3, #1
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	085b      	lsrs	r3, r3, #1
 80060e8:	441a      	add	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	2b0f      	cmp	r3, #15
 80060f8:	d916      	bls.n	8006128 <UART_SetConfig+0x404>
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006100:	d212      	bcs.n	8006128 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	b29b      	uxth	r3, r3
 8006106:	f023 030f 	bic.w	r3, r3, #15
 800610a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	085b      	lsrs	r3, r3, #1
 8006110:	b29b      	uxth	r3, r3
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	b29a      	uxth	r2, r3
 8006118:	89fb      	ldrh	r3, [r7, #14]
 800611a:	4313      	orrs	r3, r2
 800611c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	89fa      	ldrh	r2, [r7, #14]
 8006124:	60da      	str	r2, [r3, #12]
 8006126:	e04f      	b.n	80061c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	77bb      	strb	r3, [r7, #30]
 800612c:	e04c      	b.n	80061c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800612e:	7ffb      	ldrb	r3, [r7, #31]
 8006130:	2b08      	cmp	r3, #8
 8006132:	d828      	bhi.n	8006186 <UART_SetConfig+0x462>
 8006134:	a201      	add	r2, pc, #4	; (adr r2, 800613c <UART_SetConfig+0x418>)
 8006136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613a:	bf00      	nop
 800613c:	08006161 	.word	0x08006161
 8006140:	08006169 	.word	0x08006169
 8006144:	08006171 	.word	0x08006171
 8006148:	08006187 	.word	0x08006187
 800614c:	08006177 	.word	0x08006177
 8006150:	08006187 	.word	0x08006187
 8006154:	08006187 	.word	0x08006187
 8006158:	08006187 	.word	0x08006187
 800615c:	0800617f 	.word	0x0800617f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006160:	f7fe fb52 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
 8006164:	61b8      	str	r0, [r7, #24]
        break;
 8006166:	e013      	b.n	8006190 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006168:	f7fe fb62 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
 800616c:	61b8      	str	r0, [r7, #24]
        break;
 800616e:	e00f      	b.n	8006190 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006170:	4b1d      	ldr	r3, [pc, #116]	; (80061e8 <UART_SetConfig+0x4c4>)
 8006172:	61bb      	str	r3, [r7, #24]
        break;
 8006174:	e00c      	b.n	8006190 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006176:	f7fe fa75 	bl	8004664 <HAL_RCC_GetSysClockFreq>
 800617a:	61b8      	str	r0, [r7, #24]
        break;
 800617c:	e008      	b.n	8006190 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800617e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006182:	61bb      	str	r3, [r7, #24]
        break;
 8006184:	e004      	b.n	8006190 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	77bb      	strb	r3, [r7, #30]
        break;
 800618e:	bf00      	nop
    }

    if (pclk != 0U)
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d018      	beq.n	80061c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	085a      	lsrs	r2, r3, #1
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	441a      	add	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2b0f      	cmp	r3, #15
 80061ae:	d909      	bls.n	80061c4 <UART_SetConfig+0x4a0>
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b6:	d205      	bcs.n	80061c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60da      	str	r2, [r3, #12]
 80061c2:	e001      	b.n	80061c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80061d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3720      	adds	r7, #32
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	40007c00 	.word	0x40007c00
 80061e4:	40023800 	.word	0x40023800
 80061e8:	00f42400 	.word	0x00f42400

080061ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00a      	beq.n	800625a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	f003 0310 	and.w	r3, r3, #16
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00a      	beq.n	800629e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01a      	beq.n	8006302 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ea:	d10a      	bne.n	8006302 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]
  }
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af02      	add	r7, sp, #8
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006340:	f7fb ff92 	bl	8002268 <HAL_GetTick>
 8006344:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b08      	cmp	r3, #8
 8006352:	d10e      	bne.n	8006372 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f81b 	bl	800639e <UART_WaitOnFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e011      	b.n	8006396 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2220      	movs	r2, #32
 8006376:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b09c      	sub	sp, #112	; 0x70
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	603b      	str	r3, [r7, #0]
 80063aa:	4613      	mov	r3, r2
 80063ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ae:	e0a7      	b.n	8006500 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b6:	f000 80a3 	beq.w	8006500 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ba:	f7fb ff55 	bl	8002268 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d302      	bcc.n	80063d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80063ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d13f      	bne.n	8006450 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80063de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063e4:	667b      	str	r3, [r7, #100]	; 0x64
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80063fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e6      	bne.n	80063d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3308      	adds	r3, #8
 8006408:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640c:	e853 3f00 	ldrex	r3, [r3]
 8006410:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	f023 0301 	bic.w	r3, r3, #1
 8006418:	663b      	str	r3, [r7, #96]	; 0x60
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3308      	adds	r3, #8
 8006420:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006422:	64ba      	str	r2, [r7, #72]	; 0x48
 8006424:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006428:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e5      	bne.n	8006402 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2220      	movs	r2, #32
 800643a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e068      	b.n	8006522 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	d050      	beq.n	8006500 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800646c:	d148      	bne.n	8006500 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006476:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800648c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006496:	637b      	str	r3, [r7, #52]	; 0x34
 8006498:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800649c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e6      	bne.n	8006478 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3308      	adds	r3, #8
 80064b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	613b      	str	r3, [r7, #16]
   return(result);
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f023 0301 	bic.w	r3, r3, #1
 80064c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3308      	adds	r3, #8
 80064c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064ca:	623a      	str	r2, [r7, #32]
 80064cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ce:	69f9      	ldr	r1, [r7, #28]
 80064d0:	6a3a      	ldr	r2, [r7, #32]
 80064d2:	e841 2300 	strex	r3, r2, [r1]
 80064d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e5      	bne.n	80064aa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e010      	b.n	8006522 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69da      	ldr	r2, [r3, #28]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4013      	ands	r3, r2
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	429a      	cmp	r2, r3
 800650e:	bf0c      	ite	eq
 8006510:	2301      	moveq	r3, #1
 8006512:	2300      	movne	r3, #0
 8006514:	b2db      	uxtb	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	429a      	cmp	r2, r3
 800651c:	f43f af48 	beq.w	80063b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3770      	adds	r7, #112	; 0x70
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800652c:	b084      	sub	sp, #16
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	f107 001c 	add.w	r0, r7, #28
 800653a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	2b01      	cmp	r3, #1
 8006542:	d120      	bne.n	8006586 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006548:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	4b20      	ldr	r3, [pc, #128]	; (80065d8 <USB_CoreInit+0xac>)
 8006556:	4013      	ands	r3, r2
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800656a:	2b01      	cmp	r3, #1
 800656c:	d105      	bne.n	800657a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fa96 	bl	8006aac <USB_CoreReset>
 8006580:	4603      	mov	r3, r0
 8006582:	73fb      	strb	r3, [r7, #15]
 8006584:	e010      	b.n	80065a8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fa8a 	bl	8006aac <USB_CoreReset>
 8006598:	4603      	mov	r3, r0
 800659a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d10b      	bne.n	80065c6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f043 0206 	orr.w	r2, r3, #6
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f043 0220 	orr.w	r2, r3, #32
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065d2:	b004      	add	sp, #16
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	ffbdffbf 	.word	0xffbdffbf

080065dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f023 0201 	bic.w	r2, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d115      	bne.n	800664c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800662c:	2001      	movs	r0, #1
 800662e:	f7fb fe27 	bl	8002280 <HAL_Delay>
      ms++;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3301      	adds	r3, #1
 8006636:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fa29 	bl	8006a90 <USB_GetMode>
 800663e:	4603      	mov	r3, r0
 8006640:	2b01      	cmp	r3, #1
 8006642:	d01e      	beq.n	8006682 <USB_SetCurrentMode+0x84>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b31      	cmp	r3, #49	; 0x31
 8006648:	d9f0      	bls.n	800662c <USB_SetCurrentMode+0x2e>
 800664a:	e01a      	b.n	8006682 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800664c:	78fb      	ldrb	r3, [r7, #3]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d115      	bne.n	800667e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800665e:	2001      	movs	r0, #1
 8006660:	f7fb fe0e 	bl	8002280 <HAL_Delay>
      ms++;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3301      	adds	r3, #1
 8006668:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fa10 	bl	8006a90 <USB_GetMode>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d005      	beq.n	8006682 <USB_SetCurrentMode+0x84>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b31      	cmp	r3, #49	; 0x31
 800667a:	d9f0      	bls.n	800665e <USB_SetCurrentMode+0x60>
 800667c:	e001      	b.n	8006682 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e005      	b.n	800668e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b32      	cmp	r3, #50	; 0x32
 8006686:	d101      	bne.n	800668c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006698:	b084      	sub	sp, #16
 800669a:	b580      	push	{r7, lr}
 800669c:	b086      	sub	sp, #24
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066b2:	2300      	movs	r3, #0
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	e009      	b.n	80066cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	3340      	adds	r3, #64	; 0x40
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	2200      	movs	r2, #0
 80066c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	3301      	adds	r3, #1
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2b0e      	cmp	r3, #14
 80066d0:	d9f2      	bls.n	80066b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d11c      	bne.n	8006712 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e6:	f043 0302 	orr.w	r3, r3, #2
 80066ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	e005      	b.n	800671e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006724:	461a      	mov	r2, r3
 8006726:	2300      	movs	r3, #0
 8006728:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006730:	4619      	mov	r1, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006738:	461a      	mov	r2, r3
 800673a:	680b      	ldr	r3, [r1, #0]
 800673c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	2b01      	cmp	r3, #1
 8006742:	d10c      	bne.n	800675e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800674a:	2100      	movs	r1, #0
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f965 	bl	8006a1c <USB_SetDevSpeed>
 8006752:	e008      	b.n	8006766 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006754:	2101      	movs	r1, #1
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f960 	bl	8006a1c <USB_SetDevSpeed>
 800675c:	e003      	b.n	8006766 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800675e:	2103      	movs	r1, #3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f95b 	bl	8006a1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006766:	2110      	movs	r1, #16
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f8f3 	bl	8006954 <USB_FlushTxFifo>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f91f 	bl	80069bc <USB_FlushRxFifo>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678e:	461a      	mov	r2, r3
 8006790:	2300      	movs	r3, #0
 8006792:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679a:	461a      	mov	r2, r3
 800679c:	2300      	movs	r3, #0
 800679e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a6:	461a      	mov	r2, r3
 80067a8:	2300      	movs	r3, #0
 80067aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ac:	2300      	movs	r3, #0
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	e043      	b.n	800683a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067c8:	d118      	bne.n	80067fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10a      	bne.n	80067e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067dc:	461a      	mov	r2, r3
 80067de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	e013      	b.n	800680e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f2:	461a      	mov	r2, r3
 80067f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	e008      	b.n	800680e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006808:	461a      	mov	r2, r3
 800680a:	2300      	movs	r3, #0
 800680c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681a:	461a      	mov	r2, r3
 800681c:	2300      	movs	r3, #0
 800681e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682c:	461a      	mov	r2, r3
 800682e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006832:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	3301      	adds	r3, #1
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	429a      	cmp	r2, r3
 8006840:	d3b7      	bcc.n	80067b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006842:	2300      	movs	r3, #0
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	e043      	b.n	80068d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800685a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800685e:	d118      	bne.n	8006892 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006872:	461a      	mov	r2, r3
 8006874:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	e013      	b.n	80068a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006888:	461a      	mov	r2, r3
 800688a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	e008      	b.n	80068a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689e:	461a      	mov	r2, r3
 80068a0:	2300      	movs	r3, #0
 80068a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b0:	461a      	mov	r2, r3
 80068b2:	2300      	movs	r3, #0
 80068b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c2:	461a      	mov	r2, r3
 80068c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	3301      	adds	r3, #1
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d3b7      	bcc.n	8006848 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d105      	bne.n	800690c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	f043 0210 	orr.w	r2, r3, #16
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	699a      	ldr	r2, [r3, #24]
 8006910:	4b0e      	ldr	r3, [pc, #56]	; (800694c <USB_DevInit+0x2b4>)
 8006912:	4313      	orrs	r3, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	f043 0208 	orr.w	r2, r3, #8
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800692a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d105      	bne.n	800693c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	699a      	ldr	r2, [r3, #24]
 8006934:	4b06      	ldr	r3, [pc, #24]	; (8006950 <USB_DevInit+0x2b8>)
 8006936:	4313      	orrs	r3, r2
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800693c:	7dfb      	ldrb	r3, [r7, #23]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006948:	b004      	add	sp, #16
 800694a:	4770      	bx	lr
 800694c:	803c3800 	.word	0x803c3800
 8006950:	40000004 	.word	0x40000004

08006954 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3301      	adds	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4a13      	ldr	r2, [pc, #76]	; (80069b8 <USB_FlushTxFifo+0x64>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d901      	bls.n	8006974 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e01b      	b.n	80069ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	daf2      	bge.n	8006962 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	019b      	lsls	r3, r3, #6
 8006984:	f043 0220 	orr.w	r2, r3, #32
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3301      	adds	r3, #1
 8006990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4a08      	ldr	r2, [pc, #32]	; (80069b8 <USB_FlushTxFifo+0x64>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d901      	bls.n	800699e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e006      	b.n	80069ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d0f0      	beq.n	800698c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	00030d40 	.word	0x00030d40

080069bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3301      	adds	r3, #1
 80069cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4a11      	ldr	r2, [pc, #68]	; (8006a18 <USB_FlushRxFifo+0x5c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d901      	bls.n	80069da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e018      	b.n	8006a0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	daf2      	bge.n	80069c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2210      	movs	r2, #16
 80069ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4a08      	ldr	r2, [pc, #32]	; (8006a18 <USB_FlushRxFifo+0x5c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d901      	bls.n	80069fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e006      	b.n	8006a0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0310 	and.w	r3, r3, #16
 8006a06:	2b10      	cmp	r3, #16
 8006a08:	d0f0      	beq.n	80069ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	00030d40 	.word	0x00030d40

08006a1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	78fb      	ldrb	r3, [r7, #3]
 8006a36:	68f9      	ldr	r1, [r7, #12]
 8006a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b085      	sub	sp, #20
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a68:	f023 0303 	bic.w	r3, r3, #3
 8006a6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a7c:	f043 0302 	orr.w	r3, r3, #2
 8006a80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4a13      	ldr	r2, [pc, #76]	; (8006b10 <USB_CoreReset+0x64>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d901      	bls.n	8006aca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e01b      	b.n	8006b02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	daf2      	bge.n	8006ab8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f043 0201 	orr.w	r2, r3, #1
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <USB_CoreReset+0x64>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d901      	bls.n	8006af4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e006      	b.n	8006b02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d0f0      	beq.n	8006ae2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	00030d40 	.word	0x00030d40

08006b14 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006b1a:	4b87      	ldr	r3, [pc, #540]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006b1c:	22c0      	movs	r2, #192	; 0xc0
 8006b1e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006b20:	4b85      	ldr	r3, [pc, #532]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006b22:	22a8      	movs	r2, #168	; 0xa8
 8006b24:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 137;
 8006b26:	4b84      	ldr	r3, [pc, #528]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006b28:	2289      	movs	r2, #137	; 0x89
 8006b2a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 110;
 8006b2c:	4b82      	ldr	r3, [pc, #520]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006b2e:	226e      	movs	r2, #110	; 0x6e
 8006b30:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006b32:	4b82      	ldr	r3, [pc, #520]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006b34:	22ff      	movs	r2, #255	; 0xff
 8006b36:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006b38:	4b80      	ldr	r3, [pc, #512]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006b3a:	22ff      	movs	r2, #255	; 0xff
 8006b3c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006b3e:	4b7f      	ldr	r3, [pc, #508]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006b40:	22ff      	movs	r2, #255	; 0xff
 8006b42:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006b44:	4b7d      	ldr	r3, [pc, #500]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8006b4a:	4b7d      	ldr	r3, [pc, #500]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006b4c:	22c0      	movs	r2, #192	; 0xc0
 8006b4e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006b50:	4b7b      	ldr	r3, [pc, #492]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006b52:	22a8      	movs	r2, #168	; 0xa8
 8006b54:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 137;
 8006b56:	4b7a      	ldr	r3, [pc, #488]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006b58:	2289      	movs	r2, #137	; 0x89
 8006b5a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006b5c:	4b78      	ldr	r3, [pc, #480]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006b5e:	2201      	movs	r2, #1
 8006b60:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8006b62:	f001 f883 	bl	8007c6c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006b66:	4b74      	ldr	r3, [pc, #464]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	061a      	lsls	r2, r3, #24
 8006b6c:	4b72      	ldr	r3, [pc, #456]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006b6e:	785b      	ldrb	r3, [r3, #1]
 8006b70:	041b      	lsls	r3, r3, #16
 8006b72:	431a      	orrs	r2, r3
 8006b74:	4b70      	ldr	r3, [pc, #448]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006b76:	789b      	ldrb	r3, [r3, #2]
 8006b78:	021b      	lsls	r3, r3, #8
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	4a6e      	ldr	r2, [pc, #440]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006b7e:	78d2      	ldrb	r2, [r2, #3]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	061a      	lsls	r2, r3, #24
 8006b84:	4b6c      	ldr	r3, [pc, #432]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	0619      	lsls	r1, r3, #24
 8006b8a:	4b6b      	ldr	r3, [pc, #428]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	4319      	orrs	r1, r3
 8006b92:	4b69      	ldr	r3, [pc, #420]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006b94:	789b      	ldrb	r3, [r3, #2]
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	4967      	ldr	r1, [pc, #412]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006b9c:	78c9      	ldrb	r1, [r1, #3]
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	4b63      	ldr	r3, [pc, #396]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	0619      	lsls	r1, r3, #24
 8006bae:	4b62      	ldr	r3, [pc, #392]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006bb0:	785b      	ldrb	r3, [r3, #1]
 8006bb2:	041b      	lsls	r3, r3, #16
 8006bb4:	4319      	orrs	r1, r3
 8006bb6:	4b60      	ldr	r3, [pc, #384]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006bb8:	789b      	ldrb	r3, [r3, #2]
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	495e      	ldr	r1, [pc, #376]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006bc0:	78c9      	ldrb	r1, [r1, #3]
 8006bc2:	430b      	orrs	r3, r1
 8006bc4:	0a1b      	lsrs	r3, r3, #8
 8006bc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	4b5a      	ldr	r3, [pc, #360]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	0619      	lsls	r1, r3, #24
 8006bd2:	4b59      	ldr	r3, [pc, #356]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006bd4:	785b      	ldrb	r3, [r3, #1]
 8006bd6:	041b      	lsls	r3, r3, #16
 8006bd8:	4319      	orrs	r1, r3
 8006bda:	4b57      	ldr	r3, [pc, #348]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006bdc:	789b      	ldrb	r3, [r3, #2]
 8006bde:	021b      	lsls	r3, r3, #8
 8006be0:	430b      	orrs	r3, r1
 8006be2:	4955      	ldr	r1, [pc, #340]	; (8006d38 <MX_LWIP_Init+0x224>)
 8006be4:	78c9      	ldrb	r1, [r1, #3]
 8006be6:	430b      	orrs	r3, r1
 8006be8:	0e1b      	lsrs	r3, r3, #24
 8006bea:	4313      	orrs	r3, r2
 8006bec:	4a55      	ldr	r2, [pc, #340]	; (8006d44 <MX_LWIP_Init+0x230>)
 8006bee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006bf0:	4b52      	ldr	r3, [pc, #328]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	061a      	lsls	r2, r3, #24
 8006bf6:	4b51      	ldr	r3, [pc, #324]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006bf8:	785b      	ldrb	r3, [r3, #1]
 8006bfa:	041b      	lsls	r3, r3, #16
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	4b4f      	ldr	r3, [pc, #316]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006c00:	789b      	ldrb	r3, [r3, #2]
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	4313      	orrs	r3, r2
 8006c06:	4a4d      	ldr	r2, [pc, #308]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006c08:	78d2      	ldrb	r2, [r2, #3]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	061a      	lsls	r2, r3, #24
 8006c0e:	4b4b      	ldr	r3, [pc, #300]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	0619      	lsls	r1, r3, #24
 8006c14:	4b49      	ldr	r3, [pc, #292]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	041b      	lsls	r3, r3, #16
 8006c1a:	4319      	orrs	r1, r3
 8006c1c:	4b47      	ldr	r3, [pc, #284]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006c1e:	789b      	ldrb	r3, [r3, #2]
 8006c20:	021b      	lsls	r3, r3, #8
 8006c22:	430b      	orrs	r3, r1
 8006c24:	4945      	ldr	r1, [pc, #276]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006c26:	78c9      	ldrb	r1, [r1, #3]
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	021b      	lsls	r3, r3, #8
 8006c2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c30:	431a      	orrs	r2, r3
 8006c32:	4b42      	ldr	r3, [pc, #264]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	0619      	lsls	r1, r3, #24
 8006c38:	4b40      	ldr	r3, [pc, #256]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006c3a:	785b      	ldrb	r3, [r3, #1]
 8006c3c:	041b      	lsls	r3, r3, #16
 8006c3e:	4319      	orrs	r1, r3
 8006c40:	4b3e      	ldr	r3, [pc, #248]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006c42:	789b      	ldrb	r3, [r3, #2]
 8006c44:	021b      	lsls	r3, r3, #8
 8006c46:	430b      	orrs	r3, r1
 8006c48:	493c      	ldr	r1, [pc, #240]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006c4a:	78c9      	ldrb	r1, [r1, #3]
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	0a1b      	lsrs	r3, r3, #8
 8006c50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c54:	431a      	orrs	r2, r3
 8006c56:	4b39      	ldr	r3, [pc, #228]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	0619      	lsls	r1, r3, #24
 8006c5c:	4b37      	ldr	r3, [pc, #220]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	041b      	lsls	r3, r3, #16
 8006c62:	4319      	orrs	r1, r3
 8006c64:	4b35      	ldr	r3, [pc, #212]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006c66:	789b      	ldrb	r3, [r3, #2]
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	430b      	orrs	r3, r1
 8006c6c:	4933      	ldr	r1, [pc, #204]	; (8006d3c <MX_LWIP_Init+0x228>)
 8006c6e:	78c9      	ldrb	r1, [r1, #3]
 8006c70:	430b      	orrs	r3, r1
 8006c72:	0e1b      	lsrs	r3, r3, #24
 8006c74:	4313      	orrs	r3, r2
 8006c76:	4a34      	ldr	r2, [pc, #208]	; (8006d48 <MX_LWIP_Init+0x234>)
 8006c78:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006c7a:	4b31      	ldr	r3, [pc, #196]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	061a      	lsls	r2, r3, #24
 8006c80:	4b2f      	ldr	r3, [pc, #188]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006c82:	785b      	ldrb	r3, [r3, #1]
 8006c84:	041b      	lsls	r3, r3, #16
 8006c86:	431a      	orrs	r2, r3
 8006c88:	4b2d      	ldr	r3, [pc, #180]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006c8a:	789b      	ldrb	r3, [r3, #2]
 8006c8c:	021b      	lsls	r3, r3, #8
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	4a2b      	ldr	r2, [pc, #172]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006c92:	78d2      	ldrb	r2, [r2, #3]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	061a      	lsls	r2, r3, #24
 8006c98:	4b29      	ldr	r3, [pc, #164]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	0619      	lsls	r1, r3, #24
 8006c9e:	4b28      	ldr	r3, [pc, #160]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	041b      	lsls	r3, r3, #16
 8006ca4:	4319      	orrs	r1, r3
 8006ca6:	4b26      	ldr	r3, [pc, #152]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006ca8:	789b      	ldrb	r3, [r3, #2]
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	430b      	orrs	r3, r1
 8006cae:	4924      	ldr	r1, [pc, #144]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006cb0:	78c9      	ldrb	r1, [r1, #3]
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	021b      	lsls	r3, r3, #8
 8006cb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	4b20      	ldr	r3, [pc, #128]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	0619      	lsls	r1, r3, #24
 8006cc2:	4b1f      	ldr	r3, [pc, #124]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	041b      	lsls	r3, r3, #16
 8006cc8:	4319      	orrs	r1, r3
 8006cca:	4b1d      	ldr	r3, [pc, #116]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006ccc:	789b      	ldrb	r3, [r3, #2]
 8006cce:	021b      	lsls	r3, r3, #8
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	491b      	ldr	r1, [pc, #108]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006cd4:	78c9      	ldrb	r1, [r1, #3]
 8006cd6:	430b      	orrs	r3, r1
 8006cd8:	0a1b      	lsrs	r3, r3, #8
 8006cda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	4b17      	ldr	r3, [pc, #92]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	0619      	lsls	r1, r3, #24
 8006ce6:	4b16      	ldr	r3, [pc, #88]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006ce8:	785b      	ldrb	r3, [r3, #1]
 8006cea:	041b      	lsls	r3, r3, #16
 8006cec:	4319      	orrs	r1, r3
 8006cee:	4b14      	ldr	r3, [pc, #80]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006cf0:	789b      	ldrb	r3, [r3, #2]
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	430b      	orrs	r3, r1
 8006cf6:	4912      	ldr	r1, [pc, #72]	; (8006d40 <MX_LWIP_Init+0x22c>)
 8006cf8:	78c9      	ldrb	r1, [r1, #3]
 8006cfa:	430b      	orrs	r3, r1
 8006cfc:	0e1b      	lsrs	r3, r3, #24
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	4a12      	ldr	r2, [pc, #72]	; (8006d4c <MX_LWIP_Init+0x238>)
 8006d02:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8006d04:	4b12      	ldr	r3, [pc, #72]	; (8006d50 <MX_LWIP_Init+0x23c>)
 8006d06:	9302      	str	r3, [sp, #8]
 8006d08:	4b12      	ldr	r3, [pc, #72]	; (8006d54 <MX_LWIP_Init+0x240>)
 8006d0a:	9301      	str	r3, [sp, #4]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	4b0e      	ldr	r3, [pc, #56]	; (8006d4c <MX_LWIP_Init+0x238>)
 8006d12:	4a0d      	ldr	r2, [pc, #52]	; (8006d48 <MX_LWIP_Init+0x234>)
 8006d14:	490b      	ldr	r1, [pc, #44]	; (8006d44 <MX_LWIP_Init+0x230>)
 8006d16:	4810      	ldr	r0, [pc, #64]	; (8006d58 <MX_LWIP_Init+0x244>)
 8006d18:	f001 fc94 	bl	8008644 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006d1c:	480e      	ldr	r0, [pc, #56]	; (8006d58 <MX_LWIP_Init+0x244>)
 8006d1e:	f001 fe43 	bl	80089a8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006d22:	480d      	ldr	r0, [pc, #52]	; (8006d58 <MX_LWIP_Init+0x244>)
 8006d24:	f001 fe50 	bl	80089c8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006d28:	490c      	ldr	r1, [pc, #48]	; (8006d5c <MX_LWIP_Init+0x248>)
 8006d2a:	480b      	ldr	r0, [pc, #44]	; (8006d58 <MX_LWIP_Init+0x244>)
 8006d2c:	f001 ff4e 	bl	8008bcc <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006d30:	bf00      	nop
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000884 	.word	0x20000884
 8006d3c:	20000888 	.word	0x20000888
 8006d40:	2000088c 	.word	0x2000088c
 8006d44:	20000878 	.word	0x20000878
 8006d48:	2000087c 	.word	0x2000087c
 8006d4c:	20000880 	.word	0x20000880
 8006d50:	08011d21 	.word	0x08011d21
 8006d54:	08007075 	.word	0x08007075
 8006d58:	20000844 	.word	0x20000844
 8006d5c:	08006d61 	.word	0x08006d61

08006d60 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <SCB_InvalidateDCache_by_Addr>:
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8006d86:	2320      	movs	r3, #32
 8006d88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006d8a:	f3bf 8f4f 	dsb	sy
}
 8006d8e:	bf00      	nop
    while (op_size > 0) {
 8006d90:	e00b      	b.n	8006daa <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8006d92:	4a0d      	ldr	r2, [pc, #52]	; (8006dc8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4413      	add	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	dcf0      	bgt.n	8006d92 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006db0:	f3bf 8f4f 	dsb	sy
}
 8006db4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006db6:	f3bf 8f6f 	isb	sy
}
 8006dba:	bf00      	nop
}
 8006dbc:	bf00      	nop
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	e000ed00 	.word	0xe000ed00

08006dcc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006dd8:	4b40      	ldr	r3, [pc, #256]	; (8006edc <low_level_init+0x110>)
 8006dda:	4a41      	ldr	r2, [pc, #260]	; (8006ee0 <low_level_init+0x114>)
 8006ddc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006dde:	2300      	movs	r3, #0
 8006de0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006de2:	2380      	movs	r3, #128	; 0x80
 8006de4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006de6:	23e1      	movs	r3, #225	; 0xe1
 8006de8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006dea:	2300      	movs	r3, #0
 8006dec:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006dee:	2300      	movs	r3, #0
 8006df0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006df2:	2300      	movs	r3, #0
 8006df4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006df6:	4a39      	ldr	r2, [pc, #228]	; (8006edc <low_level_init+0x110>)
 8006df8:	f107 0308 	add.w	r3, r7, #8
 8006dfc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006dfe:	4b37      	ldr	r3, [pc, #220]	; (8006edc <low_level_init+0x110>)
 8006e00:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006e04:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006e06:	4b35      	ldr	r3, [pc, #212]	; (8006edc <low_level_init+0x110>)
 8006e08:	4a36      	ldr	r2, [pc, #216]	; (8006ee4 <low_level_init+0x118>)
 8006e0a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006e0c:	4b33      	ldr	r3, [pc, #204]	; (8006edc <low_level_init+0x110>)
 8006e0e:	4a36      	ldr	r2, [pc, #216]	; (8006ee8 <low_level_init+0x11c>)
 8006e10:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006e12:	4b32      	ldr	r3, [pc, #200]	; (8006edc <low_level_init+0x110>)
 8006e14:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006e18:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006e1a:	4830      	ldr	r0, [pc, #192]	; (8006edc <low_level_init+0x110>)
 8006e1c:	f7fb fb98 	bl	8002550 <HAL_ETH_Init>
 8006e20:	4603      	mov	r3, r0
 8006e22:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006e24:	2238      	movs	r2, #56	; 0x38
 8006e26:	2100      	movs	r1, #0
 8006e28:	4830      	ldr	r0, [pc, #192]	; (8006eec <low_level_init+0x120>)
 8006e2a:	f00b fa3a 	bl	80122a2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006e2e:	4b2f      	ldr	r3, [pc, #188]	; (8006eec <low_level_init+0x120>)
 8006e30:	2221      	movs	r2, #33	; 0x21
 8006e32:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006e34:	4b2d      	ldr	r3, [pc, #180]	; (8006eec <low_level_init+0x120>)
 8006e36:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006e3a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006e3c:	4b2b      	ldr	r3, [pc, #172]	; (8006eec <low_level_init+0x120>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006e42:	482b      	ldr	r0, [pc, #172]	; (8006ef0 <low_level_init+0x124>)
 8006e44:	f001 fac6 	bl	80083d4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2206      	movs	r2, #6
 8006e4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006e50:	4b22      	ldr	r3, [pc, #136]	; (8006edc <low_level_init+0x110>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	781a      	ldrb	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006e5c:	4b1f      	ldr	r3, [pc, #124]	; (8006edc <low_level_init+0x110>)
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	785a      	ldrb	r2, [r3, #1]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006e68:	4b1c      	ldr	r3, [pc, #112]	; (8006edc <low_level_init+0x110>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	789a      	ldrb	r2, [r3, #2]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006e74:	4b19      	ldr	r3, [pc, #100]	; (8006edc <low_level_init+0x110>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	78da      	ldrb	r2, [r3, #3]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006e80:	4b16      	ldr	r3, [pc, #88]	; (8006edc <low_level_init+0x110>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	791a      	ldrb	r2, [r3, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006e8c:	4b13      	ldr	r3, [pc, #76]	; (8006edc <low_level_init+0x110>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	795a      	ldrb	r2, [r3, #5]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006e9e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006ea6:	f043 030a 	orr.w	r3, r3, #10
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006eb2:	4910      	ldr	r1, [pc, #64]	; (8006ef4 <low_level_init+0x128>)
 8006eb4:	4810      	ldr	r0, [pc, #64]	; (8006ef8 <low_level_init+0x12c>)
 8006eb6:	f7fb f81c 	bl	8001ef2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8006eba:	480f      	ldr	r0, [pc, #60]	; (8006ef8 <low_level_init+0x12c>)
 8006ebc:	f7fb f84b 	bl	8001f56 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d103      	bne.n	8006ece <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fa2a 	bl	8007320 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8006ecc:	e001      	b.n	8006ed2 <low_level_init+0x106>
    Error_Handler();
 8006ece:	f7fa fd83 	bl	80019d8 <Error_Handler>
}
 8006ed2:	bf00      	nop
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	2000521c 	.word	0x2000521c
 8006ee0:	40028000 	.word	0x40028000
 8006ee4:	20000190 	.word	0x20000190
 8006ee8:	200000f0 	.word	0x200000f0
 8006eec:	200052cc 	.word	0x200052cc
 8006ef0:	08017138 	.word	0x08017138
 8006ef4:	20000010 	.word	0x20000010
 8006ef8:	20005304 	.word	0x20005304

08006efc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b092      	sub	sp, #72	; 0x48
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006f14:	f107 030c 	add.w	r3, r7, #12
 8006f18:	2230      	movs	r2, #48	; 0x30
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f00b f9c0 	bl	80122a2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006f22:	f107 030c 	add.w	r3, r7, #12
 8006f26:	2230      	movs	r2, #48	; 0x30
 8006f28:	2100      	movs	r1, #0
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f00b f9b9 	bl	80122a2 <memset>

  for(q = p; q != NULL; q = q->next)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	643b      	str	r3, [r7, #64]	; 0x40
 8006f34:	e045      	b.n	8006fc2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f38:	2b03      	cmp	r3, #3
 8006f3a:	d902      	bls.n	8006f42 <low_level_output+0x46>
      return ERR_IF;
 8006f3c:	f06f 030b 	mvn.w	r3, #11
 8006f40:	e055      	b.n	8006fee <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8006f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f44:	6859      	ldr	r1, [r3, #4]
 8006f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f48:	4613      	mov	r3, r2
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	3348      	adds	r3, #72	; 0x48
 8006f52:	443b      	add	r3, r7
 8006f54:	3b3c      	subs	r3, #60	; 0x3c
 8006f56:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f5a:	895b      	ldrh	r3, [r3, #10]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f60:	4613      	mov	r3, r2
 8006f62:	005b      	lsls	r3, r3, #1
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	3348      	adds	r3, #72	; 0x48
 8006f6a:	443b      	add	r3, r7
 8006f6c:	3b38      	subs	r3, #56	; 0x38
 8006f6e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d011      	beq.n	8006f9a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f78:	1e5a      	subs	r2, r3, #1
 8006f7a:	f107 000c 	add.w	r0, r7, #12
 8006f7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f80:	460b      	mov	r3, r1
 8006f82:	005b      	lsls	r3, r3, #1
 8006f84:	440b      	add	r3, r1
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	18c1      	adds	r1, r0, r3
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	3348      	adds	r3, #72	; 0x48
 8006f94:	443b      	add	r3, r7
 8006f96:	3b34      	subs	r3, #52	; 0x34
 8006f98:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d109      	bne.n	8006fb6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006fa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	4413      	add	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	3348      	adds	r3, #72	; 0x48
 8006fae:	443b      	add	r3, r7
 8006fb0:	3b34      	subs	r3, #52	; 0x34
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb8:	3301      	adds	r3, #1
 8006fba:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	643b      	str	r3, [r7, #64]	; 0x40
 8006fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1b6      	bne.n	8006f36 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	891b      	ldrh	r3, [r3, #8]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <low_level_output+0xfc>)
 8006fd0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006fd2:	4a09      	ldr	r2, [pc, #36]	; (8006ff8 <low_level_output+0xfc>)
 8006fd4:	f107 030c 	add.w	r3, r7, #12
 8006fd8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006fda:	4a07      	ldr	r2, [pc, #28]	; (8006ff8 <low_level_output+0xfc>)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8006fe0:	2214      	movs	r2, #20
 8006fe2:	4905      	ldr	r1, [pc, #20]	; (8006ff8 <low_level_output+0xfc>)
 8006fe4:	4805      	ldr	r0, [pc, #20]	; (8006ffc <low_level_output+0x100>)
 8006fe6:	f7fb fbe7 	bl	80027b8 <HAL_ETH_Transmit>

  return errval;
 8006fea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3748      	adds	r7, #72	; 0x48
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	200052cc 	.word	0x200052cc
 8006ffc:	2000521c 	.word	0x2000521c

08007000 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800700c:	4b07      	ldr	r3, [pc, #28]	; (800702c <low_level_input+0x2c>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d105      	bne.n	8007020 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007014:	f107 030c 	add.w	r3, r7, #12
 8007018:	4619      	mov	r1, r3
 800701a:	4805      	ldr	r0, [pc, #20]	; (8007030 <low_level_input+0x30>)
 800701c:	f7fb fc60 	bl	80028e0 <HAL_ETH_ReadData>
  }

  return p;
 8007020:	68fb      	ldr	r3, [r7, #12]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	20005218 	.word	0x20005218
 8007030:	2000521c 	.word	0x2000521c

08007034 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7ff ffdd 	bl	8007000 <low_level_input>
 8007046:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	6879      	ldr	r1, [r7, #4]
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	4798      	blx	r3
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f002 f934 	bl	80092cc <pbuf_free>
      }
    }
  } while(p!=NULL);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1ea      	bne.n	8007040 <ethernetif_input+0xc>
}
 800706a:	bf00      	nop
 800706c:	bf00      	nop
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d106      	bne.n	8007090 <ethernetif_init+0x1c>
 8007082:	4b0e      	ldr	r3, [pc, #56]	; (80070bc <ethernetif_init+0x48>)
 8007084:	f240 127b 	movw	r2, #379	; 0x17b
 8007088:	490d      	ldr	r1, [pc, #52]	; (80070c0 <ethernetif_init+0x4c>)
 800708a:	480e      	ldr	r0, [pc, #56]	; (80070c4 <ethernetif_init+0x50>)
 800708c:	f00b f8a2 	bl	80121d4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2273      	movs	r2, #115	; 0x73
 8007094:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2274      	movs	r2, #116	; 0x74
 800709c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a09      	ldr	r2, [pc, #36]	; (80070c8 <ethernetif_init+0x54>)
 80070a4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a08      	ldr	r2, [pc, #32]	; (80070cc <ethernetif_init+0x58>)
 80070aa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff fe8d 	bl	8006dcc <low_level_init>

  return ERR_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	08014640 	.word	0x08014640
 80070c0:	0801465c 	.word	0x0801465c
 80070c4:	0801466c 	.word	0x0801466c
 80070c8:	080101d9 	.word	0x080101d9
 80070cc:	08006efd 	.word	0x08006efd

080070d0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80070dc:	68f9      	ldr	r1, [r7, #12]
 80070de:	4807      	ldr	r0, [pc, #28]	; (80070fc <pbuf_free_custom+0x2c>)
 80070e0:	f001 fa5a 	bl	8008598 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80070e4:	4b06      	ldr	r3, [pc, #24]	; (8007100 <pbuf_free_custom+0x30>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d102      	bne.n	80070f2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80070ec:	4b04      	ldr	r3, [pc, #16]	; (8007100 <pbuf_free_custom+0x30>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	701a      	strb	r2, [r3, #0]
  }
}
 80070f2:	bf00      	nop
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	08017138 	.word	0x08017138
 8007100:	20005218 	.word	0x20005218

08007104 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007108:	f7fb f8ae 	bl	8002268 <HAL_GetTick>
 800710c:	4603      	mov	r3, r0
}
 800710e:	4618      	mov	r0, r3
 8007110:	bd80      	pop	{r7, pc}
	...

08007114 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b08e      	sub	sp, #56	; 0x38
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800711c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	605a      	str	r2, [r3, #4]
 8007126:	609a      	str	r2, [r3, #8]
 8007128:	60da      	str	r2, [r3, #12]
 800712a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a4e      	ldr	r2, [pc, #312]	; (800726c <HAL_ETH_MspInit+0x158>)
 8007132:	4293      	cmp	r3, r2
 8007134:	f040 8096 	bne.w	8007264 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007138:	4b4d      	ldr	r3, [pc, #308]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 800713a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713c:	4a4c      	ldr	r2, [pc, #304]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 800713e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007142:	6313      	str	r3, [r2, #48]	; 0x30
 8007144:	4b4a      	ldr	r3, [pc, #296]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 8007146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800714c:	623b      	str	r3, [r7, #32]
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	4b47      	ldr	r3, [pc, #284]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 8007152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007154:	4a46      	ldr	r2, [pc, #280]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 8007156:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800715a:	6313      	str	r3, [r2, #48]	; 0x30
 800715c:	4b44      	ldr	r3, [pc, #272]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 800715e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007160:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007164:	61fb      	str	r3, [r7, #28]
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	4b41      	ldr	r3, [pc, #260]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 800716a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716c:	4a40      	ldr	r2, [pc, #256]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 800716e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007172:	6313      	str	r3, [r2, #48]	; 0x30
 8007174:	4b3e      	ldr	r3, [pc, #248]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800717c:	61bb      	str	r3, [r7, #24]
 800717e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007180:	4b3b      	ldr	r3, [pc, #236]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 8007182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007184:	4a3a      	ldr	r2, [pc, #232]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 8007186:	f043 0304 	orr.w	r3, r3, #4
 800718a:	6313      	str	r3, [r2, #48]	; 0x30
 800718c:	4b38      	ldr	r3, [pc, #224]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	617b      	str	r3, [r7, #20]
 8007196:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007198:	4b35      	ldr	r3, [pc, #212]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 800719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719c:	4a34      	ldr	r2, [pc, #208]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 800719e:	f043 0301 	orr.w	r3, r3, #1
 80071a2:	6313      	str	r3, [r2, #48]	; 0x30
 80071a4:	4b32      	ldr	r3, [pc, #200]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 80071a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	613b      	str	r3, [r7, #16]
 80071ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071b0:	4b2f      	ldr	r3, [pc, #188]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	4a2e      	ldr	r2, [pc, #184]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 80071b6:	f043 0302 	orr.w	r3, r3, #2
 80071ba:	6313      	str	r3, [r2, #48]	; 0x30
 80071bc:	4b2c      	ldr	r3, [pc, #176]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 80071be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80071c8:	4b29      	ldr	r3, [pc, #164]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 80071ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071cc:	4a28      	ldr	r2, [pc, #160]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 80071ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071d2:	6313      	str	r3, [r2, #48]	; 0x30
 80071d4:	4b26      	ldr	r3, [pc, #152]	; (8007270 <HAL_ETH_MspInit+0x15c>)
 80071d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071dc:	60bb      	str	r3, [r7, #8]
 80071de:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80071e0:	2332      	movs	r3, #50	; 0x32
 80071e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071e4:	2302      	movs	r3, #2
 80071e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e8:	2300      	movs	r3, #0
 80071ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071ec:	2303      	movs	r3, #3
 80071ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80071f0:	230b      	movs	r3, #11
 80071f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071f8:	4619      	mov	r1, r3
 80071fa:	481e      	ldr	r0, [pc, #120]	; (8007274 <HAL_ETH_MspInit+0x160>)
 80071fc:	f7fc fa9a 	bl	8003734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007200:	2386      	movs	r3, #134	; 0x86
 8007202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007204:	2302      	movs	r3, #2
 8007206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007208:	2300      	movs	r3, #0
 800720a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800720c:	2303      	movs	r3, #3
 800720e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007210:	230b      	movs	r3, #11
 8007212:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007218:	4619      	mov	r1, r3
 800721a:	4817      	ldr	r0, [pc, #92]	; (8007278 <HAL_ETH_MspInit+0x164>)
 800721c:	f7fc fa8a 	bl	8003734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007226:	2302      	movs	r3, #2
 8007228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800722a:	2300      	movs	r3, #0
 800722c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800722e:	2303      	movs	r3, #3
 8007230:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007232:	230b      	movs	r3, #11
 8007234:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800723a:	4619      	mov	r1, r3
 800723c:	480f      	ldr	r0, [pc, #60]	; (800727c <HAL_ETH_MspInit+0x168>)
 800723e:	f7fc fa79 	bl	8003734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007242:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007248:	2302      	movs	r3, #2
 800724a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800724c:	2300      	movs	r3, #0
 800724e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007250:	2303      	movs	r3, #3
 8007252:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007254:	230b      	movs	r3, #11
 8007256:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800725c:	4619      	mov	r1, r3
 800725e:	4808      	ldr	r0, [pc, #32]	; (8007280 <HAL_ETH_MspInit+0x16c>)
 8007260:	f7fc fa68 	bl	8003734 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007264:	bf00      	nop
 8007266:	3738      	adds	r7, #56	; 0x38
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	40028000 	.word	0x40028000
 8007270:	40023800 	.word	0x40023800
 8007274:	40020800 	.word	0x40020800
 8007278:	40020000 	.word	0x40020000
 800727c:	40020400 	.word	0x40020400
 8007280:	40021800 	.word	0x40021800

08007284 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007288:	4802      	ldr	r0, [pc, #8]	; (8007294 <ETH_PHY_IO_Init+0x10>)
 800728a:	f7fb fdf9 	bl	8002e80 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	bd80      	pop	{r7, pc}
 8007294:	2000521c 	.word	0x2000521c

08007298 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  return 0;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	68f9      	ldr	r1, [r7, #12]
 80072ba:	4807      	ldr	r0, [pc, #28]	; (80072d8 <ETH_PHY_IO_ReadReg+0x30>)
 80072bc:	f7fb fc48 	bl	8002b50 <HAL_ETH_ReadPHYRegister>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d002      	beq.n	80072cc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80072c6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ca:	e000      	b.n	80072ce <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	2000521c 	.word	0x2000521c

080072dc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	68f9      	ldr	r1, [r7, #12]
 80072ee:	4807      	ldr	r0, [pc, #28]	; (800730c <ETH_PHY_IO_WriteReg+0x30>)
 80072f0:	f7fb fc79 	bl	8002be6 <HAL_ETH_WritePHYRegister>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80072fa:	f04f 33ff 	mov.w	r3, #4294967295
 80072fe:	e000      	b.n	8007302 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	2000521c 	.word	0x2000521c

08007310 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007314:	f7fa ffa8 	bl	8002268 <HAL_GetTick>
 8007318:	4603      	mov	r3, r0
}
 800731a:	4618      	mov	r0, r3
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b0a0      	sub	sp, #128	; 0x80
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007328:	f107 030c 	add.w	r3, r7, #12
 800732c:	2264      	movs	r2, #100	; 0x64
 800732e:	2100      	movs	r1, #0
 8007330:	4618      	mov	r0, r3
 8007332:	f00a ffb6 	bl	80122a2 <memset>
  int32_t PHYLinkState = 0;
 8007336:	2300      	movs	r3, #0
 8007338:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800733e:	2300      	movs	r3, #0
 8007340:	67bb      	str	r3, [r7, #120]	; 0x78
 8007342:	2300      	movs	r3, #0
 8007344:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007346:	483a      	ldr	r0, [pc, #232]	; (8007430 <ethernet_link_check_state+0x110>)
 8007348:	f7fa fead 	bl	80020a6 <LAN8742_GetLinkState>
 800734c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007354:	089b      	lsrs	r3, r3, #2
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00c      	beq.n	800737a <ethernet_link_check_state+0x5a>
 8007360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007362:	2b01      	cmp	r3, #1
 8007364:	dc09      	bgt.n	800737a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8007366:	4833      	ldr	r0, [pc, #204]	; (8007434 <ethernet_link_check_state+0x114>)
 8007368:	f7fb f9cd 	bl	8002706 <HAL_ETH_Stop>
    netif_set_down(netif);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 fb97 	bl	8008aa0 <netif_set_down>
    netif_set_link_down(netif);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f001 fbfa 	bl	8008b6c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8007378:	e055      	b.n	8007426 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b00      	cmp	r3, #0
 8007386:	d14e      	bne.n	8007426 <ethernet_link_check_state+0x106>
 8007388:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800738a:	2b01      	cmp	r3, #1
 800738c:	dd4b      	ble.n	8007426 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800738e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007390:	3b02      	subs	r3, #2
 8007392:	2b03      	cmp	r3, #3
 8007394:	d82a      	bhi.n	80073ec <ethernet_link_check_state+0xcc>
 8007396:	a201      	add	r2, pc, #4	; (adr r2, 800739c <ethernet_link_check_state+0x7c>)
 8007398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739c:	080073ad 	.word	0x080073ad
 80073a0:	080073bf 	.word	0x080073bf
 80073a4:	080073cf 	.word	0x080073cf
 80073a8:	080073df 	.word	0x080073df
      duplex = ETH_FULLDUPLEX_MODE;
 80073ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80073b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073b6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80073b8:	2301      	movs	r3, #1
 80073ba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80073bc:	e017      	b.n	80073ee <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80073be:	2300      	movs	r3, #0
 80073c0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80073c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80073c8:	2301      	movs	r3, #1
 80073ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80073cc:	e00f      	b.n	80073ee <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80073ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073d2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80073d4:	2300      	movs	r3, #0
 80073d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80073d8:	2301      	movs	r3, #1
 80073da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80073dc:	e007      	b.n	80073ee <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80073de:	2300      	movs	r3, #0
 80073e0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80073e2:	2300      	movs	r3, #0
 80073e4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80073e6:	2301      	movs	r3, #1
 80073e8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80073ea:	e000      	b.n	80073ee <ethernet_link_check_state+0xce>
      break;
 80073ec:	bf00      	nop
    if(linkchanged)
 80073ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d018      	beq.n	8007426 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80073f4:	f107 030c 	add.w	r3, r7, #12
 80073f8:	4619      	mov	r1, r3
 80073fa:	480e      	ldr	r0, [pc, #56]	; (8007434 <ethernet_link_check_state+0x114>)
 80073fc:	f7fb fc3c 	bl	8002c78 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007402:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8007404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007406:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007408:	f107 030c 	add.w	r3, r7, #12
 800740c:	4619      	mov	r1, r3
 800740e:	4809      	ldr	r0, [pc, #36]	; (8007434 <ethernet_link_check_state+0x114>)
 8007410:	f7fb fd1c 	bl	8002e4c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007414:	4807      	ldr	r0, [pc, #28]	; (8007434 <ethernet_link_check_state+0x114>)
 8007416:	f7fb f917 	bl	8002648 <HAL_ETH_Start>
      netif_set_up(netif);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f001 fad4 	bl	80089c8 <netif_set_up>
      netif_set_link_up(netif);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f001 fb6f 	bl	8008b04 <netif_set_link_up>
}
 8007426:	bf00      	nop
 8007428:	3780      	adds	r7, #128	; 0x80
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20005304 	.word	0x20005304
 8007434:	2000521c 	.word	0x2000521c

08007438 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af02      	add	r7, sp, #8
 800743e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007440:	4812      	ldr	r0, [pc, #72]	; (800748c <HAL_ETH_RxAllocateCallback+0x54>)
 8007442:	f001 f83b 	bl	80084bc <memp_malloc_pool>
 8007446:	60f8      	str	r0, [r7, #12]
  if (p)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d014      	beq.n	8007478 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f103 0220 	add.w	r2, r3, #32
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4a0d      	ldr	r2, [pc, #52]	; (8007490 <HAL_ETH_RxAllocateCallback+0x58>)
 800745c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007466:	9201      	str	r2, [sp, #4]
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2241      	movs	r2, #65	; 0x41
 800746e:	2100      	movs	r1, #0
 8007470:	2000      	movs	r0, #0
 8007472:	f001 fd71 	bl	8008f58 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007476:	e005      	b.n	8007484 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007478:	4b06      	ldr	r3, [pc, #24]	; (8007494 <HAL_ETH_RxAllocateCallback+0x5c>)
 800747a:	2201      	movs	r2, #1
 800747c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]
}
 8007484:	bf00      	nop
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	08017138 	.word	0x08017138
 8007490:	080070d1 	.word	0x080070d1
 8007494:	20005218 	.word	0x20005218

08007498 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3b20      	subs	r3, #32
 80074b6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	2200      	movs	r2, #0
 80074c2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	887a      	ldrh	r2, [r7, #2]
 80074c8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d103      	bne.n	80074da <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	69fa      	ldr	r2, [r7, #28]
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	e003      	b.n	80074e2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	69fa      	ldr	r2, [r7, #28]
 80074e6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	61fb      	str	r3, [r7, #28]
 80074ee:	e009      	b.n	8007504 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	891a      	ldrh	r2, [r3, #8]
 80074f4:	887b      	ldrh	r3, [r7, #2]
 80074f6:	4413      	add	r3, r2
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	61fb      	str	r3, [r7, #28]
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1f2      	bne.n	80074f0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800750a:	887b      	ldrh	r3, [r7, #2]
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff fc30 	bl	8006d74 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007514:	bf00      	nop
 8007516:	3720      	adds	r7, #32
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <sntp_process>:
ntp_timestamp_t rtc_to_ntp_time;
ntp_timestamp_t recv_ntp_time;

static void
sntp_process(const struct sntp_timestamps *timestamps)
{
 800751c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007520:	b0ae      	sub	sp, #184	; 0xb8
 8007522:	af00      	add	r7, sp, #0
 8007524:	6778      	str	r0, [r7, #116]	; 0x74
  s32_t sec;
  u32_t frac;

  sec  = (s32_t)lwip_ntohl(timestamps->xmit.sec);
 8007526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fb85 	bl	8007c3a <lwip_htonl>
 8007530:	4603      	mov	r3, r0
 8007532:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  frac = lwip_ntohl(timestamps->xmit.frac);
 8007536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fb7d 	bl	8007c3a <lwip_htonl>
 8007540:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
    s32_t dest_sec;
    u32_t dest_frac;
    u32_t step_sec;

    /* Get the destination time stamp, i.e. the current system time */
    SNTP_GET_SYSTEM_TIME_NTP(dest_sec, dest_frac);
 8007544:	2300      	movs	r3, #0
 8007546:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800754a:	2300      	movs	r3, #0
 800754c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007550:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007554:	4b87      	ldr	r3, [pc, #540]	; (8007774 <sntp_process+0x258>)
 8007556:	4413      	add	r3, r2
 8007558:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800755c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007560:	f241 03c7 	movw	r3, #4295	; 0x10c7
 8007564:	fb03 f102 	mul.w	r1, r3, r2
 8007568:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800756c:	f640 035f 	movw	r3, #2143	; 0x85f
 8007570:	fb02 f303 	mul.w	r3, r2, r3
 8007574:	0c1b      	lsrs	r3, r3, #16
 8007576:	1acb      	subs	r3, r1, r3
 8007578:	f603 0363 	addw	r3, r3, #2147	; 0x863
 800757c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    convert_rtc_to_ntp(&rtc_to_ntp_time);
 8007580:	487d      	ldr	r0, [pc, #500]	; (8007778 <sntp_process+0x25c>)
 8007582:	f7f9 fc69 	bl	8000e58 <convert_rtc_to_ntp>
    dest_sec = rtc_to_ntp_time.seconds;
 8007586:	4b7c      	ldr	r3, [pc, #496]	; (8007778 <sntp_process+0x25c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    dest_frac = rtc_to_ntp_time.fraction;
 800758e:	4b7a      	ldr	r3, [pc, #488]	; (8007778 <sntp_process+0x25c>)
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    step_sec = (dest_sec < sec) ? ((u32_t)sec - (u32_t)dest_sec)
               : ((u32_t)dest_sec - (u32_t)sec);
 8007596:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800759a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800759e:	429a      	cmp	r2, r3
 80075a0:	da05      	bge.n	80075ae <sntp_process+0x92>
    step_sec = (dest_sec < sec) ? ((u32_t)sec - (u32_t)dest_sec)
 80075a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
               : ((u32_t)dest_sec - (u32_t)sec);
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	e004      	b.n	80075b8 <sntp_process+0x9c>
 80075ae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80075b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075b6:	1ad3      	subs	r3, r2, r3
    step_sec = (dest_sec < sec) ? ((u32_t)sec - (u32_t)dest_sec)
 80075b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    /* In order to avoid overflows, skip the compensation if the clock step
     * is larger than about 34 years. */
    if ((step_sec >> 30) == 0) {
 80075bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075c0:	0f9b      	lsrs	r3, r3, #30
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f040 80d0 	bne.w	8007768 <sntp_process+0x24c>
      s64_t t1, t2, t3, t4;

      t4 = SNTP_SEC_FRAC_TO_S64(dest_sec, dest_frac);
 80075c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80075cc:	17da      	asrs	r2, r3, #31
 80075ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80075d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075d2:	f04f 0200 	mov.w	r2, #0
 80075d6:	f04f 0300 	mov.w	r3, #0
 80075da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075dc:	000b      	movs	r3, r1
 80075de:	2200      	movs	r2, #0
 80075e0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80075e4:	2000      	movs	r0, #0
 80075e6:	460c      	mov	r4, r1
 80075e8:	4605      	mov	r5, r0
 80075ea:	ea42 0104 	orr.w	r1, r2, r4
 80075ee:	6639      	str	r1, [r7, #96]	; 0x60
 80075f0:	432b      	orrs	r3, r5
 80075f2:	667b      	str	r3, [r7, #100]	; 0x64
 80075f4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80075f8:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
      t3 = SNTP_SEC_FRAC_TO_S64(sec, frac);
 80075fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007600:	17da      	asrs	r2, r3, #31
 8007602:	65bb      	str	r3, [r7, #88]	; 0x58
 8007604:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007606:	f04f 0200 	mov.w	r2, #0
 800760a:	f04f 0300 	mov.w	r3, #0
 800760e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007610:	000b      	movs	r3, r1
 8007612:	2200      	movs	r2, #0
 8007614:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8007618:	2000      	movs	r0, #0
 800761a:	6539      	str	r1, [r7, #80]	; 0x50
 800761c:	6578      	str	r0, [r7, #84]	; 0x54
 800761e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8007622:	4621      	mov	r1, r4
 8007624:	4311      	orrs	r1, r2
 8007626:	64b9      	str	r1, [r7, #72]	; 0x48
 8007628:	4629      	mov	r1, r5
 800762a:	4319      	orrs	r1, r3
 800762c:	64f9      	str	r1, [r7, #76]	; 0x4c
 800762e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007632:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
      t1 = SNTP_TIMESTAMP_TO_S64(timestamps->orig);
 8007636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fafd 	bl	8007c3a <lwip_htonl>
 8007640:	4603      	mov	r3, r0
 8007642:	2200      	movs	r2, #0
 8007644:	643b      	str	r3, [r7, #64]	; 0x40
 8007646:	647a      	str	r2, [r7, #68]	; 0x44
 8007648:	f04f 0400 	mov.w	r4, #0
 800764c:	f04f 0500 	mov.w	r5, #0
 8007650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007652:	001d      	movs	r5, r3
 8007654:	2400      	movs	r4, #0
 8007656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	4618      	mov	r0, r3
 800765c:	f000 faed 	bl	8007c3a <lwip_htonl>
 8007660:	4603      	mov	r3, r0
 8007662:	2200      	movs	r2, #0
 8007664:	63bb      	str	r3, [r7, #56]	; 0x38
 8007666:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007668:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800766c:	460b      	mov	r3, r1
 800766e:	4323      	orrs	r3, r4
 8007670:	633b      	str	r3, [r7, #48]	; 0x30
 8007672:	4613      	mov	r3, r2
 8007674:	432b      	orrs	r3, r5
 8007676:	637b      	str	r3, [r7, #52]	; 0x34
 8007678:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800767c:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
      t2 = SNTP_TIMESTAMP_TO_S64(timestamps->recv);
 8007680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	4618      	mov	r0, r3
 8007686:	f000 fad8 	bl	8007c3a <lwip_htonl>
 800768a:	4603      	mov	r3, r0
 800768c:	2200      	movs	r2, #0
 800768e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007690:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007692:	f04f 0400 	mov.w	r4, #0
 8007696:	f04f 0500 	mov.w	r5, #0
 800769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769c:	001d      	movs	r5, r3
 800769e:	2400      	movs	r4, #0
 80076a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 fac8 	bl	8007c3a <lwip_htonl>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2200      	movs	r2, #0
 80076ae:	623b      	str	r3, [r7, #32]
 80076b0:	627a      	str	r2, [r7, #36]	; 0x24
 80076b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80076b6:	460b      	mov	r3, r1
 80076b8:	4323      	orrs	r3, r4
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	4613      	mov	r3, r2
 80076be:	432b      	orrs	r3, r5
 80076c0:	61fb      	str	r3, [r7, #28]
 80076c2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80076c6:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      /* Clock offset calculation according to RFC 4330 */
      t4 += ((t2 - t1) + (t3 - t4)) / 2;
 80076ca:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80076ce:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80076d2:	ebb0 0a02 	subs.w	sl, r0, r2
 80076d6:	eb61 0b03 	sbc.w	fp, r1, r3
 80076da:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80076de:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80076e2:	ebb0 0802 	subs.w	r8, r0, r2
 80076e6:	eb61 0903 	sbc.w	r9, r1, r3
 80076ea:	eb1a 0308 	adds.w	r3, sl, r8
 80076ee:	613b      	str	r3, [r7, #16]
 80076f0:	eb4b 0309 	adc.w	r3, fp, r9
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	da06      	bge.n	800770c <sntp_process+0x1f0>
 80076fe:	1c51      	adds	r1, r2, #1
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	f143 0300 	adc.w	r3, r3, #0
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800770c:	f04f 0000 	mov.w	r0, #0
 8007710:	f04f 0100 	mov.w	r1, #0
 8007714:	0850      	lsrs	r0, r2, #1
 8007716:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800771a:	1059      	asrs	r1, r3, #1
 800771c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007720:	1814      	adds	r4, r2, r0
 8007722:	603c      	str	r4, [r7, #0]
 8007724:	414b      	adcs	r3, r1
 8007726:	607b      	str	r3, [r7, #4]
 8007728:	e9d7 3400 	ldrd	r3, r4, [r7]
 800772c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

      sec  = (s32_t)((u64_t)t4 >> 32);
 8007730:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	f04f 0300 	mov.w	r3, #0
 800773c:	000a      	movs	r2, r1
 800773e:	2300      	movs	r3, #0
 8007740:	4613      	mov	r3, r2
 8007742:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      frac = (u32_t)((u64_t)t4);
 8007746:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800774a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      recv_ntp_time.seconds = sec;
 800774e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007752:	4a0a      	ldr	r2, [pc, #40]	; (800777c <sntp_process+0x260>)
 8007754:	6013      	str	r3, [r2, #0]
      recv_ntp_time.fraction = frac;
 8007756:	4a09      	ldr	r2, [pc, #36]	; (800777c <sntp_process+0x260>)
 8007758:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800775c:	6053      	str	r3, [r2, #4]
      convert_ntp_to_rtc(recv_ntp_time);
 800775e:	4b07      	ldr	r3, [pc, #28]	; (800777c <sntp_process+0x260>)
 8007760:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007764:	f7f9 fbe4 	bl	8000f30 <convert_ntp_to_rtc>

  SNTP_SET_SYSTEM_TIME_NTP(sec, frac);
  LWIP_UNUSED_ARG(frac); /* might be unused if only seconds are set */
  LWIP_DEBUGF(SNTP_DEBUG_TRACE, ("sntp_process: %s, %" U32_F " us\n",
                                 sntp_format_time(sec), SNTP_FRAC_TO_US(frac)));
}
 8007768:	bf00      	nop
 800776a:	37b8      	adds	r7, #184	; 0xb8
 800776c:	46bd      	mov	sp, r7
 800776e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007772:	bf00      	nop
 8007774:	83aa7e80 	.word	0x83aa7e80
 8007778:	20005338 	.word	0x20005338
 800777c:	20005340 	.word	0x20005340

08007780 <sntp_initialize_request>:
 * Initialize request struct to be sent to server.
 */

static void
sntp_initialize_request(struct sntp_msg *req)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8007788:	2180      	movs	r1, #128	; 0x80
 800778a:	4822      	ldr	r0, [pc, #136]	; (8007814 <sntp_initialize_request+0x94>)
 800778c:	f7fc f997 	bl	8003abe <HAL_GPIO_TogglePin>
	HAL_Delay(2);
 8007790:	2002      	movs	r0, #2
 8007792:	f7fa fd75 	bl	8002280 <HAL_Delay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8007796:	2180      	movs	r1, #128	; 0x80
 8007798:	481e      	ldr	r0, [pc, #120]	; (8007814 <sntp_initialize_request+0x94>)
 800779a:	f7fc f990 	bl	8003abe <HAL_GPIO_TogglePin>
	memset(req, 0, SNTP_MSG_LEN);
 800779e:	2230      	movs	r2, #48	; 0x30
 80077a0:	2100      	movs	r1, #0
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f00a fd7d 	bl	80122a2 <memset>
	req->li_vn_mode = SNTP_LI_NO_WARNING | SNTP_VERSION | SNTP_MODE_CLIENT;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2223      	movs	r2, #35	; 0x23
 80077ac:	701a      	strb	r2, [r3, #0]
#if SNTP_CHECK_RESPONSE >= 2 || SNTP_COMP_ROUNDTRIP
  {
    s32_t secs;
    u32_t sec, frac;
    /* Get the transmit timestamp */
    SNTP_GET_SYSTEM_TIME_NTP(secs, frac);
 80077ae:	2300      	movs	r3, #0
 80077b0:	61fb      	str	r3, [r7, #28]
 80077b2:	2300      	movs	r3, #0
 80077b4:	61bb      	str	r3, [r7, #24]
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	4b17      	ldr	r3, [pc, #92]	; (8007818 <sntp_initialize_request+0x98>)
 80077ba:	4413      	add	r3, r2
 80077bc:	617b      	str	r3, [r7, #20]
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	f241 02c7 	movw	r2, #4295	; 0x10c7
 80077c4:	fb03 f202 	mul.w	r2, r3, r2
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	f640 015f 	movw	r1, #2143	; 0x85f
 80077ce:	fb01 f303 	mul.w	r3, r1, r3
 80077d2:	0c1b      	lsrs	r3, r3, #16
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	f603 0363 	addw	r3, r3, #2147	; 0x863
 80077da:	613b      	str	r3, [r7, #16]
    convert_rtc_to_ntp(&rtc_to_ntp_time);
 80077dc:	480f      	ldr	r0, [pc, #60]	; (800781c <sntp_initialize_request+0x9c>)
 80077de:	f7f9 fb3b 	bl	8000e58 <convert_rtc_to_ntp>
    secs = rtc_to_ntp_time.seconds;
 80077e2:	4b0e      	ldr	r3, [pc, #56]	; (800781c <sntp_initialize_request+0x9c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	617b      	str	r3, [r7, #20]
    frac = rtc_to_ntp_time.fraction;
 80077e8:	4b0c      	ldr	r3, [pc, #48]	; (800781c <sntp_initialize_request+0x9c>)
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	613b      	str	r3, [r7, #16]
    sec  = lwip_htonl((u32_t)secs);
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fa22 	bl	8007c3a <lwip_htonl>
 80077f6:	60f8      	str	r0, [r7, #12]
    frac = lwip_htonl(frac);
 80077f8:	6938      	ldr	r0, [r7, #16]
 80077fa:	f000 fa1e 	bl	8007c3a <lwip_htonl>
 80077fe:	6138      	str	r0, [r7, #16]

# if SNTP_CHECK_RESPONSE >= 2
    sntp_last_timestamp_sent.sec  = sec;
    sntp_last_timestamp_sent.frac = frac;
# endif
    req->transmit_timestamp[0] = sec;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	629a      	str	r2, [r3, #40]	; 0x28
    req->transmit_timestamp[1] = frac;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* SNTP_CHECK_RESPONSE >= 2 || SNTP_COMP_ROUNDTRIP */
}
 800780c:	bf00      	nop
 800780e:	3720      	adds	r7, #32
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	40020400 	.word	0x40020400
 8007818:	83aa7e80 	.word	0x83aa7e80
 800781c:	20005338 	.word	0x20005338

08007820 <sntp_retry>:
 *
 * @param arg is unused (only necessary to conform to sys_timeout)
 */
static void
sntp_retry(void *arg)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]

  LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_retry: Next request will be sent in %"U32_F" ms\n",
                                 sntp_retry_timeout));

  /* set up a timer to send a retry and increase the retry delay */
  sys_timeout(sntp_retry_timeout, sntp_request, NULL);
 8007828:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <sntp_retry+0x40>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2200      	movs	r2, #0
 800782e:	490d      	ldr	r1, [pc, #52]	; (8007864 <sntp_retry+0x44>)
 8007830:	4618      	mov	r0, r3
 8007832:	f007 fa8b 	bl	800ed4c <sys_timeout>

#if SNTP_RETRY_TIMEOUT_EXP
  {
    u32_t new_retry_timeout;
    /* increase the timeout for next retry */
    new_retry_timeout = sntp_retry_timeout << 1;
 8007836:	4b0a      	ldr	r3, [pc, #40]	; (8007860 <sntp_retry+0x40>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	60fb      	str	r3, [r7, #12]
    /* limit to maximum timeout and prevent overflow */
    if ((new_retry_timeout <= SNTP_RETRY_TIMEOUT_MAX) &&
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4a09      	ldr	r2, [pc, #36]	; (8007868 <sntp_retry+0x48>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d807      	bhi.n	8007856 <sntp_retry+0x36>
        (new_retry_timeout > sntp_retry_timeout)) {
 8007846:	4b06      	ldr	r3, [pc, #24]	; (8007860 <sntp_retry+0x40>)
 8007848:	681b      	ldr	r3, [r3, #0]
    if ((new_retry_timeout <= SNTP_RETRY_TIMEOUT_MAX) &&
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	429a      	cmp	r2, r3
 800784e:	d902      	bls.n	8007856 <sntp_retry+0x36>
      sntp_retry_timeout = new_retry_timeout;
 8007850:	4a03      	ldr	r2, [pc, #12]	; (8007860 <sntp_retry+0x40>)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* SNTP_RETRY_TIMEOUT_EXP */
}
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	20005334 	.word	0x20005334
 8007864:	08007a35 	.word	0x08007a35
 8007868:	000249f0 	.word	0x000249f0

0800786c <sntp_recv>:
#endif /* SNTP_SUPPORT_MULTIPLE_SERVERS */

/** UDP recv callback for the sntp pcb */
static void
sntp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08c      	sub	sp, #48	; 0x30
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
 8007878:	603b      	str	r3, [r7, #0]

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800787a:	2180      	movs	r1, #128	; 0x80
 800787c:	4840      	ldr	r0, [pc, #256]	; (8007980 <sntp_recv+0x114>)
 800787e:	f7fc f91e 	bl	8003abe <HAL_GPIO_TogglePin>
	HAL_Delay(4);
 8007882:	2004      	movs	r0, #4
 8007884:	f7fa fcfc 	bl	8002280 <HAL_Delay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8007888:	2180      	movs	r1, #128	; 0x80
 800788a:	483d      	ldr	r0, [pc, #244]	; (8007980 <sntp_recv+0x114>)
 800788c:	f7fc f917 	bl	8003abe <HAL_GPIO_TogglePin>
  err_t err;

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);

  err = ERR_ARG;
 8007890:	23f0      	movs	r3, #240	; 0xf0
 8007892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);
#endif /* SNTP_CHECK_RESPONSE >= 1 */
  {
    /* process the response */
    if (p->tot_len == SNTP_MSG_LEN) {
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	891b      	ldrh	r3, [r3, #8]
 800789a:	2b30      	cmp	r3, #48	; 0x30
 800789c:	d135      	bne.n	800790a <sntp_recv+0x9e>
      mode = pbuf_get_at(p, SNTP_OFFSET_LI_VN_MODE) & SNTP_MODE_MASK;
 800789e:	2100      	movs	r1, #0
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f001 ffdb 	bl	800985c <pbuf_get_at>
 80078a6:	4603      	mov	r3, r0
 80078a8:	f003 0307 	and.w	r3, r3, #7
 80078ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      /* if this is a SNTP response... */
      if (((sntp_opmode == SNTP_OPMODE_POLL)       && (mode == SNTP_MODE_SERVER)) ||
 80078b0:	4b34      	ldr	r3, [pc, #208]	; (8007984 <sntp_recv+0x118>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d103      	bne.n	80078c0 <sntp_recv+0x54>
 80078b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d007      	beq.n	80078d0 <sntp_recv+0x64>
          ((sntp_opmode == SNTP_OPMODE_LISTENONLY) && (mode == SNTP_MODE_BROADCAST))) {
 80078c0:	4b30      	ldr	r3, [pc, #192]	; (8007984 <sntp_recv+0x118>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
      if (((sntp_opmode == SNTP_OPMODE_POLL)       && (mode == SNTP_MODE_SERVER)) ||
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d11d      	bne.n	8007904 <sntp_recv+0x98>
          ((sntp_opmode == SNTP_OPMODE_LISTENONLY) && (mode == SNTP_MODE_BROADCAST))) {
 80078c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80078cc:	2b05      	cmp	r3, #5
 80078ce:	d119      	bne.n	8007904 <sntp_recv+0x98>
        stratum = pbuf_get_at(p, SNTP_OFFSET_STRATUM);
 80078d0:	2101      	movs	r1, #1
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 ffc2 	bl	800985c <pbuf_get_at>
 80078d8:	4603      	mov	r3, r0
 80078da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

        if (stratum == SNTP_STRATUM_KOD) {
 80078de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d103      	bne.n	80078ee <sntp_recv+0x82>
          /* Kiss-of-death packet. Use another server or increase UPDATE_DELAY. */
          err = SNTP_ERR_KOD;
 80078e6:	2301      	movs	r3, #1
 80078e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (stratum == SNTP_STRATUM_KOD) {
 80078ec:	e00d      	b.n	800790a <sntp_recv+0x9e>
          LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_recv: Received Kiss-of-Death\n"));
        } else {
          pbuf_copy_partial(p, &timestamps, sizeof(timestamps), SNTP_OFFSET_TIMESTAMPS);
 80078ee:	f107 0110 	add.w	r1, r7, #16
 80078f2:	2318      	movs	r3, #24
 80078f4:	2218      	movs	r2, #24
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f001 fee2 	bl	80096c0 <pbuf_copy_partial>
          } else
#endif /* SNTP_CHECK_RESPONSE >= 2 */
            /* @todo: add code for SNTP_CHECK_RESPONSE >= 3 and >= 4 here */
          {
            /* correct answer */
            err = ERR_OK;
 80078fc:	2300      	movs	r3, #0
 80078fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (stratum == SNTP_STRATUM_KOD) {
 8007902:	e002      	b.n	800790a <sntp_recv+0x9e>
          }
        }
      } else {
        LWIP_DEBUGF(SNTP_DEBUG_WARN, ("sntp_recv: Invalid mode in response: %"U16_F"\n", (u16_t)mode));
        /* wait for correct response */
        err = ERR_TIMEOUT;
 8007904:	23fd      	movs	r3, #253	; 0xfd
 8007906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* packet from wrong remote address or port, wait for correct response */
    err = ERR_TIMEOUT;
  }
#endif /* SNTP_CHECK_RESPONSE >= 1 */

  pbuf_free(p);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f001 fcde 	bl	80092cc <pbuf_free>

  if (err == ERR_OK) {
 8007910:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007914:	2b00      	cmp	r3, #0
 8007916:	d124      	bne.n	8007962 <sntp_recv+0xf6>
    /* correct packet received: process it it */
    sntp_process(&timestamps);
 8007918:	f107 0310 	add.w	r3, r7, #16
 800791c:	4618      	mov	r0, r3
 800791e:	f7ff fdfd 	bl	800751c <sntp_process>

#if SNTP_MONITOR_SERVER_REACHABILITY
    /* indicate that server responded */
    sntp_servers[sntp_current_server].reachability |= 1;
 8007922:	4b19      	ldr	r3, [pc, #100]	; (8007988 <sntp_recv+0x11c>)
 8007924:	791b      	ldrb	r3, [r3, #4]
 8007926:	f043 0301 	orr.w	r3, r3, #1
 800792a:	b2da      	uxtb	r2, r3
 800792c:	4b16      	ldr	r3, [pc, #88]	; (8007988 <sntp_recv+0x11c>)
 800792e:	711a      	strb	r2, [r3, #4]
#endif /* SNTP_MONITOR_SERVER_REACHABILITY */
    /* Set up timeout for next request (only if poll response was received)*/
    if (sntp_opmode == SNTP_OPMODE_POLL) {
 8007930:	4b14      	ldr	r3, [pc, #80]	; (8007984 <sntp_recv+0x118>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d11f      	bne.n	8007978 <sntp_recv+0x10c>
      u32_t sntp_update_delay;
      sys_untimeout(sntp_try_next_server, NULL);
 8007938:	2100      	movs	r1, #0
 800793a:	4814      	ldr	r0, [pc, #80]	; (800798c <sntp_recv+0x120>)
 800793c:	f007 fa2c 	bl	800ed98 <sys_untimeout>
      sys_untimeout(sntp_request, NULL);
 8007940:	2100      	movs	r1, #0
 8007942:	4813      	ldr	r0, [pc, #76]	; (8007990 <sntp_recv+0x124>)
 8007944:	f007 fa28 	bl	800ed98 <sys_untimeout>

      /* Correct response, reset retry timeout */
      SNTP_RESET_RETRY_TIMEOUT();
 8007948:	4b12      	ldr	r3, [pc, #72]	; (8007994 <sntp_recv+0x128>)
 800794a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800794e:	601a      	str	r2, [r3, #0]

      sntp_update_delay = (u32_t)SNTP_UPDATE_DELAY;
 8007950:	f643 2398 	movw	r3, #15000	; 0x3a98
 8007954:	62bb      	str	r3, [r7, #40]	; 0x28
      sys_timeout(sntp_update_delay, sntp_request, NULL);
 8007956:	2200      	movs	r2, #0
 8007958:	490d      	ldr	r1, [pc, #52]	; (8007990 <sntp_recv+0x124>)
 800795a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800795c:	f007 f9f6 	bl	800ed4c <sys_timeout>
      sntp_try_next_server(NULL);
    }
  } else {
    /* ignore any broken packet, poll mode: retry after timeout to avoid flooding */
  }
}
 8007960:	e00a      	b.n	8007978 <sntp_recv+0x10c>
  } else if (err == SNTP_ERR_KOD) {
 8007962:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007966:	2b01      	cmp	r3, #1
 8007968:	d106      	bne.n	8007978 <sntp_recv+0x10c>
    if (sntp_opmode == SNTP_OPMODE_POLL) {
 800796a:	4b06      	ldr	r3, [pc, #24]	; (8007984 <sntp_recv+0x118>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d102      	bne.n	8007978 <sntp_recv+0x10c>
      sntp_try_next_server(NULL);
 8007972:	2000      	movs	r0, #0
 8007974:	f7ff ff54 	bl	8007820 <sntp_retry>
}
 8007978:	bf00      	nop
 800797a:	3730      	adds	r7, #48	; 0x30
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	40020400 	.word	0x40020400
 8007984:	20005324 	.word	0x20005324
 8007988:	2000532c 	.word	0x2000532c
 800798c:	08007821 	.word	0x08007821
 8007990:	08007a35 	.word	0x08007a35
 8007994:	20005334 	.word	0x20005334

08007998 <sntp_send_request>:
 *
 * @param server_addr resolved IP address of the SNTP server
 */
static void
sntp_send_request(const ip_addr_t *server_addr)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;

  LWIP_ASSERT("server_addr != NULL", server_addr != NULL);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d106      	bne.n	80079b4 <sntp_send_request+0x1c>
 80079a6:	4b1c      	ldr	r3, [pc, #112]	; (8007a18 <sntp_send_request+0x80>)
 80079a8:	f240 2235 	movw	r2, #565	; 0x235
 80079ac:	491b      	ldr	r1, [pc, #108]	; (8007a1c <sntp_send_request+0x84>)
 80079ae:	481c      	ldr	r0, [pc, #112]	; (8007a20 <sntp_send_request+0x88>)
 80079b0:	f00a fc10 	bl	80121d4 <iprintf>

  p = pbuf_alloc(PBUF_TRANSPORT, SNTP_MSG_LEN, PBUF_RAM);
 80079b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80079b8:	2130      	movs	r1, #48	; 0x30
 80079ba:	2036      	movs	r0, #54	; 0x36
 80079bc:	f001 f9a2 	bl	8008d04 <pbuf_alloc>
 80079c0:	60f8      	str	r0, [r7, #12]
  if (p != NULL) {
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d01c      	beq.n	8007a02 <sntp_send_request+0x6a>
    struct sntp_msg *sntpmsg = (struct sntp_msg *)p->payload;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	60bb      	str	r3, [r7, #8]
    LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_send_request: Sending request to server\n"));
    /* initialize request message */
    sntp_initialize_request(sntpmsg);
 80079ce:	68b8      	ldr	r0, [r7, #8]
 80079d0:	f7ff fed6 	bl	8007780 <sntp_initialize_request>
    /* send request */
    udp_sendto(sntp_pcb, p, server_addr, SNTP_PORT);
 80079d4:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <sntp_send_request+0x8c>)
 80079d6:	6818      	ldr	r0, [r3, #0]
 80079d8:	237b      	movs	r3, #123	; 0x7b
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	68f9      	ldr	r1, [r7, #12]
 80079de:	f007 fc4d 	bl	800f27c <udp_sendto>
    /* free the pbuf after sending it */
    pbuf_free(p);
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f001 fc72 	bl	80092cc <pbuf_free>
#if SNTP_MONITOR_SERVER_REACHABILITY
    /* indicate new packet has been sent */
    sntp_servers[sntp_current_server].reachability <<= 1;
 80079e8:	4b0f      	ldr	r3, [pc, #60]	; (8007a28 <sntp_send_request+0x90>)
 80079ea:	791b      	ldrb	r3, [r3, #4]
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	4b0d      	ldr	r3, [pc, #52]	; (8007a28 <sntp_send_request+0x90>)
 80079f2:	711a      	strb	r2, [r3, #4]
#endif /* SNTP_MONITOR_SERVER_REACHABILITY */
    /* set up receive timeout: try next server or retry on timeout */
    sys_timeout((u32_t)SNTP_RECV_TIMEOUT, sntp_try_next_server, NULL);
 80079f4:	2200      	movs	r2, #0
 80079f6:	490d      	ldr	r1, [pc, #52]	; (8007a2c <sntp_send_request+0x94>)
 80079f8:	f643 2098 	movw	r0, #15000	; 0x3a98
 80079fc:	f007 f9a6 	bl	800ed4c <sys_timeout>
    LWIP_DEBUGF(SNTP_DEBUG_SERIOUS, ("sntp_send_request: Out of memory, trying again in %"U32_F" ms\n",
                                     (u32_t)SNTP_RETRY_TIMEOUT));
    /* out of memory: set up a timer to send a retry */
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_request, NULL);
  }
}
 8007a00:	e005      	b.n	8007a0e <sntp_send_request+0x76>
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_request, NULL);
 8007a02:	2200      	movs	r2, #0
 8007a04:	490a      	ldr	r1, [pc, #40]	; (8007a30 <sntp_send_request+0x98>)
 8007a06:	f643 2098 	movw	r0, #15000	; 0x3a98
 8007a0a:	f007 f99f 	bl	800ed4c <sys_timeout>
}
 8007a0e:	bf00      	nop
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	08014694 	.word	0x08014694
 8007a1c:	080146cc 	.word	0x080146cc
 8007a20:	080146e0 	.word	0x080146e0
 8007a24:	20005328 	.word	0x20005328
 8007a28:	2000532c 	.word	0x2000532c
 8007a2c:	08007821 	.word	0x08007821
 8007a30:	08007a35 	.word	0x08007a35

08007a34 <sntp_request>:
 *
 * @param arg is unused (only necessary to conform to sys_timeout)
 */
static void
sntp_request(void *arg)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
      sntp_servers[sntp_current_server].addr = sntp_server_address;
    }
  } else
#endif /* SNTP_SERVER_DNS */
  {
    sntp_server_address = sntp_servers[sntp_current_server].addr;
 8007a3c:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <sntp_request+0x48>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	60bb      	str	r3, [r7, #8]
    err = (ip_addr_isany_val(sntp_server_address)) ? ERR_ARG : ERR_OK;
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d102      	bne.n	8007a4e <sntp_request+0x1a>
 8007a48:	f06f 030f 	mvn.w	r3, #15
 8007a4c:	e000      	b.n	8007a50 <sntp_request+0x1c>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8007a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d105      	bne.n	8007a66 <sntp_request+0x32>
    LWIP_DEBUGF(SNTP_DEBUG_TRACE, ("sntp_request: current server address is %s\n",
                                   ipaddr_ntoa(&sntp_server_address)));
    sntp_send_request(&sntp_server_address);
 8007a5a:	f107 0308 	add.w	r3, r7, #8
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff ff9a 	bl	8007998 <sntp_send_request>
  } else {
    /* address conversion failed, try another server */
    LWIP_DEBUGF(SNTP_DEBUG_WARN_STATE, ("sntp_request: Invalid server address, trying next server.\n"));
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_try_next_server, NULL);
  }
}
 8007a64:	e005      	b.n	8007a72 <sntp_request+0x3e>
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_try_next_server, NULL);
 8007a66:	2200      	movs	r2, #0
 8007a68:	4905      	ldr	r1, [pc, #20]	; (8007a80 <sntp_request+0x4c>)
 8007a6a:	f643 2098 	movw	r0, #15000	; 0x3a98
 8007a6e:	f007 f96d 	bl	800ed4c <sys_timeout>
}
 8007a72:	bf00      	nop
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	2000532c 	.word	0x2000532c
 8007a80:	08007821 	.word	0x08007821

08007a84 <sntp_init>:
 * Initialize this module.
 * Send out request instantly or after SNTP_STARTUP_DELAY(_FUNC).
 */
void
sntp_init(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0
#else
#error SNTP_SERVER_ADDRESS string not supported SNTP_SERVER_DNS==0
#endif
#endif /* SNTP_SERVER_ADDRESS */

  if (sntp_pcb == NULL) {
 8007a88:	4b28      	ldr	r3, [pc, #160]	; (8007b2c <sntp_init+0xa8>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d14a      	bne.n	8007b26 <sntp_init+0xa2>
    sntp_pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8007a90:	202e      	movs	r0, #46	; 0x2e
 8007a92:	f007 ff18 	bl	800f8c6 <udp_new_ip_type>
 8007a96:	4603      	mov	r3, r0
 8007a98:	4a24      	ldr	r2, [pc, #144]	; (8007b2c <sntp_init+0xa8>)
 8007a9a:	6013      	str	r3, [r2, #0]
    LWIP_ASSERT("Failed to allocate udp pcb for sntp client", sntp_pcb != NULL);
 8007a9c:	4b23      	ldr	r3, [pc, #140]	; (8007b2c <sntp_init+0xa8>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d106      	bne.n	8007ab2 <sntp_init+0x2e>
 8007aa4:	4b22      	ldr	r3, [pc, #136]	; (8007b30 <sntp_init+0xac>)
 8007aa6:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007aaa:	4922      	ldr	r1, [pc, #136]	; (8007b34 <sntp_init+0xb0>)
 8007aac:	4822      	ldr	r0, [pc, #136]	; (8007b38 <sntp_init+0xb4>)
 8007aae:	f00a fb91 	bl	80121d4 <iprintf>
    if (sntp_pcb != NULL) {
 8007ab2:	4b1e      	ldr	r3, [pc, #120]	; (8007b2c <sntp_init+0xa8>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d035      	beq.n	8007b26 <sntp_init+0xa2>
      udp_recv(sntp_pcb, sntp_recv, NULL);
 8007aba:	4b1c      	ldr	r3, [pc, #112]	; (8007b2c <sntp_init+0xa8>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	491e      	ldr	r1, [pc, #120]	; (8007b3c <sntp_init+0xb8>)
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f007 fe86 	bl	800f7d4 <udp_recv>

      if (sntp_opmode == SNTP_OPMODE_POLL) {
 8007ac8:	4b1d      	ldr	r3, [pc, #116]	; (8007b40 <sntp_init+0xbc>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d116      	bne.n	8007afe <sntp_init+0x7a>
        SNTP_RESET_RETRY_TIMEOUT();
 8007ad0:	4b1c      	ldr	r3, [pc, #112]	; (8007b44 <sntp_init+0xc0>)
 8007ad2:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007ad6:	601a      	str	r2, [r3, #0]
#if SNTP_STARTUP_DELAY
        sys_timeout((u32_t)SNTP_STARTUP_DELAY_FUNC, sntp_request, NULL);
 8007ad8:	f00a f9f8 	bl	8011ecc <rand>
 8007adc:	4603      	mov	r3, r0
 8007ade:	461a      	mov	r2, r3
 8007ae0:	4b19      	ldr	r3, [pc, #100]	; (8007b48 <sntp_init+0xc4>)
 8007ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ae6:	0b1b      	lsrs	r3, r3, #12
 8007ae8:	f241 3188 	movw	r1, #5000	; 0x1388
 8007aec:	fb01 f303 	mul.w	r3, r1, r3
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	2200      	movs	r2, #0
 8007af4:	4915      	ldr	r1, [pc, #84]	; (8007b4c <sntp_init+0xc8>)
 8007af6:	4618      	mov	r0, r3
 8007af8:	f007 f928 	bl	800ed4c <sys_timeout>
        ip_set_option(sntp_pcb, SOF_BROADCAST);
        udp_bind(sntp_pcb, IP_ANY_TYPE, SNTP_PORT);
      }
    }
  }
}
 8007afc:	e013      	b.n	8007b26 <sntp_init+0xa2>
      } else if (sntp_opmode == SNTP_OPMODE_LISTENONLY) {
 8007afe:	4b10      	ldr	r3, [pc, #64]	; (8007b40 <sntp_init+0xbc>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d10f      	bne.n	8007b26 <sntp_init+0xa2>
        ip_set_option(sntp_pcb, SOF_BROADCAST);
 8007b06:	4b09      	ldr	r3, [pc, #36]	; (8007b2c <sntp_init+0xa8>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	7a5a      	ldrb	r2, [r3, #9]
 8007b0c:	4b07      	ldr	r3, [pc, #28]	; (8007b2c <sntp_init+0xa8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f042 0220 	orr.w	r2, r2, #32
 8007b14:	b2d2      	uxtb	r2, r2
 8007b16:	725a      	strb	r2, [r3, #9]
        udp_bind(sntp_pcb, IP_ANY_TYPE, SNTP_PORT);
 8007b18:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <sntp_init+0xa8>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	227b      	movs	r2, #123	; 0x7b
 8007b1e:	490c      	ldr	r1, [pc, #48]	; (8007b50 <sntp_init+0xcc>)
 8007b20:	4618      	mov	r0, r3
 8007b22:	f007 fd61 	bl	800f5e8 <udp_bind>
}
 8007b26:	bf00      	nop
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	20005328 	.word	0x20005328
 8007b30:	08014694 	.word	0x08014694
 8007b34:	08014708 	.word	0x08014708
 8007b38:	080146e0 	.word	0x080146e0
 8007b3c:	0800786d 	.word	0x0800786d
 8007b40:	20005324 	.word	0x20005324
 8007b44:	20005334 	.word	0x20005334
 8007b48:	d1b71759 	.word	0xd1b71759
 8007b4c:	08007a35 	.word	0x08007a35
 8007b50:	08017214 	.word	0x08017214

08007b54 <sntp_enabled>:
/**
 * @ingroup sntp
 * Get enabled state.
 */
u8_t sntp_enabled(void)
{
 8007b54:	b480      	push	{r7}
 8007b56:	af00      	add	r7, sp, #0
  return (sntp_pcb != NULL) ? 1 : 0;
 8007b58:	4b05      	ldr	r3, [pc, #20]	; (8007b70 <sntp_enabled+0x1c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	bf14      	ite	ne
 8007b60:	2301      	movne	r3, #1
 8007b62:	2300      	moveq	r3, #0
 8007b64:	b2db      	uxtb	r3, r3
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	20005328 	.word	0x20005328

08007b74 <sntp_setoperatingmode>:
 * Sets the operating mode.
 * @param operating_mode one of the available operating modes
 */
void
sntp_setoperatingmode(u8_t operating_mode)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("Invalid operating mode", operating_mode <= SNTP_OPMODE_LISTENONLY);
 8007b7e:	79fb      	ldrb	r3, [r7, #7]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d906      	bls.n	8007b92 <sntp_setoperatingmode+0x1e>
 8007b84:	4b0c      	ldr	r3, [pc, #48]	; (8007bb8 <sntp_setoperatingmode+0x44>)
 8007b86:	f240 22e6 	movw	r2, #742	; 0x2e6
 8007b8a:	490c      	ldr	r1, [pc, #48]	; (8007bbc <sntp_setoperatingmode+0x48>)
 8007b8c:	480c      	ldr	r0, [pc, #48]	; (8007bc0 <sntp_setoperatingmode+0x4c>)
 8007b8e:	f00a fb21 	bl	80121d4 <iprintf>
  LWIP_ASSERT("Operating mode must not be set while SNTP client is running", sntp_pcb == NULL);
 8007b92:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <sntp_setoperatingmode+0x50>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d006      	beq.n	8007ba8 <sntp_setoperatingmode+0x34>
 8007b9a:	4b07      	ldr	r3, [pc, #28]	; (8007bb8 <sntp_setoperatingmode+0x44>)
 8007b9c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8007ba0:	4909      	ldr	r1, [pc, #36]	; (8007bc8 <sntp_setoperatingmode+0x54>)
 8007ba2:	4807      	ldr	r0, [pc, #28]	; (8007bc0 <sntp_setoperatingmode+0x4c>)
 8007ba4:	f00a fb16 	bl	80121d4 <iprintf>
  sntp_opmode = operating_mode;
 8007ba8:	4a08      	ldr	r2, [pc, #32]	; (8007bcc <sntp_setoperatingmode+0x58>)
 8007baa:	79fb      	ldrb	r3, [r7, #7]
 8007bac:	7013      	strb	r3, [r2, #0]
}
 8007bae:	bf00      	nop
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	08014694 	.word	0x08014694
 8007bbc:	08014734 	.word	0x08014734
 8007bc0:	080146e0 	.word	0x080146e0
 8007bc4:	20005328 	.word	0x20005328
 8007bc8:	0801474c 	.word	0x0801474c
 8007bcc:	20005324 	.word	0x20005324

08007bd0 <sntp_setserver>:
 * @param idx the index of the NTP server to set must be < SNTP_MAX_SERVERS
 * @param server IP address of the NTP server to set
 */
void
sntp_setserver(u8_t idx, const ip_addr_t *server)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	6039      	str	r1, [r7, #0]
 8007bda:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
  if (idx < SNTP_MAX_SERVERS) {
 8007bdc:	79fb      	ldrb	r3, [r7, #7]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10e      	bne.n	8007c00 <sntp_setserver+0x30>
    if (server != NULL) {
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d006      	beq.n	8007bf6 <sntp_setserver+0x26>
      sntp_servers[idx].addr = (*server);
 8007be8:	79fb      	ldrb	r3, [r7, #7]
 8007bea:	4908      	ldr	r1, [pc, #32]	; (8007c0c <sntp_setserver+0x3c>)
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	6812      	ldr	r2, [r2, #0]
 8007bf0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    }
#if SNTP_SERVER_DNS
    sntp_servers[idx].name = NULL;
#endif
  }
}
 8007bf4:	e004      	b.n	8007c00 <sntp_setserver+0x30>
      ip_addr_set_zero(&sntp_servers[idx].addr);
 8007bf6:	79fb      	ldrb	r3, [r7, #7]
 8007bf8:	4a04      	ldr	r2, [pc, #16]	; (8007c0c <sntp_setserver+0x3c>)
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	2000532c 	.word	0x2000532c

08007c10 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007c1a:	88fb      	ldrh	r3, [r7, #6]
 8007c1c:	021b      	lsls	r3, r3, #8
 8007c1e:	b21a      	sxth	r2, r3
 8007c20:	88fb      	ldrh	r3, [r7, #6]
 8007c22:	0a1b      	lsrs	r3, r3, #8
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	b21b      	sxth	r3, r3
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	b21b      	sxth	r3, r3
 8007c2c:	b29b      	uxth	r3, r3
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	061a      	lsls	r2, r3, #24
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	021b      	lsls	r3, r3, #8
 8007c4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	0a1b      	lsrs	r3, r3, #8
 8007c54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	0e1b      	lsrs	r3, r3, #24
 8007c5e:	4313      	orrs	r3, r2
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007c76:	f000 f8d5 	bl	8007e24 <mem_init>
  memp_init();
 8007c7a:	f000 fbdb 	bl	8008434 <memp_init>
  pbuf_init();
  netif_init();
 8007c7e:	f000 fcd9 	bl	8008634 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007c82:	f007 f905 	bl	800ee90 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007c86:	f001 fe23 	bl	80098d0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007c8a:	f007 f83d 	bl	800ed08 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007c8e:	bf00      	nop
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007ca2:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <ptr_to_mem+0x20>)
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	88fb      	ldrh	r3, [r7, #6]
 8007ca8:	4413      	add	r3, r2
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	20007b74 	.word	0x20007b74

08007cbc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007cc4:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <mem_to_ptr+0x20>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	b29b      	uxth	r3, r3
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	20007b74 	.word	0x20007b74

08007ce0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007ce0:	b590      	push	{r4, r7, lr}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007ce8:	4b45      	ldr	r3, [pc, #276]	; (8007e00 <plug_holes+0x120>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d206      	bcs.n	8007d00 <plug_holes+0x20>
 8007cf2:	4b44      	ldr	r3, [pc, #272]	; (8007e04 <plug_holes+0x124>)
 8007cf4:	f240 12df 	movw	r2, #479	; 0x1df
 8007cf8:	4943      	ldr	r1, [pc, #268]	; (8007e08 <plug_holes+0x128>)
 8007cfa:	4844      	ldr	r0, [pc, #272]	; (8007e0c <plug_holes+0x12c>)
 8007cfc:	f00a fa6a 	bl	80121d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007d00:	4b43      	ldr	r3, [pc, #268]	; (8007e10 <plug_holes+0x130>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d306      	bcc.n	8007d18 <plug_holes+0x38>
 8007d0a:	4b3e      	ldr	r3, [pc, #248]	; (8007e04 <plug_holes+0x124>)
 8007d0c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007d10:	4940      	ldr	r1, [pc, #256]	; (8007e14 <plug_holes+0x134>)
 8007d12:	483e      	ldr	r0, [pc, #248]	; (8007e0c <plug_holes+0x12c>)
 8007d14:	f00a fa5e 	bl	80121d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	791b      	ldrb	r3, [r3, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d006      	beq.n	8007d2e <plug_holes+0x4e>
 8007d20:	4b38      	ldr	r3, [pc, #224]	; (8007e04 <plug_holes+0x124>)
 8007d22:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007d26:	493c      	ldr	r1, [pc, #240]	; (8007e18 <plug_holes+0x138>)
 8007d28:	4838      	ldr	r0, [pc, #224]	; (8007e0c <plug_holes+0x12c>)
 8007d2a:	f00a fa53 	bl	80121d4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007d36:	d906      	bls.n	8007d46 <plug_holes+0x66>
 8007d38:	4b32      	ldr	r3, [pc, #200]	; (8007e04 <plug_holes+0x124>)
 8007d3a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007d3e:	4937      	ldr	r1, [pc, #220]	; (8007e1c <plug_holes+0x13c>)
 8007d40:	4832      	ldr	r0, [pc, #200]	; (8007e0c <plug_holes+0x12c>)
 8007d42:	f00a fa47 	bl	80121d4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff ffa4 	bl	8007c98 <ptr_to_mem>
 8007d50:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d024      	beq.n	8007da4 <plug_holes+0xc4>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	791b      	ldrb	r3, [r3, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d120      	bne.n	8007da4 <plug_holes+0xc4>
 8007d62:	4b2b      	ldr	r3, [pc, #172]	; (8007e10 <plug_holes+0x130>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d01b      	beq.n	8007da4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007d6c:	4b2c      	ldr	r3, [pc, #176]	; (8007e20 <plug_holes+0x140>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d102      	bne.n	8007d7c <plug_holes+0x9c>
      lfree = mem;
 8007d76:	4a2a      	ldr	r2, [pc, #168]	; (8007e20 <plug_holes+0x140>)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	881a      	ldrh	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	881b      	ldrh	r3, [r3, #0]
 8007d88:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007d8c:	d00a      	beq.n	8007da4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff ff80 	bl	8007c98 <ptr_to_mem>
 8007d98:	4604      	mov	r4, r0
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff ff8e 	bl	8007cbc <mem_to_ptr>
 8007da0:	4603      	mov	r3, r0
 8007da2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	885b      	ldrh	r3, [r3, #2]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7ff ff75 	bl	8007c98 <ptr_to_mem>
 8007dae:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d01f      	beq.n	8007df8 <plug_holes+0x118>
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	791b      	ldrb	r3, [r3, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d11b      	bne.n	8007df8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007dc0:	4b17      	ldr	r3, [pc, #92]	; (8007e20 <plug_holes+0x140>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d102      	bne.n	8007dd0 <plug_holes+0xf0>
      lfree = pmem;
 8007dca:	4a15      	ldr	r2, [pc, #84]	; (8007e20 <plug_holes+0x140>)
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	881a      	ldrh	r2, [r3, #0]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007de0:	d00a      	beq.n	8007df8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff ff56 	bl	8007c98 <ptr_to_mem>
 8007dec:	4604      	mov	r4, r0
 8007dee:	68b8      	ldr	r0, [r7, #8]
 8007df0:	f7ff ff64 	bl	8007cbc <mem_to_ptr>
 8007df4:	4603      	mov	r3, r0
 8007df6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007df8:	bf00      	nop
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd90      	pop	{r4, r7, pc}
 8007e00:	20007b74 	.word	0x20007b74
 8007e04:	08014788 	.word	0x08014788
 8007e08:	080147b8 	.word	0x080147b8
 8007e0c:	080147d0 	.word	0x080147d0
 8007e10:	20007b78 	.word	0x20007b78
 8007e14:	080147f8 	.word	0x080147f8
 8007e18:	08014814 	.word	0x08014814
 8007e1c:	08014830 	.word	0x08014830
 8007e20:	20007b7c 	.word	0x20007b7c

08007e24 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007e2a:	4b18      	ldr	r3, [pc, #96]	; (8007e8c <mem_init+0x68>)
 8007e2c:	3303      	adds	r3, #3
 8007e2e:	f023 0303 	bic.w	r3, r3, #3
 8007e32:	461a      	mov	r2, r3
 8007e34:	4b16      	ldr	r3, [pc, #88]	; (8007e90 <mem_init+0x6c>)
 8007e36:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007e38:	4b15      	ldr	r3, [pc, #84]	; (8007e90 <mem_init+0x6c>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007e44:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007e52:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8007e56:	f7ff ff1f 	bl	8007c98 <ptr_to_mem>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	4a0d      	ldr	r2, [pc, #52]	; (8007e94 <mem_init+0x70>)
 8007e5e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007e60:	4b0c      	ldr	r3, [pc, #48]	; (8007e94 <mem_init+0x70>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2201      	movs	r2, #1
 8007e66:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007e68:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <mem_init+0x70>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007e70:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007e72:	4b08      	ldr	r3, [pc, #32]	; (8007e94 <mem_init+0x70>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007e7a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007e7c:	4b04      	ldr	r3, [pc, #16]	; (8007e90 <mem_init+0x6c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a05      	ldr	r2, [pc, #20]	; (8007e98 <mem_init+0x74>)
 8007e82:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007e84:	bf00      	nop
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	20005360 	.word	0x20005360
 8007e90:	20007b74 	.word	0x20007b74
 8007e94:	20007b78 	.word	0x20007b78
 8007e98:	20007b7c 	.word	0x20007b7c

08007e9c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff ff09 	bl	8007cbc <mem_to_ptr>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff fef0 	bl	8007c98 <ptr_to_mem>
 8007eb8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	885b      	ldrh	r3, [r3, #2]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff feea 	bl	8007c98 <ptr_to_mem>
 8007ec4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007ece:	d818      	bhi.n	8007f02 <mem_link_valid+0x66>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	885b      	ldrh	r3, [r3, #2]
 8007ed4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007ed8:	d813      	bhi.n	8007f02 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007ede:	8afa      	ldrh	r2, [r7, #22]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d004      	beq.n	8007eee <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	8afa      	ldrh	r2, [r7, #22]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d109      	bne.n	8007f02 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007eee:	4b08      	ldr	r3, [pc, #32]	; (8007f10 <mem_link_valid+0x74>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d006      	beq.n	8007f06 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	885b      	ldrh	r3, [r3, #2]
 8007efc:	8afa      	ldrh	r2, [r7, #22]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d001      	beq.n	8007f06 <mem_link_valid+0x6a>
    return 0;
 8007f02:	2300      	movs	r3, #0
 8007f04:	e000      	b.n	8007f08 <mem_link_valid+0x6c>
  }
  return 1;
 8007f06:	2301      	movs	r3, #1
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	20007b78 	.word	0x20007b78

08007f14 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d04c      	beq.n	8007fbc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f003 0303 	and.w	r3, r3, #3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d007      	beq.n	8007f3c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007f2c:	4b25      	ldr	r3, [pc, #148]	; (8007fc4 <mem_free+0xb0>)
 8007f2e:	f240 2273 	movw	r2, #627	; 0x273
 8007f32:	4925      	ldr	r1, [pc, #148]	; (8007fc8 <mem_free+0xb4>)
 8007f34:	4825      	ldr	r0, [pc, #148]	; (8007fcc <mem_free+0xb8>)
 8007f36:	f00a f94d 	bl	80121d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007f3a:	e040      	b.n	8007fbe <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3b08      	subs	r3, #8
 8007f40:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007f42:	4b23      	ldr	r3, [pc, #140]	; (8007fd0 <mem_free+0xbc>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d306      	bcc.n	8007f5a <mem_free+0x46>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f103 020c 	add.w	r2, r3, #12
 8007f52:	4b20      	ldr	r3, [pc, #128]	; (8007fd4 <mem_free+0xc0>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d907      	bls.n	8007f6a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007f5a:	4b1a      	ldr	r3, [pc, #104]	; (8007fc4 <mem_free+0xb0>)
 8007f5c:	f240 227f 	movw	r2, #639	; 0x27f
 8007f60:	491d      	ldr	r1, [pc, #116]	; (8007fd8 <mem_free+0xc4>)
 8007f62:	481a      	ldr	r0, [pc, #104]	; (8007fcc <mem_free+0xb8>)
 8007f64:	f00a f936 	bl	80121d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007f68:	e029      	b.n	8007fbe <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	791b      	ldrb	r3, [r3, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d107      	bne.n	8007f82 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007f72:	4b14      	ldr	r3, [pc, #80]	; (8007fc4 <mem_free+0xb0>)
 8007f74:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007f78:	4918      	ldr	r1, [pc, #96]	; (8007fdc <mem_free+0xc8>)
 8007f7a:	4814      	ldr	r0, [pc, #80]	; (8007fcc <mem_free+0xb8>)
 8007f7c:	f00a f92a 	bl	80121d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007f80:	e01d      	b.n	8007fbe <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7ff ff8a 	bl	8007e9c <mem_link_valid>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d107      	bne.n	8007f9e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007f8e:	4b0d      	ldr	r3, [pc, #52]	; (8007fc4 <mem_free+0xb0>)
 8007f90:	f240 2295 	movw	r2, #661	; 0x295
 8007f94:	4912      	ldr	r1, [pc, #72]	; (8007fe0 <mem_free+0xcc>)
 8007f96:	480d      	ldr	r0, [pc, #52]	; (8007fcc <mem_free+0xb8>)
 8007f98:	f00a f91c 	bl	80121d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007f9c:	e00f      	b.n	8007fbe <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007fa4:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <mem_free+0xd0>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d202      	bcs.n	8007fb4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007fae:	4a0d      	ldr	r2, [pc, #52]	; (8007fe4 <mem_free+0xd0>)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f7ff fe93 	bl	8007ce0 <plug_holes>
 8007fba:	e000      	b.n	8007fbe <mem_free+0xaa>
    return;
 8007fbc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	08014788 	.word	0x08014788
 8007fc8:	0801485c 	.word	0x0801485c
 8007fcc:	080147d0 	.word	0x080147d0
 8007fd0:	20007b74 	.word	0x20007b74
 8007fd4:	20007b78 	.word	0x20007b78
 8007fd8:	08014880 	.word	0x08014880
 8007fdc:	0801489c 	.word	0x0801489c
 8007fe0:	080148c4 	.word	0x080148c4
 8007fe4:	20007b7c 	.word	0x20007b7c

08007fe8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007ff4:	887b      	ldrh	r3, [r7, #2]
 8007ff6:	3303      	adds	r3, #3
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	f023 0303 	bic.w	r3, r3, #3
 8007ffe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008000:	8bfb      	ldrh	r3, [r7, #30]
 8008002:	2b0b      	cmp	r3, #11
 8008004:	d801      	bhi.n	800800a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008006:	230c      	movs	r3, #12
 8008008:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800800a:	8bfb      	ldrh	r3, [r7, #30]
 800800c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008010:	d803      	bhi.n	800801a <mem_trim+0x32>
 8008012:	8bfa      	ldrh	r2, [r7, #30]
 8008014:	887b      	ldrh	r3, [r7, #2]
 8008016:	429a      	cmp	r2, r3
 8008018:	d201      	bcs.n	800801e <mem_trim+0x36>
    return NULL;
 800801a:	2300      	movs	r3, #0
 800801c:	e0cc      	b.n	80081b8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800801e:	4b68      	ldr	r3, [pc, #416]	; (80081c0 <mem_trim+0x1d8>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	429a      	cmp	r2, r3
 8008026:	d304      	bcc.n	8008032 <mem_trim+0x4a>
 8008028:	4b66      	ldr	r3, [pc, #408]	; (80081c4 <mem_trim+0x1dc>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	429a      	cmp	r2, r3
 8008030:	d306      	bcc.n	8008040 <mem_trim+0x58>
 8008032:	4b65      	ldr	r3, [pc, #404]	; (80081c8 <mem_trim+0x1e0>)
 8008034:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008038:	4964      	ldr	r1, [pc, #400]	; (80081cc <mem_trim+0x1e4>)
 800803a:	4865      	ldr	r0, [pc, #404]	; (80081d0 <mem_trim+0x1e8>)
 800803c:	f00a f8ca 	bl	80121d4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008040:	4b5f      	ldr	r3, [pc, #380]	; (80081c0 <mem_trim+0x1d8>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	429a      	cmp	r2, r3
 8008048:	d304      	bcc.n	8008054 <mem_trim+0x6c>
 800804a:	4b5e      	ldr	r3, [pc, #376]	; (80081c4 <mem_trim+0x1dc>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	429a      	cmp	r2, r3
 8008052:	d301      	bcc.n	8008058 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	e0af      	b.n	80081b8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3b08      	subs	r3, #8
 800805c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800805e:	69b8      	ldr	r0, [r7, #24]
 8008060:	f7ff fe2c 	bl	8007cbc <mem_to_ptr>
 8008064:	4603      	mov	r3, r0
 8008066:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	881a      	ldrh	r2, [r3, #0]
 800806c:	8afb      	ldrh	r3, [r7, #22]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	b29b      	uxth	r3, r3
 8008072:	3b08      	subs	r3, #8
 8008074:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008076:	8bfa      	ldrh	r2, [r7, #30]
 8008078:	8abb      	ldrh	r3, [r7, #20]
 800807a:	429a      	cmp	r2, r3
 800807c:	d906      	bls.n	800808c <mem_trim+0xa4>
 800807e:	4b52      	ldr	r3, [pc, #328]	; (80081c8 <mem_trim+0x1e0>)
 8008080:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008084:	4953      	ldr	r1, [pc, #332]	; (80081d4 <mem_trim+0x1ec>)
 8008086:	4852      	ldr	r0, [pc, #328]	; (80081d0 <mem_trim+0x1e8>)
 8008088:	f00a f8a4 	bl	80121d4 <iprintf>
  if (newsize > size) {
 800808c:	8bfa      	ldrh	r2, [r7, #30]
 800808e:	8abb      	ldrh	r3, [r7, #20]
 8008090:	429a      	cmp	r2, r3
 8008092:	d901      	bls.n	8008098 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8008094:	2300      	movs	r3, #0
 8008096:	e08f      	b.n	80081b8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8008098:	8bfa      	ldrh	r2, [r7, #30]
 800809a:	8abb      	ldrh	r3, [r7, #20]
 800809c:	429a      	cmp	r2, r3
 800809e:	d101      	bne.n	80080a4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	e089      	b.n	80081b8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7ff fdf5 	bl	8007c98 <ptr_to_mem>
 80080ae:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	791b      	ldrb	r3, [r3, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d13f      	bne.n	8008138 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80080c0:	d106      	bne.n	80080d0 <mem_trim+0xe8>
 80080c2:	4b41      	ldr	r3, [pc, #260]	; (80081c8 <mem_trim+0x1e0>)
 80080c4:	f240 22f5 	movw	r2, #757	; 0x2f5
 80080c8:	4943      	ldr	r1, [pc, #268]	; (80081d8 <mem_trim+0x1f0>)
 80080ca:	4841      	ldr	r0, [pc, #260]	; (80081d0 <mem_trim+0x1e8>)
 80080cc:	f00a f882 	bl	80121d4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80080d6:	8afa      	ldrh	r2, [r7, #22]
 80080d8:	8bfb      	ldrh	r3, [r7, #30]
 80080da:	4413      	add	r3, r2
 80080dc:	b29b      	uxth	r3, r3
 80080de:	3308      	adds	r3, #8
 80080e0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80080e2:	4b3e      	ldr	r3, [pc, #248]	; (80081dc <mem_trim+0x1f4>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d106      	bne.n	80080fa <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80080ec:	89fb      	ldrh	r3, [r7, #14]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7ff fdd2 	bl	8007c98 <ptr_to_mem>
 80080f4:	4603      	mov	r3, r0
 80080f6:	4a39      	ldr	r2, [pc, #228]	; (80081dc <mem_trim+0x1f4>)
 80080f8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80080fa:	89fb      	ldrh	r3, [r7, #14]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff fdcb 	bl	8007c98 <ptr_to_mem>
 8008102:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	2200      	movs	r2, #0
 8008108:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	89ba      	ldrh	r2, [r7, #12]
 800810e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	8afa      	ldrh	r2, [r7, #22]
 8008114:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	89fa      	ldrh	r2, [r7, #14]
 800811a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	881b      	ldrh	r3, [r3, #0]
 8008120:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008124:	d047      	beq.n	80081b6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	4618      	mov	r0, r3
 800812c:	f7ff fdb4 	bl	8007c98 <ptr_to_mem>
 8008130:	4602      	mov	r2, r0
 8008132:	89fb      	ldrh	r3, [r7, #14]
 8008134:	8053      	strh	r3, [r2, #2]
 8008136:	e03e      	b.n	80081b6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008138:	8bfb      	ldrh	r3, [r7, #30]
 800813a:	f103 0214 	add.w	r2, r3, #20
 800813e:	8abb      	ldrh	r3, [r7, #20]
 8008140:	429a      	cmp	r2, r3
 8008142:	d838      	bhi.n	80081b6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008144:	8afa      	ldrh	r2, [r7, #22]
 8008146:	8bfb      	ldrh	r3, [r7, #30]
 8008148:	4413      	add	r3, r2
 800814a:	b29b      	uxth	r3, r3
 800814c:	3308      	adds	r3, #8
 800814e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008158:	d106      	bne.n	8008168 <mem_trim+0x180>
 800815a:	4b1b      	ldr	r3, [pc, #108]	; (80081c8 <mem_trim+0x1e0>)
 800815c:	f240 3216 	movw	r2, #790	; 0x316
 8008160:	491d      	ldr	r1, [pc, #116]	; (80081d8 <mem_trim+0x1f0>)
 8008162:	481b      	ldr	r0, [pc, #108]	; (80081d0 <mem_trim+0x1e8>)
 8008164:	f00a f836 	bl	80121d4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008168:	89fb      	ldrh	r3, [r7, #14]
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff fd94 	bl	8007c98 <ptr_to_mem>
 8008170:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008172:	4b1a      	ldr	r3, [pc, #104]	; (80081dc <mem_trim+0x1f4>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	429a      	cmp	r2, r3
 800817a:	d202      	bcs.n	8008182 <mem_trim+0x19a>
      lfree = mem2;
 800817c:	4a17      	ldr	r2, [pc, #92]	; (80081dc <mem_trim+0x1f4>)
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	2200      	movs	r2, #0
 8008186:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	881a      	ldrh	r2, [r3, #0]
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	8afa      	ldrh	r2, [r7, #22]
 8008194:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	89fa      	ldrh	r2, [r7, #14]
 800819a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80081a4:	d007      	beq.n	80081b6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff fd74 	bl	8007c98 <ptr_to_mem>
 80081b0:	4602      	mov	r2, r0
 80081b2:	89fb      	ldrh	r3, [r7, #14]
 80081b4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80081b6:	687b      	ldr	r3, [r7, #4]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3720      	adds	r7, #32
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	20007b74 	.word	0x20007b74
 80081c4:	20007b78 	.word	0x20007b78
 80081c8:	08014788 	.word	0x08014788
 80081cc:	080148f8 	.word	0x080148f8
 80081d0:	080147d0 	.word	0x080147d0
 80081d4:	08014910 	.word	0x08014910
 80081d8:	08014930 	.word	0x08014930
 80081dc:	20007b7c 	.word	0x20007b7c

080081e0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4603      	mov	r3, r0
 80081e8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80081ea:	88fb      	ldrh	r3, [r7, #6]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <mem_malloc+0x14>
    return NULL;
 80081f0:	2300      	movs	r3, #0
 80081f2:	e0d9      	b.n	80083a8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80081f4:	88fb      	ldrh	r3, [r7, #6]
 80081f6:	3303      	adds	r3, #3
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	f023 0303 	bic.w	r3, r3, #3
 80081fe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008200:	8bbb      	ldrh	r3, [r7, #28]
 8008202:	2b0b      	cmp	r3, #11
 8008204:	d801      	bhi.n	800820a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008206:	230c      	movs	r3, #12
 8008208:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800820a:	8bbb      	ldrh	r3, [r7, #28]
 800820c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008210:	d803      	bhi.n	800821a <mem_malloc+0x3a>
 8008212:	8bba      	ldrh	r2, [r7, #28]
 8008214:	88fb      	ldrh	r3, [r7, #6]
 8008216:	429a      	cmp	r2, r3
 8008218:	d201      	bcs.n	800821e <mem_malloc+0x3e>
    return NULL;
 800821a:	2300      	movs	r3, #0
 800821c:	e0c4      	b.n	80083a8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800821e:	4b64      	ldr	r3, [pc, #400]	; (80083b0 <mem_malloc+0x1d0>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff fd4a 	bl	8007cbc <mem_to_ptr>
 8008228:	4603      	mov	r3, r0
 800822a:	83fb      	strh	r3, [r7, #30]
 800822c:	e0b4      	b.n	8008398 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800822e:	8bfb      	ldrh	r3, [r7, #30]
 8008230:	4618      	mov	r0, r3
 8008232:	f7ff fd31 	bl	8007c98 <ptr_to_mem>
 8008236:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	791b      	ldrb	r3, [r3, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f040 80a4 	bne.w	800838a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	461a      	mov	r2, r3
 8008248:	8bfb      	ldrh	r3, [r7, #30]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	f1a3 0208 	sub.w	r2, r3, #8
 8008250:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008252:	429a      	cmp	r2, r3
 8008254:	f0c0 8099 	bcc.w	800838a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	881b      	ldrh	r3, [r3, #0]
 800825c:	461a      	mov	r2, r3
 800825e:	8bfb      	ldrh	r3, [r7, #30]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	f1a3 0208 	sub.w	r2, r3, #8
 8008266:	8bbb      	ldrh	r3, [r7, #28]
 8008268:	3314      	adds	r3, #20
 800826a:	429a      	cmp	r2, r3
 800826c:	d333      	bcc.n	80082d6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800826e:	8bfa      	ldrh	r2, [r7, #30]
 8008270:	8bbb      	ldrh	r3, [r7, #28]
 8008272:	4413      	add	r3, r2
 8008274:	b29b      	uxth	r3, r3
 8008276:	3308      	adds	r3, #8
 8008278:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800827a:	8a7b      	ldrh	r3, [r7, #18]
 800827c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008280:	d106      	bne.n	8008290 <mem_malloc+0xb0>
 8008282:	4b4c      	ldr	r3, [pc, #304]	; (80083b4 <mem_malloc+0x1d4>)
 8008284:	f240 3287 	movw	r2, #903	; 0x387
 8008288:	494b      	ldr	r1, [pc, #300]	; (80083b8 <mem_malloc+0x1d8>)
 800828a:	484c      	ldr	r0, [pc, #304]	; (80083bc <mem_malloc+0x1dc>)
 800828c:	f009 ffa2 	bl	80121d4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008290:	8a7b      	ldrh	r3, [r7, #18]
 8008292:	4618      	mov	r0, r3
 8008294:	f7ff fd00 	bl	8007c98 <ptr_to_mem>
 8008298:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	881a      	ldrh	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	8bfa      	ldrh	r2, [r7, #30]
 80082ac:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	8a7a      	ldrh	r2, [r7, #18]
 80082b2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2201      	movs	r2, #1
 80082b8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	881b      	ldrh	r3, [r3, #0]
 80082be:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80082c2:	d00b      	beq.n	80082dc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	881b      	ldrh	r3, [r3, #0]
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7ff fce5 	bl	8007c98 <ptr_to_mem>
 80082ce:	4602      	mov	r2, r0
 80082d0:	8a7b      	ldrh	r3, [r7, #18]
 80082d2:	8053      	strh	r3, [r2, #2]
 80082d4:	e002      	b.n	80082dc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2201      	movs	r2, #1
 80082da:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80082dc:	4b34      	ldr	r3, [pc, #208]	; (80083b0 <mem_malloc+0x1d0>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d127      	bne.n	8008336 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80082e6:	4b32      	ldr	r3, [pc, #200]	; (80083b0 <mem_malloc+0x1d0>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80082ec:	e005      	b.n	80082fa <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff fcd0 	bl	8007c98 <ptr_to_mem>
 80082f8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	791b      	ldrb	r3, [r3, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d004      	beq.n	800830c <mem_malloc+0x12c>
 8008302:	4b2f      	ldr	r3, [pc, #188]	; (80083c0 <mem_malloc+0x1e0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	69ba      	ldr	r2, [r7, #24]
 8008308:	429a      	cmp	r2, r3
 800830a:	d1f0      	bne.n	80082ee <mem_malloc+0x10e>
          }
          lfree = cur;
 800830c:	4a28      	ldr	r2, [pc, #160]	; (80083b0 <mem_malloc+0x1d0>)
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008312:	4b27      	ldr	r3, [pc, #156]	; (80083b0 <mem_malloc+0x1d0>)
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	4b2a      	ldr	r3, [pc, #168]	; (80083c0 <mem_malloc+0x1e0>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	429a      	cmp	r2, r3
 800831c:	d00b      	beq.n	8008336 <mem_malloc+0x156>
 800831e:	4b24      	ldr	r3, [pc, #144]	; (80083b0 <mem_malloc+0x1d0>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	791b      	ldrb	r3, [r3, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d006      	beq.n	8008336 <mem_malloc+0x156>
 8008328:	4b22      	ldr	r3, [pc, #136]	; (80083b4 <mem_malloc+0x1d4>)
 800832a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800832e:	4925      	ldr	r1, [pc, #148]	; (80083c4 <mem_malloc+0x1e4>)
 8008330:	4822      	ldr	r0, [pc, #136]	; (80083bc <mem_malloc+0x1dc>)
 8008332:	f009 ff4f 	bl	80121d4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008336:	8bba      	ldrh	r2, [r7, #28]
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	4413      	add	r3, r2
 800833c:	3308      	adds	r3, #8
 800833e:	4a20      	ldr	r2, [pc, #128]	; (80083c0 <mem_malloc+0x1e0>)
 8008340:	6812      	ldr	r2, [r2, #0]
 8008342:	4293      	cmp	r3, r2
 8008344:	d906      	bls.n	8008354 <mem_malloc+0x174>
 8008346:	4b1b      	ldr	r3, [pc, #108]	; (80083b4 <mem_malloc+0x1d4>)
 8008348:	f240 32b9 	movw	r2, #953	; 0x3b9
 800834c:	491e      	ldr	r1, [pc, #120]	; (80083c8 <mem_malloc+0x1e8>)
 800834e:	481b      	ldr	r0, [pc, #108]	; (80083bc <mem_malloc+0x1dc>)
 8008350:	f009 ff40 	bl	80121d4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d006      	beq.n	800836c <mem_malloc+0x18c>
 800835e:	4b15      	ldr	r3, [pc, #84]	; (80083b4 <mem_malloc+0x1d4>)
 8008360:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008364:	4919      	ldr	r1, [pc, #100]	; (80083cc <mem_malloc+0x1ec>)
 8008366:	4815      	ldr	r0, [pc, #84]	; (80083bc <mem_malloc+0x1dc>)
 8008368:	f009 ff34 	bl	80121d4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	f003 0303 	and.w	r3, r3, #3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d006      	beq.n	8008384 <mem_malloc+0x1a4>
 8008376:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <mem_malloc+0x1d4>)
 8008378:	f240 32bd 	movw	r2, #957	; 0x3bd
 800837c:	4914      	ldr	r1, [pc, #80]	; (80083d0 <mem_malloc+0x1f0>)
 800837e:	480f      	ldr	r0, [pc, #60]	; (80083bc <mem_malloc+0x1dc>)
 8008380:	f009 ff28 	bl	80121d4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	3308      	adds	r3, #8
 8008388:	e00e      	b.n	80083a8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800838a:	8bfb      	ldrh	r3, [r7, #30]
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff fc83 	bl	8007c98 <ptr_to_mem>
 8008392:	4603      	mov	r3, r0
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008398:	8bfa      	ldrh	r2, [r7, #30]
 800839a:	8bbb      	ldrh	r3, [r7, #28]
 800839c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80083a0:	429a      	cmp	r2, r3
 80083a2:	f4ff af44 	bcc.w	800822e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3720      	adds	r7, #32
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	20007b7c 	.word	0x20007b7c
 80083b4:	08014788 	.word	0x08014788
 80083b8:	08014930 	.word	0x08014930
 80083bc:	080147d0 	.word	0x080147d0
 80083c0:	20007b78 	.word	0x20007b78
 80083c4:	08014944 	.word	0x08014944
 80083c8:	08014960 	.word	0x08014960
 80083cc:	08014990 	.word	0x08014990
 80083d0:	080149c0 	.word	0x080149c0

080083d4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	2200      	movs	r2, #0
 80083e2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	3303      	adds	r3, #3
 80083ea:	f023 0303 	bic.w	r3, r3, #3
 80083ee:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80083f0:	2300      	movs	r3, #0
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	e011      	b.n	800841a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	461a      	mov	r2, r3
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	4413      	add	r3, r2
 8008412:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3301      	adds	r3, #1
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	885b      	ldrh	r3, [r3, #2]
 800841e:	461a      	mov	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4293      	cmp	r3, r2
 8008424:	dbe7      	blt.n	80083f6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008426:	bf00      	nop
 8008428:	bf00      	nop
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800843a:	2300      	movs	r3, #0
 800843c:	80fb      	strh	r3, [r7, #6]
 800843e:	e009      	b.n	8008454 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008440:	88fb      	ldrh	r3, [r7, #6]
 8008442:	4a08      	ldr	r2, [pc, #32]	; (8008464 <memp_init+0x30>)
 8008444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008448:	4618      	mov	r0, r3
 800844a:	f7ff ffc3 	bl	80083d4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800844e:	88fb      	ldrh	r3, [r7, #6]
 8008450:	3301      	adds	r3, #1
 8008452:	80fb      	strh	r3, [r7, #6]
 8008454:	88fb      	ldrh	r3, [r7, #6]
 8008456:	2b08      	cmp	r3, #8
 8008458:	d9f2      	bls.n	8008440 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800845a:	bf00      	nop
 800845c:	bf00      	nop
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	080171b0 	.word	0x080171b0

08008468 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d012      	beq.n	80084a4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	6812      	ldr	r2, [r2, #0]
 8008486:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f003 0303 	and.w	r3, r3, #3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d006      	beq.n	80084a0 <do_memp_malloc_pool+0x38>
 8008492:	4b07      	ldr	r3, [pc, #28]	; (80084b0 <do_memp_malloc_pool+0x48>)
 8008494:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008498:	4906      	ldr	r1, [pc, #24]	; (80084b4 <do_memp_malloc_pool+0x4c>)
 800849a:	4807      	ldr	r0, [pc, #28]	; (80084b8 <do_memp_malloc_pool+0x50>)
 800849c:	f009 fe9a 	bl	80121d4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	e000      	b.n	80084a6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	080149e4 	.word	0x080149e4
 80084b4:	08014a14 	.word	0x08014a14
 80084b8:	08014a38 	.word	0x08014a38

080084bc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d106      	bne.n	80084d8 <memp_malloc_pool+0x1c>
 80084ca:	4b0a      	ldr	r3, [pc, #40]	; (80084f4 <memp_malloc_pool+0x38>)
 80084cc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80084d0:	4909      	ldr	r1, [pc, #36]	; (80084f8 <memp_malloc_pool+0x3c>)
 80084d2:	480a      	ldr	r0, [pc, #40]	; (80084fc <memp_malloc_pool+0x40>)
 80084d4:	f009 fe7e 	bl	80121d4 <iprintf>
  if (desc == NULL) {
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <memp_malloc_pool+0x26>
    return NULL;
 80084de:	2300      	movs	r3, #0
 80084e0:	e003      	b.n	80084ea <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7ff ffc0 	bl	8008468 <do_memp_malloc_pool>
 80084e8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	080149e4 	.word	0x080149e4
 80084f8:	08014a60 	.word	0x08014a60
 80084fc:	08014a38 	.word	0x08014a38

08008500 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	4603      	mov	r3, r0
 8008508:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	2b08      	cmp	r3, #8
 800850e:	d908      	bls.n	8008522 <memp_malloc+0x22>
 8008510:	4b0a      	ldr	r3, [pc, #40]	; (800853c <memp_malloc+0x3c>)
 8008512:	f240 1257 	movw	r2, #343	; 0x157
 8008516:	490a      	ldr	r1, [pc, #40]	; (8008540 <memp_malloc+0x40>)
 8008518:	480a      	ldr	r0, [pc, #40]	; (8008544 <memp_malloc+0x44>)
 800851a:	f009 fe5b 	bl	80121d4 <iprintf>
 800851e:	2300      	movs	r3, #0
 8008520:	e008      	b.n	8008534 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	4a08      	ldr	r2, [pc, #32]	; (8008548 <memp_malloc+0x48>)
 8008526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800852a:	4618      	mov	r0, r3
 800852c:	f7ff ff9c 	bl	8008468 <do_memp_malloc_pool>
 8008530:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008532:	68fb      	ldr	r3, [r7, #12]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	080149e4 	.word	0x080149e4
 8008540:	08014a74 	.word	0x08014a74
 8008544:	08014a38 	.word	0x08014a38
 8008548:	080171b0 	.word	0x080171b0

0800854c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	f003 0303 	and.w	r3, r3, #3
 800855c:	2b00      	cmp	r3, #0
 800855e:	d006      	beq.n	800856e <do_memp_free_pool+0x22>
 8008560:	4b0a      	ldr	r3, [pc, #40]	; (800858c <do_memp_free_pool+0x40>)
 8008562:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008566:	490a      	ldr	r1, [pc, #40]	; (8008590 <do_memp_free_pool+0x44>)
 8008568:	480a      	ldr	r0, [pc, #40]	; (8008594 <do_memp_free_pool+0x48>)
 800856a:	f009 fe33 	bl	80121d4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008584:	bf00      	nop
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	080149e4 	.word	0x080149e4
 8008590:	08014a94 	.word	0x08014a94
 8008594:	08014a38 	.word	0x08014a38

08008598 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d106      	bne.n	80085b6 <memp_free_pool+0x1e>
 80085a8:	4b0a      	ldr	r3, [pc, #40]	; (80085d4 <memp_free_pool+0x3c>)
 80085aa:	f240 1295 	movw	r2, #405	; 0x195
 80085ae:	490a      	ldr	r1, [pc, #40]	; (80085d8 <memp_free_pool+0x40>)
 80085b0:	480a      	ldr	r0, [pc, #40]	; (80085dc <memp_free_pool+0x44>)
 80085b2:	f009 fe0f 	bl	80121d4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d007      	beq.n	80085cc <memp_free_pool+0x34>
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d004      	beq.n	80085cc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7ff ffc1 	bl	800854c <do_memp_free_pool>
 80085ca:	e000      	b.n	80085ce <memp_free_pool+0x36>
    return;
 80085cc:	bf00      	nop
}
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	080149e4 	.word	0x080149e4
 80085d8:	08014a60 	.word	0x08014a60
 80085dc:	08014a38 	.word	0x08014a38

080085e0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	4603      	mov	r3, r0
 80085e8:	6039      	str	r1, [r7, #0]
 80085ea:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80085ec:	79fb      	ldrb	r3, [r7, #7]
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	d907      	bls.n	8008602 <memp_free+0x22>
 80085f2:	4b0c      	ldr	r3, [pc, #48]	; (8008624 <memp_free+0x44>)
 80085f4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80085f8:	490b      	ldr	r1, [pc, #44]	; (8008628 <memp_free+0x48>)
 80085fa:	480c      	ldr	r0, [pc, #48]	; (800862c <memp_free+0x4c>)
 80085fc:	f009 fdea 	bl	80121d4 <iprintf>
 8008600:	e00c      	b.n	800861c <memp_free+0x3c>

  if (mem == NULL) {
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d008      	beq.n	800861a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008608:	79fb      	ldrb	r3, [r7, #7]
 800860a:	4a09      	ldr	r2, [pc, #36]	; (8008630 <memp_free+0x50>)
 800860c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	4618      	mov	r0, r3
 8008614:	f7ff ff9a 	bl	800854c <do_memp_free_pool>
 8008618:	e000      	b.n	800861c <memp_free+0x3c>
    return;
 800861a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	080149e4 	.word	0x080149e4
 8008628:	08014ab4 	.word	0x08014ab4
 800862c:	08014a38 	.word	0x08014a38
 8008630:	080171b0 	.word	0x080171b0

08008634 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008634:	b480      	push	{r7}
 8008636:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008638:	bf00      	nop
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
	...

08008644 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
 8008650:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d108      	bne.n	800866a <netif_add+0x26>
 8008658:	4b57      	ldr	r3, [pc, #348]	; (80087b8 <netif_add+0x174>)
 800865a:	f240 1227 	movw	r2, #295	; 0x127
 800865e:	4957      	ldr	r1, [pc, #348]	; (80087bc <netif_add+0x178>)
 8008660:	4857      	ldr	r0, [pc, #348]	; (80087c0 <netif_add+0x17c>)
 8008662:	f009 fdb7 	bl	80121d4 <iprintf>
 8008666:	2300      	movs	r3, #0
 8008668:	e0a2      	b.n	80087b0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	2b00      	cmp	r3, #0
 800866e:	d108      	bne.n	8008682 <netif_add+0x3e>
 8008670:	4b51      	ldr	r3, [pc, #324]	; (80087b8 <netif_add+0x174>)
 8008672:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008676:	4953      	ldr	r1, [pc, #332]	; (80087c4 <netif_add+0x180>)
 8008678:	4851      	ldr	r0, [pc, #324]	; (80087c0 <netif_add+0x17c>)
 800867a:	f009 fdab 	bl	80121d4 <iprintf>
 800867e:	2300      	movs	r3, #0
 8008680:	e096      	b.n	80087b0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d101      	bne.n	800868c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008688:	4b4f      	ldr	r3, [pc, #316]	; (80087c8 <netif_add+0x184>)
 800868a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008692:	4b4d      	ldr	r3, [pc, #308]	; (80087c8 <netif_add+0x184>)
 8008694:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800869c:	4b4a      	ldr	r3, [pc, #296]	; (80087c8 <netif_add+0x184>)
 800869e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4a45      	ldr	r2, [pc, #276]	; (80087cc <netif_add+0x188>)
 80086b6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6a3a      	ldr	r2, [r7, #32]
 80086d0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80086d2:	4b3f      	ldr	r3, [pc, #252]	; (80087d0 <netif_add+0x18c>)
 80086d4:	781a      	ldrb	r2, [r3, #0]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086e0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	68b9      	ldr	r1, [r7, #8]
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 f913 	bl	8008914 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	4798      	blx	r3
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <netif_add+0xba>
    return NULL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	e058      	b.n	80087b0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008704:	2bff      	cmp	r3, #255	; 0xff
 8008706:	d103      	bne.n	8008710 <netif_add+0xcc>
        netif->num = 0;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8008710:	2300      	movs	r3, #0
 8008712:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008714:	4b2f      	ldr	r3, [pc, #188]	; (80087d4 <netif_add+0x190>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	617b      	str	r3, [r7, #20]
 800871a:	e02b      	b.n	8008774 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	429a      	cmp	r2, r3
 8008722:	d106      	bne.n	8008732 <netif_add+0xee>
 8008724:	4b24      	ldr	r3, [pc, #144]	; (80087b8 <netif_add+0x174>)
 8008726:	f240 128b 	movw	r2, #395	; 0x18b
 800872a:	492b      	ldr	r1, [pc, #172]	; (80087d8 <netif_add+0x194>)
 800872c:	4824      	ldr	r0, [pc, #144]	; (80087c0 <netif_add+0x17c>)
 800872e:	f009 fd51 	bl	80121d4 <iprintf>
        num_netifs++;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	3301      	adds	r3, #1
 8008736:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	2bff      	cmp	r3, #255	; 0xff
 800873c:	dd06      	ble.n	800874c <netif_add+0x108>
 800873e:	4b1e      	ldr	r3, [pc, #120]	; (80087b8 <netif_add+0x174>)
 8008740:	f240 128d 	movw	r2, #397	; 0x18d
 8008744:	4925      	ldr	r1, [pc, #148]	; (80087dc <netif_add+0x198>)
 8008746:	481e      	ldr	r0, [pc, #120]	; (80087c0 <netif_add+0x17c>)
 8008748:	f009 fd44 	bl	80121d4 <iprintf>
        if (netif2->num == netif->num) {
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008758:	429a      	cmp	r2, r3
 800875a:	d108      	bne.n	800876e <netif_add+0x12a>
          netif->num++;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008762:	3301      	adds	r3, #1
 8008764:	b2da      	uxtb	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800876c:	e005      	b.n	800877a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	617b      	str	r3, [r7, #20]
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1d0      	bne.n	800871c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1be      	bne.n	80086fe <netif_add+0xba>
  }
  if (netif->num == 254) {
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008786:	2bfe      	cmp	r3, #254	; 0xfe
 8008788:	d103      	bne.n	8008792 <netif_add+0x14e>
    netif_num = 0;
 800878a:	4b11      	ldr	r3, [pc, #68]	; (80087d0 <netif_add+0x18c>)
 800878c:	2200      	movs	r2, #0
 800878e:	701a      	strb	r2, [r3, #0]
 8008790:	e006      	b.n	80087a0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008798:	3301      	adds	r3, #1
 800879a:	b2da      	uxtb	r2, r3
 800879c:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <netif_add+0x18c>)
 800879e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80087a0:	4b0c      	ldr	r3, [pc, #48]	; (80087d4 <netif_add+0x190>)
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80087a8:	4a0a      	ldr	r2, [pc, #40]	; (80087d4 <netif_add+0x190>)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80087ae:	68fb      	ldr	r3, [r7, #12]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3718      	adds	r7, #24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	08014ad0 	.word	0x08014ad0
 80087bc:	08014b64 	.word	0x08014b64
 80087c0:	08014b20 	.word	0x08014b20
 80087c4:	08014b80 	.word	0x08014b80
 80087c8:	08017214 	.word	0x08017214
 80087cc:	08008bef 	.word	0x08008bef
 80087d0:	2000aa74 	.word	0x2000aa74
 80087d4:	2000aa6c 	.word	0x2000aa6c
 80087d8:	08014ba4 	.word	0x08014ba4
 80087dc:	08014bb8 	.word	0x08014bb8

080087e0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f002 fbb7 	bl	800af60 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f007 f873 	bl	800f8e0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80087fa:	bf00      	nop
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d106      	bne.n	8008824 <netif_do_set_ipaddr+0x20>
 8008816:	4b1d      	ldr	r3, [pc, #116]	; (800888c <netif_do_set_ipaddr+0x88>)
 8008818:	f240 12cb 	movw	r2, #459	; 0x1cb
 800881c:	491c      	ldr	r1, [pc, #112]	; (8008890 <netif_do_set_ipaddr+0x8c>)
 800881e:	481d      	ldr	r0, [pc, #116]	; (8008894 <netif_do_set_ipaddr+0x90>)
 8008820:	f009 fcd8 	bl	80121d4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d106      	bne.n	8008838 <netif_do_set_ipaddr+0x34>
 800882a:	4b18      	ldr	r3, [pc, #96]	; (800888c <netif_do_set_ipaddr+0x88>)
 800882c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008830:	4917      	ldr	r1, [pc, #92]	; (8008890 <netif_do_set_ipaddr+0x8c>)
 8008832:	4818      	ldr	r0, [pc, #96]	; (8008894 <netif_do_set_ipaddr+0x90>)
 8008834:	f009 fcce 	bl	80121d4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3304      	adds	r3, #4
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	429a      	cmp	r2, r3
 8008844:	d01c      	beq.n	8008880 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3304      	adds	r3, #4
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008856:	f107 0314 	add.w	r3, r7, #20
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7ff ffbf 	bl	80087e0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <netif_do_set_ipaddr+0x6a>
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	e000      	b.n	8008870 <netif_do_set_ipaddr+0x6c>
 800886e:	2300      	movs	r3, #0
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008874:	2101      	movs	r1, #1
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 f8d2 	bl	8008a20 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800887c:	2301      	movs	r3, #1
 800887e:	e000      	b.n	8008882 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	08014ad0 	.word	0x08014ad0
 8008890:	08014be8 	.word	0x08014be8
 8008894:	08014b20 	.word	0x08014b20

08008898 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3308      	adds	r3, #8
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d00a      	beq.n	80088c8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <netif_do_set_netmask+0x26>
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	e000      	b.n	80088c0 <netif_do_set_netmask+0x28>
 80088be:	2300      	movs	r3, #0
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80088c4:	2301      	movs	r3, #1
 80088c6:	e000      	b.n	80088ca <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b085      	sub	sp, #20
 80088da:	af00      	add	r7, sp, #0
 80088dc:	60f8      	str	r0, [r7, #12]
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	330c      	adds	r3, #12
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d00a      	beq.n	8008906 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <netif_do_set_gw+0x26>
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	e000      	b.n	80088fe <netif_do_set_gw+0x28>
 80088fc:	2300      	movs	r3, #0
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008902:	2301      	movs	r3, #1
 8008904:	e000      	b.n	8008908 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3714      	adds	r7, #20
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
 8008920:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008922:	2300      	movs	r3, #0
 8008924:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008926:	2300      	movs	r3, #0
 8008928:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008930:	4b1c      	ldr	r3, [pc, #112]	; (80089a4 <netif_set_addr+0x90>)
 8008932:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d101      	bne.n	800893e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800893a:	4b1a      	ldr	r3, [pc, #104]	; (80089a4 <netif_set_addr+0x90>)
 800893c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008944:	4b17      	ldr	r3, [pc, #92]	; (80089a4 <netif_set_addr+0x90>)
 8008946:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d003      	beq.n	8008956 <netif_set_addr+0x42>
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <netif_set_addr+0x46>
 8008956:	2301      	movs	r3, #1
 8008958:	e000      	b.n	800895c <netif_set_addr+0x48>
 800895a:	2300      	movs	r3, #0
 800895c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d006      	beq.n	8008972 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008964:	f107 0310 	add.w	r3, r7, #16
 8008968:	461a      	mov	r2, r3
 800896a:	68b9      	ldr	r1, [r7, #8]
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f7ff ff49 	bl	8008804 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008972:	69fa      	ldr	r2, [r7, #28]
 8008974:	6879      	ldr	r1, [r7, #4]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f7ff ff8e 	bl	8008898 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f7ff ffa8 	bl	80088d6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d106      	bne.n	800899a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800898c:	f107 0310 	add.w	r3, r7, #16
 8008990:	461a      	mov	r2, r3
 8008992:	68b9      	ldr	r1, [r7, #8]
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f7ff ff35 	bl	8008804 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800899a:	bf00      	nop
 800899c:	3720      	adds	r7, #32
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	08017214 	.word	0x08017214

080089a8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80089b0:	4a04      	ldr	r2, [pc, #16]	; (80089c4 <netif_set_default+0x1c>)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	2000aa70 	.word	0x2000aa70

080089c8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d107      	bne.n	80089e6 <netif_set_up+0x1e>
 80089d6:	4b0f      	ldr	r3, [pc, #60]	; (8008a14 <netif_set_up+0x4c>)
 80089d8:	f44f 7254 	mov.w	r2, #848	; 0x350
 80089dc:	490e      	ldr	r1, [pc, #56]	; (8008a18 <netif_set_up+0x50>)
 80089de:	480f      	ldr	r0, [pc, #60]	; (8008a1c <netif_set_up+0x54>)
 80089e0:	f009 fbf8 	bl	80121d4 <iprintf>
 80089e4:	e013      	b.n	8008a0e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80089ec:	f003 0301 	and.w	r3, r3, #1
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10c      	bne.n	8008a0e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80089fa:	f043 0301 	orr.w	r3, r3, #1
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008a06:	2103      	movs	r1, #3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f809 	bl	8008a20 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	08014ad0 	.word	0x08014ad0
 8008a18:	08014c58 	.word	0x08014c58
 8008a1c:	08014b20 	.word	0x08014b20

08008a20 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d106      	bne.n	8008a40 <netif_issue_reports+0x20>
 8008a32:	4b18      	ldr	r3, [pc, #96]	; (8008a94 <netif_issue_reports+0x74>)
 8008a34:	f240 326d 	movw	r2, #877	; 0x36d
 8008a38:	4917      	ldr	r1, [pc, #92]	; (8008a98 <netif_issue_reports+0x78>)
 8008a3a:	4818      	ldr	r0, [pc, #96]	; (8008a9c <netif_issue_reports+0x7c>)
 8008a3c:	f009 fbca 	bl	80121d4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a46:	f003 0304 	and.w	r3, r3, #4
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d01e      	beq.n	8008a8c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a54:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d017      	beq.n	8008a8c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008a5c:	78fb      	ldrb	r3, [r7, #3]
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d013      	beq.n	8008a8e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	3304      	adds	r3, #4
 8008a6a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00e      	beq.n	8008a8e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a76:	f003 0308 	and.w	r3, r3, #8
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d007      	beq.n	8008a8e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	3304      	adds	r3, #4
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f007 fe95 	bl	80107b4 <etharp_request>
 8008a8a:	e000      	b.n	8008a8e <netif_issue_reports+0x6e>
    return;
 8008a8c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	08014ad0 	.word	0x08014ad0
 8008a98:	08014c74 	.word	0x08014c74
 8008a9c:	08014b20 	.word	0x08014b20

08008aa0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d107      	bne.n	8008abe <netif_set_down+0x1e>
 8008aae:	4b12      	ldr	r3, [pc, #72]	; (8008af8 <netif_set_down+0x58>)
 8008ab0:	f240 329b 	movw	r2, #923	; 0x39b
 8008ab4:	4911      	ldr	r1, [pc, #68]	; (8008afc <netif_set_down+0x5c>)
 8008ab6:	4812      	ldr	r0, [pc, #72]	; (8008b00 <netif_set_down+0x60>)
 8008ab8:	f009 fb8c 	bl	80121d4 <iprintf>
 8008abc:	e019      	b.n	8008af2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d012      	beq.n	8008af2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ad2:	f023 0301 	bic.w	r3, r3, #1
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ae4:	f003 0308 	and.w	r3, r3, #8
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f007 fa1f 	bl	800ff30 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	08014ad0 	.word	0x08014ad0
 8008afc:	08014c98 	.word	0x08014c98
 8008b00:	08014b20 	.word	0x08014b20

08008b04 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d107      	bne.n	8008b22 <netif_set_link_up+0x1e>
 8008b12:	4b13      	ldr	r3, [pc, #76]	; (8008b60 <netif_set_link_up+0x5c>)
 8008b14:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008b18:	4912      	ldr	r1, [pc, #72]	; (8008b64 <netif_set_link_up+0x60>)
 8008b1a:	4813      	ldr	r0, [pc, #76]	; (8008b68 <netif_set_link_up+0x64>)
 8008b1c:	f009 fb5a 	bl	80121d4 <iprintf>
 8008b20:	e01b      	b.n	8008b5a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b28:	f003 0304 	and.w	r3, r3, #4
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d114      	bne.n	8008b5a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b36:	f043 0304 	orr.w	r3, r3, #4
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008b42:	2103      	movs	r1, #3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7ff ff6b 	bl	8008a20 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <netif_set_link_up+0x56>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	08014ad0 	.word	0x08014ad0
 8008b64:	08014cb8 	.word	0x08014cb8
 8008b68:	08014b20 	.word	0x08014b20

08008b6c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d107      	bne.n	8008b8a <netif_set_link_down+0x1e>
 8008b7a:	4b11      	ldr	r3, [pc, #68]	; (8008bc0 <netif_set_link_down+0x54>)
 8008b7c:	f240 4206 	movw	r2, #1030	; 0x406
 8008b80:	4910      	ldr	r1, [pc, #64]	; (8008bc4 <netif_set_link_down+0x58>)
 8008b82:	4811      	ldr	r0, [pc, #68]	; (8008bc8 <netif_set_link_down+0x5c>)
 8008b84:	f009 fb26 	bl	80121d4 <iprintf>
 8008b88:	e017      	b.n	8008bba <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b90:	f003 0304 	and.w	r3, r3, #4
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d010      	beq.n	8008bba <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b9e:	f023 0304 	bic.w	r3, r3, #4
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <netif_set_link_down+0x4e>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	08014ad0 	.word	0x08014ad0
 8008bc4:	08014cdc 	.word	0x08014cdc
 8008bc8:	08014b20 	.word	0x08014b20

08008bcc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	61da      	str	r2, [r3, #28]
  }
}
 8008be2:	bf00      	nop
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b085      	sub	sp, #20
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008bfa:	f06f 030b 	mvn.w	r3, #11
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
	...

08008c0c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008c16:	79fb      	ldrb	r3, [r7, #7]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d013      	beq.n	8008c44 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008c1c:	4b0d      	ldr	r3, [pc, #52]	; (8008c54 <netif_get_by_index+0x48>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	e00c      	b.n	8008c3e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	79fa      	ldrb	r2, [r7, #7]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d101      	bne.n	8008c38 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	e006      	b.n	8008c46 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1ef      	bne.n	8008c24 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	2000aa6c 	.word	0x2000aa6c

08008c58 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <pbuf_free_ooseq+0x38>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008c64:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <pbuf_free_ooseq+0x3c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	607b      	str	r3, [r7, #4]
 8008c6a:	e00a      	b.n	8008c82 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f002 f9b1 	bl	800afdc <tcp_free_ooseq>
      return;
 8008c7a:	e005      	b.n	8008c88 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	607b      	str	r3, [r7, #4]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1f1      	bne.n	8008c6c <pbuf_free_ooseq+0x14>
    }
  }
}
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	2000aa75 	.word	0x2000aa75
 8008c94:	2000aa84 	.word	0x2000aa84

08008c98 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008c9c:	4b03      	ldr	r3, [pc, #12]	; (8008cac <pbuf_pool_is_empty+0x14>)
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008ca2:	bf00      	nop
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	2000aa75 	.word	0x2000aa75

08008cb0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	4611      	mov	r1, r2
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	80fb      	strh	r3, [r7, #6]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	88fa      	ldrh	r2, [r7, #6]
 8008cd6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	88ba      	ldrh	r2, [r7, #4]
 8008cdc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008cde:	8b3b      	ldrh	r3, [r7, #24]
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	7f3a      	ldrb	r2, [r7, #28]
 8008cea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	73da      	strb	r2, [r3, #15]
}
 8008cf8:	bf00      	nop
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08c      	sub	sp, #48	; 0x30
 8008d08:	af02      	add	r7, sp, #8
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	71fb      	strb	r3, [r7, #7]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	80bb      	strh	r3, [r7, #4]
 8008d12:	4613      	mov	r3, r2
 8008d14:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008d16:	79fb      	ldrb	r3, [r7, #7]
 8008d18:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008d1a:	887b      	ldrh	r3, [r7, #2]
 8008d1c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008d20:	d07f      	beq.n	8008e22 <pbuf_alloc+0x11e>
 8008d22:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008d26:	f300 80c8 	bgt.w	8008eba <pbuf_alloc+0x1b6>
 8008d2a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008d2e:	d010      	beq.n	8008d52 <pbuf_alloc+0x4e>
 8008d30:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008d34:	f300 80c1 	bgt.w	8008eba <pbuf_alloc+0x1b6>
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d002      	beq.n	8008d42 <pbuf_alloc+0x3e>
 8008d3c:	2b41      	cmp	r3, #65	; 0x41
 8008d3e:	f040 80bc 	bne.w	8008eba <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008d42:	887a      	ldrh	r2, [r7, #2]
 8008d44:	88bb      	ldrh	r3, [r7, #4]
 8008d46:	4619      	mov	r1, r3
 8008d48:	2000      	movs	r0, #0
 8008d4a:	f000 f8d1 	bl	8008ef0 <pbuf_alloc_reference>
 8008d4e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008d50:	e0bd      	b.n	8008ece <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008d52:	2300      	movs	r3, #0
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008d5a:	88bb      	ldrh	r3, [r7, #4]
 8008d5c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008d5e:	2008      	movs	r0, #8
 8008d60:	f7ff fbce 	bl	8008500 <memp_malloc>
 8008d64:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008d6c:	f7ff ff94 	bl	8008c98 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d002      	beq.n	8008d7c <pbuf_alloc+0x78>
            pbuf_free(p);
 8008d76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d78:	f000 faa8 	bl	80092cc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	e0a7      	b.n	8008ed0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008d80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d82:	3303      	adds	r3, #3
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	f023 0303 	bic.w	r3, r3, #3
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	8b7a      	ldrh	r2, [r7, #26]
 8008d94:	4293      	cmp	r3, r2
 8008d96:	bf28      	it	cs
 8008d98:	4613      	movcs	r3, r2
 8008d9a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008d9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d9e:	3310      	adds	r3, #16
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	4413      	add	r3, r2
 8008da4:	3303      	adds	r3, #3
 8008da6:	f023 0303 	bic.w	r3, r3, #3
 8008daa:	4618      	mov	r0, r3
 8008dac:	89f9      	ldrh	r1, [r7, #14]
 8008dae:	8b7a      	ldrh	r2, [r7, #26]
 8008db0:	2300      	movs	r3, #0
 8008db2:	9301      	str	r3, [sp, #4]
 8008db4:	887b      	ldrh	r3, [r7, #2]
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	460b      	mov	r3, r1
 8008dba:	4601      	mov	r1, r0
 8008dbc:	6938      	ldr	r0, [r7, #16]
 8008dbe:	f7ff ff77 	bl	8008cb0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f003 0303 	and.w	r3, r3, #3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d006      	beq.n	8008ddc <pbuf_alloc+0xd8>
 8008dce:	4b42      	ldr	r3, [pc, #264]	; (8008ed8 <pbuf_alloc+0x1d4>)
 8008dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008dd4:	4941      	ldr	r1, [pc, #260]	; (8008edc <pbuf_alloc+0x1d8>)
 8008dd6:	4842      	ldr	r0, [pc, #264]	; (8008ee0 <pbuf_alloc+0x1dc>)
 8008dd8:	f009 f9fc 	bl	80121d4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008ddc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008dde:	3303      	adds	r3, #3
 8008de0:	f023 0303 	bic.w	r3, r3, #3
 8008de4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008de8:	d106      	bne.n	8008df8 <pbuf_alloc+0xf4>
 8008dea:	4b3b      	ldr	r3, [pc, #236]	; (8008ed8 <pbuf_alloc+0x1d4>)
 8008dec:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008df0:	493c      	ldr	r1, [pc, #240]	; (8008ee4 <pbuf_alloc+0x1e0>)
 8008df2:	483b      	ldr	r0, [pc, #236]	; (8008ee0 <pbuf_alloc+0x1dc>)
 8008df4:	f009 f9ee 	bl	80121d4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d102      	bne.n	8008e04 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	627b      	str	r3, [r7, #36]	; 0x24
 8008e02:	e002      	b.n	8008e0a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008e0e:	8b7a      	ldrh	r2, [r7, #26]
 8008e10:	89fb      	ldrh	r3, [r7, #14]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008e1a:	8b7b      	ldrh	r3, [r7, #26]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d19e      	bne.n	8008d5e <pbuf_alloc+0x5a>
      break;
 8008e20:	e055      	b.n	8008ece <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008e22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e24:	3303      	adds	r3, #3
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	f023 0303 	bic.w	r3, r3, #3
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	88bb      	ldrh	r3, [r7, #4]
 8008e30:	3303      	adds	r3, #3
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	f023 0303 	bic.w	r3, r3, #3
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	4413      	add	r3, r2
 8008e3c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008e3e:	8b3b      	ldrh	r3, [r7, #24]
 8008e40:	3310      	adds	r3, #16
 8008e42:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008e44:	8b3a      	ldrh	r2, [r7, #24]
 8008e46:	88bb      	ldrh	r3, [r7, #4]
 8008e48:	3303      	adds	r3, #3
 8008e4a:	f023 0303 	bic.w	r3, r3, #3
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d306      	bcc.n	8008e60 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008e52:	8afa      	ldrh	r2, [r7, #22]
 8008e54:	88bb      	ldrh	r3, [r7, #4]
 8008e56:	3303      	adds	r3, #3
 8008e58:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d201      	bcs.n	8008e64 <pbuf_alloc+0x160>
        return NULL;
 8008e60:	2300      	movs	r3, #0
 8008e62:	e035      	b.n	8008ed0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008e64:	8afb      	ldrh	r3, [r7, #22]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7ff f9ba 	bl	80081e0 <mem_malloc>
 8008e6c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <pbuf_alloc+0x174>
        return NULL;
 8008e74:	2300      	movs	r3, #0
 8008e76:	e02b      	b.n	8008ed0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008e78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e7a:	3310      	adds	r3, #16
 8008e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7e:	4413      	add	r3, r2
 8008e80:	3303      	adds	r3, #3
 8008e82:	f023 0303 	bic.w	r3, r3, #3
 8008e86:	4618      	mov	r0, r3
 8008e88:	88b9      	ldrh	r1, [r7, #4]
 8008e8a:	88ba      	ldrh	r2, [r7, #4]
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	9301      	str	r3, [sp, #4]
 8008e90:	887b      	ldrh	r3, [r7, #2]
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	460b      	mov	r3, r1
 8008e96:	4601      	mov	r1, r0
 8008e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e9a:	f7ff ff09 	bl	8008cb0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f003 0303 	and.w	r3, r3, #3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d010      	beq.n	8008ecc <pbuf_alloc+0x1c8>
 8008eaa:	4b0b      	ldr	r3, [pc, #44]	; (8008ed8 <pbuf_alloc+0x1d4>)
 8008eac:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008eb0:	490d      	ldr	r1, [pc, #52]	; (8008ee8 <pbuf_alloc+0x1e4>)
 8008eb2:	480b      	ldr	r0, [pc, #44]	; (8008ee0 <pbuf_alloc+0x1dc>)
 8008eb4:	f009 f98e 	bl	80121d4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008eb8:	e008      	b.n	8008ecc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008eba:	4b07      	ldr	r3, [pc, #28]	; (8008ed8 <pbuf_alloc+0x1d4>)
 8008ebc:	f240 1227 	movw	r2, #295	; 0x127
 8008ec0:	490a      	ldr	r1, [pc, #40]	; (8008eec <pbuf_alloc+0x1e8>)
 8008ec2:	4807      	ldr	r0, [pc, #28]	; (8008ee0 <pbuf_alloc+0x1dc>)
 8008ec4:	f009 f986 	bl	80121d4 <iprintf>
      return NULL;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e001      	b.n	8008ed0 <pbuf_alloc+0x1cc>
      break;
 8008ecc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3728      	adds	r7, #40	; 0x28
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	08014d00 	.word	0x08014d00
 8008edc:	08014d30 	.word	0x08014d30
 8008ee0:	08014d60 	.word	0x08014d60
 8008ee4:	08014d88 	.word	0x08014d88
 8008ee8:	08014dbc 	.word	0x08014dbc
 8008eec:	08014de8 	.word	0x08014de8

08008ef0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af02      	add	r7, sp, #8
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	807b      	strh	r3, [r7, #2]
 8008efc:	4613      	mov	r3, r2
 8008efe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008f00:	883b      	ldrh	r3, [r7, #0]
 8008f02:	2b41      	cmp	r3, #65	; 0x41
 8008f04:	d009      	beq.n	8008f1a <pbuf_alloc_reference+0x2a>
 8008f06:	883b      	ldrh	r3, [r7, #0]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d006      	beq.n	8008f1a <pbuf_alloc_reference+0x2a>
 8008f0c:	4b0f      	ldr	r3, [pc, #60]	; (8008f4c <pbuf_alloc_reference+0x5c>)
 8008f0e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008f12:	490f      	ldr	r1, [pc, #60]	; (8008f50 <pbuf_alloc_reference+0x60>)
 8008f14:	480f      	ldr	r0, [pc, #60]	; (8008f54 <pbuf_alloc_reference+0x64>)
 8008f16:	f009 f95d 	bl	80121d4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008f1a:	2007      	movs	r0, #7
 8008f1c:	f7ff faf0 	bl	8008500 <memp_malloc>
 8008f20:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d101      	bne.n	8008f2c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	e00b      	b.n	8008f44 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008f2c:	8879      	ldrh	r1, [r7, #2]
 8008f2e:	887a      	ldrh	r2, [r7, #2]
 8008f30:	2300      	movs	r3, #0
 8008f32:	9301      	str	r3, [sp, #4]
 8008f34:	883b      	ldrh	r3, [r7, #0]
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f7ff feb7 	bl	8008cb0 <pbuf_init_alloced_pbuf>
  return p;
 8008f42:	68fb      	ldr	r3, [r7, #12]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	08014d00 	.word	0x08014d00
 8008f50:	08014e04 	.word	0x08014e04
 8008f54:	08014d60 	.word	0x08014d60

08008f58 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af02      	add	r7, sp, #8
 8008f5e:	607b      	str	r3, [r7, #4]
 8008f60:	4603      	mov	r3, r0
 8008f62:	73fb      	strb	r3, [r7, #15]
 8008f64:	460b      	mov	r3, r1
 8008f66:	81bb      	strh	r3, [r7, #12]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008f70:	8a7b      	ldrh	r3, [r7, #18]
 8008f72:	3303      	adds	r3, #3
 8008f74:	f023 0203 	bic.w	r2, r3, #3
 8008f78:	89bb      	ldrh	r3, [r7, #12]
 8008f7a:	441a      	add	r2, r3
 8008f7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d901      	bls.n	8008f86 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008f82:	2300      	movs	r3, #0
 8008f84:	e018      	b.n	8008fb8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008f86:	6a3b      	ldr	r3, [r7, #32]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d007      	beq.n	8008f9c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008f8c:	8a7b      	ldrh	r3, [r7, #18]
 8008f8e:	3303      	adds	r3, #3
 8008f90:	f023 0303 	bic.w	r3, r3, #3
 8008f94:	6a3a      	ldr	r2, [r7, #32]
 8008f96:	4413      	add	r3, r2
 8008f98:	617b      	str	r3, [r7, #20]
 8008f9a:	e001      	b.n	8008fa0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	89b9      	ldrh	r1, [r7, #12]
 8008fa4:	89ba      	ldrh	r2, [r7, #12]
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	897b      	ldrh	r3, [r7, #10]
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	460b      	mov	r3, r1
 8008fb0:	6979      	ldr	r1, [r7, #20]
 8008fb2:	f7ff fe7d 	bl	8008cb0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008fb6:	687b      	ldr	r3, [r7, #4]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d106      	bne.n	8008fe0 <pbuf_realloc+0x20>
 8008fd2:	4b3a      	ldr	r3, [pc, #232]	; (80090bc <pbuf_realloc+0xfc>)
 8008fd4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008fd8:	4939      	ldr	r1, [pc, #228]	; (80090c0 <pbuf_realloc+0x100>)
 8008fda:	483a      	ldr	r0, [pc, #232]	; (80090c4 <pbuf_realloc+0x104>)
 8008fdc:	f009 f8fa 	bl	80121d4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	891b      	ldrh	r3, [r3, #8]
 8008fe4:	887a      	ldrh	r2, [r7, #2]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d263      	bcs.n	80090b2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	891a      	ldrh	r2, [r3, #8]
 8008fee:	887b      	ldrh	r3, [r7, #2]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008ff4:	887b      	ldrh	r3, [r7, #2]
 8008ff6:	817b      	strh	r3, [r7, #10]
  q = p;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008ffc:	e018      	b.n	8009030 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	895b      	ldrh	r3, [r3, #10]
 8009002:	897a      	ldrh	r2, [r7, #10]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	891a      	ldrh	r2, [r3, #8]
 800900c:	893b      	ldrh	r3, [r7, #8]
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	b29a      	uxth	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d106      	bne.n	8009030 <pbuf_realloc+0x70>
 8009022:	4b26      	ldr	r3, [pc, #152]	; (80090bc <pbuf_realloc+0xfc>)
 8009024:	f240 12af 	movw	r2, #431	; 0x1af
 8009028:	4927      	ldr	r1, [pc, #156]	; (80090c8 <pbuf_realloc+0x108>)
 800902a:	4826      	ldr	r0, [pc, #152]	; (80090c4 <pbuf_realloc+0x104>)
 800902c:	f009 f8d2 	bl	80121d4 <iprintf>
  while (rem_len > q->len) {
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	895b      	ldrh	r3, [r3, #10]
 8009034:	897a      	ldrh	r2, [r7, #10]
 8009036:	429a      	cmp	r2, r3
 8009038:	d8e1      	bhi.n	8008ffe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	7b1b      	ldrb	r3, [r3, #12]
 800903e:	f003 030f 	and.w	r3, r3, #15
 8009042:	2b00      	cmp	r3, #0
 8009044:	d121      	bne.n	800908a <pbuf_realloc+0xca>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	895b      	ldrh	r3, [r3, #10]
 800904a:	897a      	ldrh	r2, [r7, #10]
 800904c:	429a      	cmp	r2, r3
 800904e:	d01c      	beq.n	800908a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	7b5b      	ldrb	r3, [r3, #13]
 8009054:	f003 0302 	and.w	r3, r3, #2
 8009058:	2b00      	cmp	r3, #0
 800905a:	d116      	bne.n	800908a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	b29a      	uxth	r2, r3
 8009066:	897b      	ldrh	r3, [r7, #10]
 8009068:	4413      	add	r3, r2
 800906a:	b29b      	uxth	r3, r3
 800906c:	4619      	mov	r1, r3
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f7fe ffba 	bl	8007fe8 <mem_trim>
 8009074:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d106      	bne.n	800908a <pbuf_realloc+0xca>
 800907c:	4b0f      	ldr	r3, [pc, #60]	; (80090bc <pbuf_realloc+0xfc>)
 800907e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009082:	4912      	ldr	r1, [pc, #72]	; (80090cc <pbuf_realloc+0x10c>)
 8009084:	480f      	ldr	r0, [pc, #60]	; (80090c4 <pbuf_realloc+0x104>)
 8009086:	f009 f8a5 	bl	80121d4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	897a      	ldrh	r2, [r7, #10]
 800908e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	895a      	ldrh	r2, [r3, #10]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d004      	beq.n	80090aa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f000 f911 	bl	80092cc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]
 80090b0:	e000      	b.n	80090b4 <pbuf_realloc+0xf4>
    return;
 80090b2:	bf00      	nop

}
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	08014d00 	.word	0x08014d00
 80090c0:	08014e18 	.word	0x08014e18
 80090c4:	08014d60 	.word	0x08014d60
 80090c8:	08014e30 	.word	0x08014e30
 80090cc:	08014e48 	.word	0x08014e48

080090d0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	4613      	mov	r3, r2
 80090dc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d106      	bne.n	80090f2 <pbuf_add_header_impl+0x22>
 80090e4:	4b2b      	ldr	r3, [pc, #172]	; (8009194 <pbuf_add_header_impl+0xc4>)
 80090e6:	f240 12df 	movw	r2, #479	; 0x1df
 80090ea:	492b      	ldr	r1, [pc, #172]	; (8009198 <pbuf_add_header_impl+0xc8>)
 80090ec:	482b      	ldr	r0, [pc, #172]	; (800919c <pbuf_add_header_impl+0xcc>)
 80090ee:	f009 f871 	bl	80121d4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d003      	beq.n	8009100 <pbuf_add_header_impl+0x30>
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090fe:	d301      	bcc.n	8009104 <pbuf_add_header_impl+0x34>
    return 1;
 8009100:	2301      	movs	r3, #1
 8009102:	e043      	b.n	800918c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <pbuf_add_header_impl+0x3e>
    return 0;
 800910a:	2300      	movs	r3, #0
 800910c:	e03e      	b.n	800918c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	891a      	ldrh	r2, [r3, #8]
 8009116:	8a7b      	ldrh	r3, [r7, #18]
 8009118:	4413      	add	r3, r2
 800911a:	b29b      	uxth	r3, r3
 800911c:	8a7a      	ldrh	r2, [r7, #18]
 800911e:	429a      	cmp	r2, r3
 8009120:	d901      	bls.n	8009126 <pbuf_add_header_impl+0x56>
    return 1;
 8009122:	2301      	movs	r3, #1
 8009124:	e032      	b.n	800918c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	7b1b      	ldrb	r3, [r3, #12]
 800912a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800912c:	8a3b      	ldrh	r3, [r7, #16]
 800912e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00c      	beq.n	8009150 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	425b      	negs	r3, r3
 800913e:	4413      	add	r3, r2
 8009140:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	3310      	adds	r3, #16
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	429a      	cmp	r2, r3
 800914a:	d20d      	bcs.n	8009168 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800914c:	2301      	movs	r3, #1
 800914e:	e01d      	b.n	800918c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009150:	79fb      	ldrb	r3, [r7, #7]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d006      	beq.n	8009164 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	425b      	negs	r3, r3
 800915e:	4413      	add	r3, r2
 8009160:	617b      	str	r3, [r7, #20]
 8009162:	e001      	b.n	8009168 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009164:	2301      	movs	r3, #1
 8009166:	e011      	b.n	800918c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	895a      	ldrh	r2, [r3, #10]
 8009172:	8a7b      	ldrh	r3, [r7, #18]
 8009174:	4413      	add	r3, r2
 8009176:	b29a      	uxth	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	891a      	ldrh	r2, [r3, #8]
 8009180:	8a7b      	ldrh	r3, [r7, #18]
 8009182:	4413      	add	r3, r2
 8009184:	b29a      	uxth	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	811a      	strh	r2, [r3, #8]


  return 0;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3718      	adds	r7, #24
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	08014d00 	.word	0x08014d00
 8009198:	08014e64 	.word	0x08014e64
 800919c:	08014d60 	.word	0x08014d60

080091a0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80091aa:	2200      	movs	r2, #0
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7ff ff8e 	bl	80090d0 <pbuf_add_header_impl>
 80091b4:	4603      	mov	r3, r0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d106      	bne.n	80091de <pbuf_remove_header+0x1e>
 80091d0:	4b20      	ldr	r3, [pc, #128]	; (8009254 <pbuf_remove_header+0x94>)
 80091d2:	f240 224b 	movw	r2, #587	; 0x24b
 80091d6:	4920      	ldr	r1, [pc, #128]	; (8009258 <pbuf_remove_header+0x98>)
 80091d8:	4820      	ldr	r0, [pc, #128]	; (800925c <pbuf_remove_header+0x9c>)
 80091da:	f008 fffb 	bl	80121d4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d003      	beq.n	80091ec <pbuf_remove_header+0x2c>
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091ea:	d301      	bcc.n	80091f0 <pbuf_remove_header+0x30>
    return 1;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e02c      	b.n	800924a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <pbuf_remove_header+0x3a>
    return 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	e027      	b.n	800924a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	895b      	ldrh	r3, [r3, #10]
 8009202:	89fa      	ldrh	r2, [r7, #14]
 8009204:	429a      	cmp	r2, r3
 8009206:	d908      	bls.n	800921a <pbuf_remove_header+0x5a>
 8009208:	4b12      	ldr	r3, [pc, #72]	; (8009254 <pbuf_remove_header+0x94>)
 800920a:	f240 2255 	movw	r2, #597	; 0x255
 800920e:	4914      	ldr	r1, [pc, #80]	; (8009260 <pbuf_remove_header+0xa0>)
 8009210:	4812      	ldr	r0, [pc, #72]	; (800925c <pbuf_remove_header+0x9c>)
 8009212:	f008 ffdf 	bl	80121d4 <iprintf>
 8009216:	2301      	movs	r3, #1
 8009218:	e017      	b.n	800924a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	441a      	add	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	895a      	ldrh	r2, [r3, #10]
 8009230:	89fb      	ldrh	r3, [r7, #14]
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	b29a      	uxth	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	891a      	ldrh	r2, [r3, #8]
 800923e:	89fb      	ldrh	r3, [r7, #14]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	b29a      	uxth	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	08014d00 	.word	0x08014d00
 8009258:	08014e64 	.word	0x08014e64
 800925c:	08014d60 	.word	0x08014d60
 8009260:	08014e70 	.word	0x08014e70

08009264 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	807b      	strh	r3, [r7, #2]
 8009270:	4613      	mov	r3, r2
 8009272:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009274:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009278:	2b00      	cmp	r3, #0
 800927a:	da08      	bge.n	800928e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800927c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009280:	425b      	negs	r3, r3
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7ff ff9b 	bl	80091c0 <pbuf_remove_header>
 800928a:	4603      	mov	r3, r0
 800928c:	e007      	b.n	800929e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800928e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009292:	787a      	ldrb	r2, [r7, #1]
 8009294:	4619      	mov	r1, r3
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7ff ff1a 	bl	80090d0 <pbuf_add_header_impl>
 800929c:	4603      	mov	r3, r0
  }
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b082      	sub	sp, #8
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	460b      	mov	r3, r1
 80092b0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80092b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092b6:	2201      	movs	r2, #1
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7ff ffd2 	bl	8009264 <pbuf_header_impl>
 80092c0:	4603      	mov	r3, r0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
	...

080092cc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10b      	bne.n	80092f2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d106      	bne.n	80092ee <pbuf_free+0x22>
 80092e0:	4b38      	ldr	r3, [pc, #224]	; (80093c4 <pbuf_free+0xf8>)
 80092e2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80092e6:	4938      	ldr	r1, [pc, #224]	; (80093c8 <pbuf_free+0xfc>)
 80092e8:	4838      	ldr	r0, [pc, #224]	; (80093cc <pbuf_free+0x100>)
 80092ea:	f008 ff73 	bl	80121d4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80092ee:	2300      	movs	r3, #0
 80092f0:	e063      	b.n	80093ba <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80092f6:	e05c      	b.n	80093b2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	7b9b      	ldrb	r3, [r3, #14]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d106      	bne.n	800930e <pbuf_free+0x42>
 8009300:	4b30      	ldr	r3, [pc, #192]	; (80093c4 <pbuf_free+0xf8>)
 8009302:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009306:	4932      	ldr	r1, [pc, #200]	; (80093d0 <pbuf_free+0x104>)
 8009308:	4830      	ldr	r0, [pc, #192]	; (80093cc <pbuf_free+0x100>)
 800930a:	f008 ff63 	bl	80121d4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	7b9b      	ldrb	r3, [r3, #14]
 8009312:	3b01      	subs	r3, #1
 8009314:	b2da      	uxtb	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	739a      	strb	r2, [r3, #14]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	7b9b      	ldrb	r3, [r3, #14]
 800931e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009320:	7dbb      	ldrb	r3, [r7, #22]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d143      	bne.n	80093ae <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	7b1b      	ldrb	r3, [r3, #12]
 8009330:	f003 030f 	and.w	r3, r3, #15
 8009334:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	7b5b      	ldrb	r3, [r3, #13]
 800933a:	f003 0302 	and.w	r3, r3, #2
 800933e:	2b00      	cmp	r3, #0
 8009340:	d011      	beq.n	8009366 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d106      	bne.n	800935c <pbuf_free+0x90>
 800934e:	4b1d      	ldr	r3, [pc, #116]	; (80093c4 <pbuf_free+0xf8>)
 8009350:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009354:	491f      	ldr	r1, [pc, #124]	; (80093d4 <pbuf_free+0x108>)
 8009356:	481d      	ldr	r0, [pc, #116]	; (80093cc <pbuf_free+0x100>)
 8009358:	f008 ff3c 	bl	80121d4 <iprintf>
        pc->custom_free_function(p);
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	4798      	blx	r3
 8009364:	e01d      	b.n	80093a2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	2b02      	cmp	r3, #2
 800936a:	d104      	bne.n	8009376 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800936c:	6879      	ldr	r1, [r7, #4]
 800936e:	2008      	movs	r0, #8
 8009370:	f7ff f936 	bl	80085e0 <memp_free>
 8009374:	e015      	b.n	80093a2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d104      	bne.n	8009386 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800937c:	6879      	ldr	r1, [r7, #4]
 800937e:	2007      	movs	r0, #7
 8009380:	f7ff f92e 	bl	80085e0 <memp_free>
 8009384:	e00d      	b.n	80093a2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009386:	7bfb      	ldrb	r3, [r7, #15]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d103      	bne.n	8009394 <pbuf_free+0xc8>
          mem_free(p);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7fe fdc1 	bl	8007f14 <mem_free>
 8009392:	e006      	b.n	80093a2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009394:	4b0b      	ldr	r3, [pc, #44]	; (80093c4 <pbuf_free+0xf8>)
 8009396:	f240 320f 	movw	r2, #783	; 0x30f
 800939a:	490f      	ldr	r1, [pc, #60]	; (80093d8 <pbuf_free+0x10c>)
 800939c:	480b      	ldr	r0, [pc, #44]	; (80093cc <pbuf_free+0x100>)
 800939e:	f008 ff19 	bl	80121d4 <iprintf>
        }
      }
      count++;
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	3301      	adds	r3, #1
 80093a6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	607b      	str	r3, [r7, #4]
 80093ac:	e001      	b.n	80093b2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d19f      	bne.n	80092f8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3718      	adds	r7, #24
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	08014d00 	.word	0x08014d00
 80093c8:	08014e64 	.word	0x08014e64
 80093cc:	08014d60 	.word	0x08014d60
 80093d0:	08014e90 	.word	0x08014e90
 80093d4:	08014ea8 	.word	0x08014ea8
 80093d8:	08014ecc 	.word	0x08014ecc

080093dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80093e8:	e005      	b.n	80093f6 <pbuf_clen+0x1a>
    ++len;
 80093ea:	89fb      	ldrh	r3, [r7, #14]
 80093ec:	3301      	adds	r3, #1
 80093ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1f6      	bne.n	80093ea <pbuf_clen+0xe>
  }
  return len;
 80093fc:	89fb      	ldrh	r3, [r7, #14]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
	...

0800940c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d010      	beq.n	800943c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	7b9b      	ldrb	r3, [r3, #14]
 800941e:	3301      	adds	r3, #1
 8009420:	b2da      	uxtb	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	7b9b      	ldrb	r3, [r3, #14]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d106      	bne.n	800943c <pbuf_ref+0x30>
 800942e:	4b05      	ldr	r3, [pc, #20]	; (8009444 <pbuf_ref+0x38>)
 8009430:	f240 3242 	movw	r2, #834	; 0x342
 8009434:	4904      	ldr	r1, [pc, #16]	; (8009448 <pbuf_ref+0x3c>)
 8009436:	4805      	ldr	r0, [pc, #20]	; (800944c <pbuf_ref+0x40>)
 8009438:	f008 fecc 	bl	80121d4 <iprintf>
  }
}
 800943c:	bf00      	nop
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	08014d00 	.word	0x08014d00
 8009448:	08014ee0 	.word	0x08014ee0
 800944c:	08014d60 	.word	0x08014d60

08009450 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d002      	beq.n	8009466 <pbuf_cat+0x16>
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d107      	bne.n	8009476 <pbuf_cat+0x26>
 8009466:	4b20      	ldr	r3, [pc, #128]	; (80094e8 <pbuf_cat+0x98>)
 8009468:	f240 3259 	movw	r2, #857	; 0x359
 800946c:	491f      	ldr	r1, [pc, #124]	; (80094ec <pbuf_cat+0x9c>)
 800946e:	4820      	ldr	r0, [pc, #128]	; (80094f0 <pbuf_cat+0xa0>)
 8009470:	f008 feb0 	bl	80121d4 <iprintf>
 8009474:	e034      	b.n	80094e0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	60fb      	str	r3, [r7, #12]
 800947a:	e00a      	b.n	8009492 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	891a      	ldrh	r2, [r3, #8]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	891b      	ldrh	r3, [r3, #8]
 8009484:	4413      	add	r3, r2
 8009486:	b29a      	uxth	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60fb      	str	r3, [r7, #12]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1f0      	bne.n	800947c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	891a      	ldrh	r2, [r3, #8]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	895b      	ldrh	r3, [r3, #10]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d006      	beq.n	80094b4 <pbuf_cat+0x64>
 80094a6:	4b10      	ldr	r3, [pc, #64]	; (80094e8 <pbuf_cat+0x98>)
 80094a8:	f240 3262 	movw	r2, #866	; 0x362
 80094ac:	4911      	ldr	r1, [pc, #68]	; (80094f4 <pbuf_cat+0xa4>)
 80094ae:	4810      	ldr	r0, [pc, #64]	; (80094f0 <pbuf_cat+0xa0>)
 80094b0:	f008 fe90 	bl	80121d4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d006      	beq.n	80094ca <pbuf_cat+0x7a>
 80094bc:	4b0a      	ldr	r3, [pc, #40]	; (80094e8 <pbuf_cat+0x98>)
 80094be:	f240 3263 	movw	r2, #867	; 0x363
 80094c2:	490d      	ldr	r1, [pc, #52]	; (80094f8 <pbuf_cat+0xa8>)
 80094c4:	480a      	ldr	r0, [pc, #40]	; (80094f0 <pbuf_cat+0xa0>)
 80094c6:	f008 fe85 	bl	80121d4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	891a      	ldrh	r2, [r3, #8]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	891b      	ldrh	r3, [r3, #8]
 80094d2:	4413      	add	r3, r2
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	08014d00 	.word	0x08014d00
 80094ec:	08014ef4 	.word	0x08014ef4
 80094f0:	08014d60 	.word	0x08014d60
 80094f4:	08014f2c 	.word	0x08014f2c
 80094f8:	08014f5c 	.word	0x08014f5c

080094fc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7ff ffa1 	bl	8009450 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800950e:	6838      	ldr	r0, [r7, #0]
 8009510:	f7ff ff7c 	bl	800940c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009514:	bf00      	nop
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009526:	2300      	movs	r3, #0
 8009528:	617b      	str	r3, [r7, #20]
 800952a:	2300      	movs	r3, #0
 800952c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d008      	beq.n	8009546 <pbuf_copy+0x2a>
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d005      	beq.n	8009546 <pbuf_copy+0x2a>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	891a      	ldrh	r2, [r3, #8]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	891b      	ldrh	r3, [r3, #8]
 8009542:	429a      	cmp	r2, r3
 8009544:	d209      	bcs.n	800955a <pbuf_copy+0x3e>
 8009546:	4b57      	ldr	r3, [pc, #348]	; (80096a4 <pbuf_copy+0x188>)
 8009548:	f240 32c9 	movw	r2, #969	; 0x3c9
 800954c:	4956      	ldr	r1, [pc, #344]	; (80096a8 <pbuf_copy+0x18c>)
 800954e:	4857      	ldr	r0, [pc, #348]	; (80096ac <pbuf_copy+0x190>)
 8009550:	f008 fe40 	bl	80121d4 <iprintf>
 8009554:	f06f 030f 	mvn.w	r3, #15
 8009558:	e09f      	b.n	800969a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	895b      	ldrh	r3, [r3, #10]
 800955e:	461a      	mov	r2, r3
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	1ad2      	subs	r2, r2, r3
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	895b      	ldrh	r3, [r3, #10]
 8009568:	4619      	mov	r1, r3
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	1acb      	subs	r3, r1, r3
 800956e:	429a      	cmp	r2, r3
 8009570:	d306      	bcc.n	8009580 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	895b      	ldrh	r3, [r3, #10]
 8009576:	461a      	mov	r2, r3
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	60fb      	str	r3, [r7, #12]
 800957e:	e005      	b.n	800958c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	895b      	ldrh	r3, [r3, #10]
 8009584:	461a      	mov	r2, r3
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	18d0      	adds	r0, r2, r3
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	4413      	add	r3, r2
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	4619      	mov	r1, r3
 80095a0:	f009 fd07 	bl	8012fb2 <memcpy>
    offset_to += len;
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	4413      	add	r3, r2
 80095aa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	4413      	add	r3, r2
 80095b2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	895b      	ldrh	r3, [r3, #10]
 80095b8:	461a      	mov	r2, r3
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	4293      	cmp	r3, r2
 80095be:	d906      	bls.n	80095ce <pbuf_copy+0xb2>
 80095c0:	4b38      	ldr	r3, [pc, #224]	; (80096a4 <pbuf_copy+0x188>)
 80095c2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80095c6:	493a      	ldr	r1, [pc, #232]	; (80096b0 <pbuf_copy+0x194>)
 80095c8:	4838      	ldr	r0, [pc, #224]	; (80096ac <pbuf_copy+0x190>)
 80095ca:	f008 fe03 	bl	80121d4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	895b      	ldrh	r3, [r3, #10]
 80095d2:	461a      	mov	r2, r3
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d906      	bls.n	80095e8 <pbuf_copy+0xcc>
 80095da:	4b32      	ldr	r3, [pc, #200]	; (80096a4 <pbuf_copy+0x188>)
 80095dc:	f240 32da 	movw	r2, #986	; 0x3da
 80095e0:	4934      	ldr	r1, [pc, #208]	; (80096b4 <pbuf_copy+0x198>)
 80095e2:	4832      	ldr	r0, [pc, #200]	; (80096ac <pbuf_copy+0x190>)
 80095e4:	f008 fdf6 	bl	80121d4 <iprintf>
    if (offset_from >= p_from->len) {
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	895b      	ldrh	r3, [r3, #10]
 80095ec:	461a      	mov	r2, r3
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d304      	bcc.n	80095fe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80095f4:	2300      	movs	r3, #0
 80095f6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	895b      	ldrh	r3, [r3, #10]
 8009602:	461a      	mov	r2, r3
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	4293      	cmp	r3, r2
 8009608:	d114      	bne.n	8009634 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800960a:	2300      	movs	r3, #0
 800960c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10c      	bne.n	8009634 <pbuf_copy+0x118>
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d009      	beq.n	8009634 <pbuf_copy+0x118>
 8009620:	4b20      	ldr	r3, [pc, #128]	; (80096a4 <pbuf_copy+0x188>)
 8009622:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009626:	4924      	ldr	r1, [pc, #144]	; (80096b8 <pbuf_copy+0x19c>)
 8009628:	4820      	ldr	r0, [pc, #128]	; (80096ac <pbuf_copy+0x190>)
 800962a:	f008 fdd3 	bl	80121d4 <iprintf>
 800962e:	f06f 030f 	mvn.w	r3, #15
 8009632:	e032      	b.n	800969a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d013      	beq.n	8009662 <pbuf_copy+0x146>
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	895a      	ldrh	r2, [r3, #10]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	891b      	ldrh	r3, [r3, #8]
 8009642:	429a      	cmp	r2, r3
 8009644:	d10d      	bne.n	8009662 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d009      	beq.n	8009662 <pbuf_copy+0x146>
 800964e:	4b15      	ldr	r3, [pc, #84]	; (80096a4 <pbuf_copy+0x188>)
 8009650:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009654:	4919      	ldr	r1, [pc, #100]	; (80096bc <pbuf_copy+0x1a0>)
 8009656:	4815      	ldr	r0, [pc, #84]	; (80096ac <pbuf_copy+0x190>)
 8009658:	f008 fdbc 	bl	80121d4 <iprintf>
 800965c:	f06f 0305 	mvn.w	r3, #5
 8009660:	e01b      	b.n	800969a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d013      	beq.n	8009690 <pbuf_copy+0x174>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	895a      	ldrh	r2, [r3, #10]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	891b      	ldrh	r3, [r3, #8]
 8009670:	429a      	cmp	r2, r3
 8009672:	d10d      	bne.n	8009690 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d009      	beq.n	8009690 <pbuf_copy+0x174>
 800967c:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <pbuf_copy+0x188>)
 800967e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009682:	490e      	ldr	r1, [pc, #56]	; (80096bc <pbuf_copy+0x1a0>)
 8009684:	4809      	ldr	r0, [pc, #36]	; (80096ac <pbuf_copy+0x190>)
 8009686:	f008 fda5 	bl	80121d4 <iprintf>
 800968a:	f06f 0305 	mvn.w	r3, #5
 800968e:	e004      	b.n	800969a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	f47f af61 	bne.w	800955a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	08014d00 	.word	0x08014d00
 80096a8:	08014fa8 	.word	0x08014fa8
 80096ac:	08014d60 	.word	0x08014d60
 80096b0:	08014fd8 	.word	0x08014fd8
 80096b4:	08014ff0 	.word	0x08014ff0
 80096b8:	0801500c 	.word	0x0801500c
 80096bc:	0801501c 	.word	0x0801501c

080096c0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b088      	sub	sp, #32
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	4611      	mov	r1, r2
 80096cc:	461a      	mov	r2, r3
 80096ce:	460b      	mov	r3, r1
 80096d0:	80fb      	strh	r3, [r7, #6]
 80096d2:	4613      	mov	r3, r2
 80096d4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d108      	bne.n	80096f6 <pbuf_copy_partial+0x36>
 80096e4:	4b2b      	ldr	r3, [pc, #172]	; (8009794 <pbuf_copy_partial+0xd4>)
 80096e6:	f240 420a 	movw	r2, #1034	; 0x40a
 80096ea:	492b      	ldr	r1, [pc, #172]	; (8009798 <pbuf_copy_partial+0xd8>)
 80096ec:	482b      	ldr	r0, [pc, #172]	; (800979c <pbuf_copy_partial+0xdc>)
 80096ee:	f008 fd71 	bl	80121d4 <iprintf>
 80096f2:	2300      	movs	r3, #0
 80096f4:	e04a      	b.n	800978c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d108      	bne.n	800970e <pbuf_copy_partial+0x4e>
 80096fc:	4b25      	ldr	r3, [pc, #148]	; (8009794 <pbuf_copy_partial+0xd4>)
 80096fe:	f240 420b 	movw	r2, #1035	; 0x40b
 8009702:	4927      	ldr	r1, [pc, #156]	; (80097a0 <pbuf_copy_partial+0xe0>)
 8009704:	4825      	ldr	r0, [pc, #148]	; (800979c <pbuf_copy_partial+0xdc>)
 8009706:	f008 fd65 	bl	80121d4 <iprintf>
 800970a:	2300      	movs	r3, #0
 800970c:	e03e      	b.n	800978c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	61fb      	str	r3, [r7, #28]
 8009712:	e034      	b.n	800977e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009714:	88bb      	ldrh	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00a      	beq.n	8009730 <pbuf_copy_partial+0x70>
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	895b      	ldrh	r3, [r3, #10]
 800971e:	88ba      	ldrh	r2, [r7, #4]
 8009720:	429a      	cmp	r2, r3
 8009722:	d305      	bcc.n	8009730 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	895b      	ldrh	r3, [r3, #10]
 8009728:	88ba      	ldrh	r2, [r7, #4]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	80bb      	strh	r3, [r7, #4]
 800972e:	e023      	b.n	8009778 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	895a      	ldrh	r2, [r3, #10]
 8009734:	88bb      	ldrh	r3, [r7, #4]
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800973a:	8b3a      	ldrh	r2, [r7, #24]
 800973c:	88fb      	ldrh	r3, [r7, #6]
 800973e:	429a      	cmp	r2, r3
 8009740:	d901      	bls.n	8009746 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009742:	88fb      	ldrh	r3, [r7, #6]
 8009744:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009746:	8b7b      	ldrh	r3, [r7, #26]
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	18d0      	adds	r0, r2, r3
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	88bb      	ldrh	r3, [r7, #4]
 8009752:	4413      	add	r3, r2
 8009754:	8b3a      	ldrh	r2, [r7, #24]
 8009756:	4619      	mov	r1, r3
 8009758:	f009 fc2b 	bl	8012fb2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800975c:	8afa      	ldrh	r2, [r7, #22]
 800975e:	8b3b      	ldrh	r3, [r7, #24]
 8009760:	4413      	add	r3, r2
 8009762:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009764:	8b7a      	ldrh	r2, [r7, #26]
 8009766:	8b3b      	ldrh	r3, [r7, #24]
 8009768:	4413      	add	r3, r2
 800976a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800976c:	88fa      	ldrh	r2, [r7, #6]
 800976e:	8b3b      	ldrh	r3, [r7, #24]
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	61fb      	str	r3, [r7, #28]
 800977e:	88fb      	ldrh	r3, [r7, #6]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d002      	beq.n	800978a <pbuf_copy_partial+0xca>
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1c4      	bne.n	8009714 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800978a:	8afb      	ldrh	r3, [r7, #22]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3720      	adds	r7, #32
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	08014d00 	.word	0x08014d00
 8009798:	08015048 	.word	0x08015048
 800979c:	08014d60 	.word	0x08014d60
 80097a0:	08015068 	.word	0x08015068

080097a4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b087      	sub	sp, #28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	460b      	mov	r3, r1
 80097ae:	607a      	str	r2, [r7, #4]
 80097b0:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80097b2:	897b      	ldrh	r3, [r7, #10]
 80097b4:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80097ba:	e007      	b.n	80097cc <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	895b      	ldrh	r3, [r3, #10]
 80097c0:	8afa      	ldrh	r2, [r7, #22]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d004      	beq.n	80097dc <pbuf_skip_const+0x38>
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	895b      	ldrh	r3, [r3, #10]
 80097d6:	8afa      	ldrh	r2, [r7, #22]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d2ef      	bcs.n	80097bc <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d002      	beq.n	80097e8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	8afa      	ldrh	r2, [r7, #22]
 80097e6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80097e8:	693b      	ldr	r3, [r7, #16]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	371c      	adds	r7, #28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
	...

080097f8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	603a      	str	r2, [r7, #0]
 8009802:	71fb      	strb	r3, [r7, #7]
 8009804:	460b      	mov	r3, r1
 8009806:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	8919      	ldrh	r1, [r3, #8]
 800980c:	88ba      	ldrh	r2, [r7, #4]
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	4618      	mov	r0, r3
 8009812:	f7ff fa77 	bl	8008d04 <pbuf_alloc>
 8009816:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <pbuf_clone+0x2a>
    return NULL;
 800981e:	2300      	movs	r3, #0
 8009820:	e011      	b.n	8009846 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f7ff fe79 	bl	800951c <pbuf_copy>
 800982a:	4603      	mov	r3, r0
 800982c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800982e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d006      	beq.n	8009844 <pbuf_clone+0x4c>
 8009836:	4b06      	ldr	r3, [pc, #24]	; (8009850 <pbuf_clone+0x58>)
 8009838:	f240 5224 	movw	r2, #1316	; 0x524
 800983c:	4905      	ldr	r1, [pc, #20]	; (8009854 <pbuf_clone+0x5c>)
 800983e:	4806      	ldr	r0, [pc, #24]	; (8009858 <pbuf_clone+0x60>)
 8009840:	f008 fcc8 	bl	80121d4 <iprintf>
  return q;
 8009844:	68fb      	ldr	r3, [r7, #12]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	08014d00 	.word	0x08014d00
 8009854:	08015174 	.word	0x08015174
 8009858:	08014d60 	.word	0x08014d60

0800985c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8009868:	887b      	ldrh	r3, [r7, #2]
 800986a:	4619      	mov	r1, r3
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f80c 	bl	800988a <pbuf_try_get_at>
 8009872:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	db02      	blt.n	8009880 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	b2db      	uxtb	r3, r3
 800987e:	e000      	b.n	8009882 <pbuf_get_at+0x26>
  }
  return 0;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b084      	sub	sp, #16
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	460b      	mov	r3, r1
 8009894:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8009896:	f107 020a 	add.w	r2, r7, #10
 800989a:	887b      	ldrh	r3, [r7, #2]
 800989c:	4619      	mov	r1, r3
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7ff ff80 	bl	80097a4 <pbuf_skip_const>
 80098a4:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00a      	beq.n	80098c2 <pbuf_try_get_at+0x38>
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	895a      	ldrh	r2, [r3, #10]
 80098b0:	897b      	ldrh	r3, [r7, #10]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d905      	bls.n	80098c2 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	897a      	ldrh	r2, [r7, #10]
 80098bc:	4413      	add	r3, r2
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	e001      	b.n	80098c6 <pbuf_try_get_at+0x3c>
  }
  return -1;
 80098c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80098d4:	f008 fafa 	bl	8011ecc <rand>
 80098d8:	4603      	mov	r3, r0
 80098da:	b29b      	uxth	r3, r3
 80098dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	4b01      	ldr	r3, [pc, #4]	; (80098f0 <tcp_init+0x20>)
 80098ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80098ec:	bf00      	nop
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20000024 	.word	0x20000024

080098f4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	7d1b      	ldrb	r3, [r3, #20]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d105      	bne.n	8009910 <tcp_free+0x1c>
 8009904:	4b06      	ldr	r3, [pc, #24]	; (8009920 <tcp_free+0x2c>)
 8009906:	22d4      	movs	r2, #212	; 0xd4
 8009908:	4906      	ldr	r1, [pc, #24]	; (8009924 <tcp_free+0x30>)
 800990a:	4807      	ldr	r0, [pc, #28]	; (8009928 <tcp_free+0x34>)
 800990c:	f008 fc62 	bl	80121d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	2001      	movs	r0, #1
 8009914:	f7fe fe64 	bl	80085e0 <memp_free>
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	08015200 	.word	0x08015200
 8009924:	08015230 	.word	0x08015230
 8009928:	08015244 	.word	0x08015244

0800992c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	7d1b      	ldrb	r3, [r3, #20]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d105      	bne.n	8009948 <tcp_free_listen+0x1c>
 800993c:	4b06      	ldr	r3, [pc, #24]	; (8009958 <tcp_free_listen+0x2c>)
 800993e:	22df      	movs	r2, #223	; 0xdf
 8009940:	4906      	ldr	r1, [pc, #24]	; (800995c <tcp_free_listen+0x30>)
 8009942:	4807      	ldr	r0, [pc, #28]	; (8009960 <tcp_free_listen+0x34>)
 8009944:	f008 fc46 	bl	80121d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009948:	6879      	ldr	r1, [r7, #4]
 800994a:	2002      	movs	r0, #2
 800994c:	f7fe fe48 	bl	80085e0 <memp_free>
}
 8009950:	bf00      	nop
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	08015200 	.word	0x08015200
 800995c:	0801526c 	.word	0x0801526c
 8009960:	08015244 	.word	0x08015244

08009964 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009968:	f000 fea2 	bl	800a6b0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800996c:	4b07      	ldr	r3, [pc, #28]	; (800998c <tcp_tmr+0x28>)
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	3301      	adds	r3, #1
 8009972:	b2da      	uxtb	r2, r3
 8009974:	4b05      	ldr	r3, [pc, #20]	; (800998c <tcp_tmr+0x28>)
 8009976:	701a      	strb	r2, [r3, #0]
 8009978:	4b04      	ldr	r3, [pc, #16]	; (800998c <tcp_tmr+0x28>)
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	f003 0301 	and.w	r3, r3, #1
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009984:	f000 fb54 	bl	800a030 <tcp_slowtmr>
  }
}
 8009988:	bf00      	nop
 800998a:	bd80      	pop	{r7, pc}
 800998c:	2000aa8d 	.word	0x2000aa8d

08009990 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d105      	bne.n	80099ac <tcp_remove_listener+0x1c>
 80099a0:	4b0d      	ldr	r3, [pc, #52]	; (80099d8 <tcp_remove_listener+0x48>)
 80099a2:	22ff      	movs	r2, #255	; 0xff
 80099a4:	490d      	ldr	r1, [pc, #52]	; (80099dc <tcp_remove_listener+0x4c>)
 80099a6:	480e      	ldr	r0, [pc, #56]	; (80099e0 <tcp_remove_listener+0x50>)
 80099a8:	f008 fc14 	bl	80121d4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	60fb      	str	r3, [r7, #12]
 80099b0:	e00a      	b.n	80099c8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d102      	bne.n	80099c2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	60fb      	str	r3, [r7, #12]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1f1      	bne.n	80099b2 <tcp_remove_listener+0x22>
    }
  }
}
 80099ce:	bf00      	nop
 80099d0:	bf00      	nop
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	08015200 	.word	0x08015200
 80099dc:	08015288 	.word	0x08015288
 80099e0:	08015244 	.word	0x08015244

080099e4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d106      	bne.n	8009a00 <tcp_listen_closed+0x1c>
 80099f2:	4b14      	ldr	r3, [pc, #80]	; (8009a44 <tcp_listen_closed+0x60>)
 80099f4:	f240 1211 	movw	r2, #273	; 0x111
 80099f8:	4913      	ldr	r1, [pc, #76]	; (8009a48 <tcp_listen_closed+0x64>)
 80099fa:	4814      	ldr	r0, [pc, #80]	; (8009a4c <tcp_listen_closed+0x68>)
 80099fc:	f008 fbea 	bl	80121d4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	7d1b      	ldrb	r3, [r3, #20]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d006      	beq.n	8009a16 <tcp_listen_closed+0x32>
 8009a08:	4b0e      	ldr	r3, [pc, #56]	; (8009a44 <tcp_listen_closed+0x60>)
 8009a0a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009a0e:	4910      	ldr	r1, [pc, #64]	; (8009a50 <tcp_listen_closed+0x6c>)
 8009a10:	480e      	ldr	r0, [pc, #56]	; (8009a4c <tcp_listen_closed+0x68>)
 8009a12:	f008 fbdf 	bl	80121d4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009a16:	2301      	movs	r3, #1
 8009a18:	60fb      	str	r3, [r7, #12]
 8009a1a:	e00b      	b.n	8009a34 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009a1c:	4a0d      	ldr	r2, [pc, #52]	; (8009a54 <tcp_listen_closed+0x70>)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6879      	ldr	r1, [r7, #4]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7ff ffb1 	bl	8009990 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	3301      	adds	r3, #1
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b03      	cmp	r3, #3
 8009a38:	d9f0      	bls.n	8009a1c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009a3a:	bf00      	nop
 8009a3c:	bf00      	nop
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	08015200 	.word	0x08015200
 8009a48:	080152b0 	.word	0x080152b0
 8009a4c:	08015244 	.word	0x08015244
 8009a50:	080152bc 	.word	0x080152bc
 8009a54:	080171ec 	.word	0x080171ec

08009a58 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009a58:	b5b0      	push	{r4, r5, r7, lr}
 8009a5a:	b088      	sub	sp, #32
 8009a5c:	af04      	add	r7, sp, #16
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	460b      	mov	r3, r1
 8009a62:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d106      	bne.n	8009a78 <tcp_close_shutdown+0x20>
 8009a6a:	4b63      	ldr	r3, [pc, #396]	; (8009bf8 <tcp_close_shutdown+0x1a0>)
 8009a6c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009a70:	4962      	ldr	r1, [pc, #392]	; (8009bfc <tcp_close_shutdown+0x1a4>)
 8009a72:	4863      	ldr	r0, [pc, #396]	; (8009c00 <tcp_close_shutdown+0x1a8>)
 8009a74:	f008 fbae 	bl	80121d4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d066      	beq.n	8009b4c <tcp_close_shutdown+0xf4>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	7d1b      	ldrb	r3, [r3, #20]
 8009a82:	2b04      	cmp	r3, #4
 8009a84:	d003      	beq.n	8009a8e <tcp_close_shutdown+0x36>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	7d1b      	ldrb	r3, [r3, #20]
 8009a8a:	2b07      	cmp	r3, #7
 8009a8c:	d15e      	bne.n	8009b4c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d104      	bne.n	8009aa0 <tcp_close_shutdown+0x48>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a9a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009a9e:	d055      	beq.n	8009b4c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	8b5b      	ldrh	r3, [r3, #26]
 8009aa4:	f003 0310 	and.w	r3, r3, #16
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d106      	bne.n	8009aba <tcp_close_shutdown+0x62>
 8009aac:	4b52      	ldr	r3, [pc, #328]	; (8009bf8 <tcp_close_shutdown+0x1a0>)
 8009aae:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009ab2:	4954      	ldr	r1, [pc, #336]	; (8009c04 <tcp_close_shutdown+0x1ac>)
 8009ab4:	4852      	ldr	r0, [pc, #328]	; (8009c00 <tcp_close_shutdown+0x1a8>)
 8009ab6:	f008 fb8d 	bl	80121d4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009ac2:	687d      	ldr	r5, [r7, #4]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	3304      	adds	r3, #4
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	8ad2      	ldrh	r2, [r2, #22]
 8009acc:	6879      	ldr	r1, [r7, #4]
 8009ace:	8b09      	ldrh	r1, [r1, #24]
 8009ad0:	9102      	str	r1, [sp, #8]
 8009ad2:	9201      	str	r2, [sp, #4]
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	462b      	mov	r3, r5
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4601      	mov	r1, r0
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f004 fe91 	bl	800e804 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f001 f8c6 	bl	800ac74 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009ae8:	4b47      	ldr	r3, [pc, #284]	; (8009c08 <tcp_close_shutdown+0x1b0>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d105      	bne.n	8009afe <tcp_close_shutdown+0xa6>
 8009af2:	4b45      	ldr	r3, [pc, #276]	; (8009c08 <tcp_close_shutdown+0x1b0>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	4a43      	ldr	r2, [pc, #268]	; (8009c08 <tcp_close_shutdown+0x1b0>)
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	e013      	b.n	8009b26 <tcp_close_shutdown+0xce>
 8009afe:	4b42      	ldr	r3, [pc, #264]	; (8009c08 <tcp_close_shutdown+0x1b0>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	e00c      	b.n	8009b20 <tcp_close_shutdown+0xc8>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d104      	bne.n	8009b1a <tcp_close_shutdown+0xc2>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	68da      	ldr	r2, [r3, #12]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	60da      	str	r2, [r3, #12]
 8009b18:	e005      	b.n	8009b26 <tcp_close_shutdown+0xce>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	60fb      	str	r3, [r7, #12]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1ef      	bne.n	8009b06 <tcp_close_shutdown+0xae>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	60da      	str	r2, [r3, #12]
 8009b2c:	4b37      	ldr	r3, [pc, #220]	; (8009c0c <tcp_close_shutdown+0x1b4>)
 8009b2e:	2201      	movs	r2, #1
 8009b30:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009b32:	4b37      	ldr	r3, [pc, #220]	; (8009c10 <tcp_close_shutdown+0x1b8>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d102      	bne.n	8009b42 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009b3c:	f003 fd5e 	bl	800d5fc <tcp_trigger_input_pcb_close>
 8009b40:	e002      	b.n	8009b48 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7ff fed6 	bl	80098f4 <tcp_free>
      }
      return ERR_OK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e050      	b.n	8009bee <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	7d1b      	ldrb	r3, [r3, #20]
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d03b      	beq.n	8009bcc <tcp_close_shutdown+0x174>
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	dc44      	bgt.n	8009be2 <tcp_close_shutdown+0x18a>
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d002      	beq.n	8009b62 <tcp_close_shutdown+0x10a>
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d02a      	beq.n	8009bb6 <tcp_close_shutdown+0x15e>
 8009b60:	e03f      	b.n	8009be2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	8adb      	ldrh	r3, [r3, #22]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d021      	beq.n	8009bae <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b6a:	4b2a      	ldr	r3, [pc, #168]	; (8009c14 <tcp_close_shutdown+0x1bc>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d105      	bne.n	8009b80 <tcp_close_shutdown+0x128>
 8009b74:	4b27      	ldr	r3, [pc, #156]	; (8009c14 <tcp_close_shutdown+0x1bc>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	4a26      	ldr	r2, [pc, #152]	; (8009c14 <tcp_close_shutdown+0x1bc>)
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	e013      	b.n	8009ba8 <tcp_close_shutdown+0x150>
 8009b80:	4b24      	ldr	r3, [pc, #144]	; (8009c14 <tcp_close_shutdown+0x1bc>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	60bb      	str	r3, [r7, #8]
 8009b86:	e00c      	b.n	8009ba2 <tcp_close_shutdown+0x14a>
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d104      	bne.n	8009b9c <tcp_close_shutdown+0x144>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	68da      	ldr	r2, [r3, #12]
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	60da      	str	r2, [r3, #12]
 8009b9a:	e005      	b.n	8009ba8 <tcp_close_shutdown+0x150>
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	60bb      	str	r3, [r7, #8]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1ef      	bne.n	8009b88 <tcp_close_shutdown+0x130>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7ff fea0 	bl	80098f4 <tcp_free>
      break;
 8009bb4:	e01a      	b.n	8009bec <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7ff ff14 	bl	80099e4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009bbc:	6879      	ldr	r1, [r7, #4]
 8009bbe:	4816      	ldr	r0, [pc, #88]	; (8009c18 <tcp_close_shutdown+0x1c0>)
 8009bc0:	f001 f8a8 	bl	800ad14 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7ff feb1 	bl	800992c <tcp_free_listen>
      break;
 8009bca:	e00f      	b.n	8009bec <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009bcc:	6879      	ldr	r1, [r7, #4]
 8009bce:	480e      	ldr	r0, [pc, #56]	; (8009c08 <tcp_close_shutdown+0x1b0>)
 8009bd0:	f001 f8a0 	bl	800ad14 <tcp_pcb_remove>
 8009bd4:	4b0d      	ldr	r3, [pc, #52]	; (8009c0c <tcp_close_shutdown+0x1b4>)
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7ff fe8a 	bl	80098f4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009be0:	e004      	b.n	8009bec <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f81a 	bl	8009c1c <tcp_close_shutdown_fin>
 8009be8:	4603      	mov	r3, r0
 8009bea:	e000      	b.n	8009bee <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	08015200 	.word	0x08015200
 8009bfc:	080152d4 	.word	0x080152d4
 8009c00:	08015244 	.word	0x08015244
 8009c04:	080152f4 	.word	0x080152f4
 8009c08:	2000aa84 	.word	0x2000aa84
 8009c0c:	2000aa8c 	.word	0x2000aa8c
 8009c10:	2000aac4 	.word	0x2000aac4
 8009c14:	2000aa7c 	.word	0x2000aa7c
 8009c18:	2000aa80 	.word	0x2000aa80

08009c1c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d106      	bne.n	8009c38 <tcp_close_shutdown_fin+0x1c>
 8009c2a:	4b2e      	ldr	r3, [pc, #184]	; (8009ce4 <tcp_close_shutdown_fin+0xc8>)
 8009c2c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009c30:	492d      	ldr	r1, [pc, #180]	; (8009ce8 <tcp_close_shutdown_fin+0xcc>)
 8009c32:	482e      	ldr	r0, [pc, #184]	; (8009cec <tcp_close_shutdown_fin+0xd0>)
 8009c34:	f008 face 	bl	80121d4 <iprintf>

  switch (pcb->state) {
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	7d1b      	ldrb	r3, [r3, #20]
 8009c3c:	2b07      	cmp	r3, #7
 8009c3e:	d020      	beq.n	8009c82 <tcp_close_shutdown_fin+0x66>
 8009c40:	2b07      	cmp	r3, #7
 8009c42:	dc2b      	bgt.n	8009c9c <tcp_close_shutdown_fin+0x80>
 8009c44:	2b03      	cmp	r3, #3
 8009c46:	d002      	beq.n	8009c4e <tcp_close_shutdown_fin+0x32>
 8009c48:	2b04      	cmp	r3, #4
 8009c4a:	d00d      	beq.n	8009c68 <tcp_close_shutdown_fin+0x4c>
 8009c4c:	e026      	b.n	8009c9c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f003 fee6 	bl	800da20 <tcp_send_fin>
 8009c54:	4603      	mov	r3, r0
 8009c56:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d11f      	bne.n	8009ca0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2205      	movs	r2, #5
 8009c64:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009c66:	e01b      	b.n	8009ca0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f003 fed9 	bl	800da20 <tcp_send_fin>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d114      	bne.n	8009ca4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2205      	movs	r2, #5
 8009c7e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009c80:	e010      	b.n	8009ca4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f003 fecc 	bl	800da20 <tcp_send_fin>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d109      	bne.n	8009ca8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2209      	movs	r2, #9
 8009c98:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009c9a:	e005      	b.n	8009ca8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	e01c      	b.n	8009cda <tcp_close_shutdown_fin+0xbe>
      break;
 8009ca0:	bf00      	nop
 8009ca2:	e002      	b.n	8009caa <tcp_close_shutdown_fin+0x8e>
      break;
 8009ca4:	bf00      	nop
 8009ca6:	e000      	b.n	8009caa <tcp_close_shutdown_fin+0x8e>
      break;
 8009ca8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d103      	bne.n	8009cba <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f003 fff2 	bl	800dc9c <tcp_output>
 8009cb8:	e00d      	b.n	8009cd6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc2:	d108      	bne.n	8009cd6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	8b5b      	ldrh	r3, [r3, #26]
 8009cc8:	f043 0308 	orr.w	r3, r3, #8
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	e001      	b.n	8009cda <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	08015200 	.word	0x08015200
 8009ce8:	080152b0 	.word	0x080152b0
 8009cec:	08015244 	.word	0x08015244

08009cf0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d109      	bne.n	8009d12 <tcp_close+0x22>
 8009cfe:	4b0f      	ldr	r3, [pc, #60]	; (8009d3c <tcp_close+0x4c>)
 8009d00:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009d04:	490e      	ldr	r1, [pc, #56]	; (8009d40 <tcp_close+0x50>)
 8009d06:	480f      	ldr	r0, [pc, #60]	; (8009d44 <tcp_close+0x54>)
 8009d08:	f008 fa64 	bl	80121d4 <iprintf>
 8009d0c:	f06f 030f 	mvn.w	r3, #15
 8009d10:	e00f      	b.n	8009d32 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	7d1b      	ldrb	r3, [r3, #20]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d006      	beq.n	8009d28 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	8b5b      	ldrh	r3, [r3, #26]
 8009d1e:	f043 0310 	orr.w	r3, r3, #16
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009d28:	2101      	movs	r1, #1
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f7ff fe94 	bl	8009a58 <tcp_close_shutdown>
 8009d30:	4603      	mov	r3, r0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	08015200 	.word	0x08015200
 8009d40:	08015310 	.word	0x08015310
 8009d44:	08015244 	.word	0x08015244

08009d48 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b08e      	sub	sp, #56	; 0x38
 8009d4c:	af04      	add	r7, sp, #16
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d107      	bne.n	8009d68 <tcp_abandon+0x20>
 8009d58:	4b52      	ldr	r3, [pc, #328]	; (8009ea4 <tcp_abandon+0x15c>)
 8009d5a:	f240 223d 	movw	r2, #573	; 0x23d
 8009d5e:	4952      	ldr	r1, [pc, #328]	; (8009ea8 <tcp_abandon+0x160>)
 8009d60:	4852      	ldr	r0, [pc, #328]	; (8009eac <tcp_abandon+0x164>)
 8009d62:	f008 fa37 	bl	80121d4 <iprintf>
 8009d66:	e099      	b.n	8009e9c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	7d1b      	ldrb	r3, [r3, #20]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d106      	bne.n	8009d7e <tcp_abandon+0x36>
 8009d70:	4b4c      	ldr	r3, [pc, #304]	; (8009ea4 <tcp_abandon+0x15c>)
 8009d72:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009d76:	494e      	ldr	r1, [pc, #312]	; (8009eb0 <tcp_abandon+0x168>)
 8009d78:	484c      	ldr	r0, [pc, #304]	; (8009eac <tcp_abandon+0x164>)
 8009d7a:	f008 fa2b 	bl	80121d4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	7d1b      	ldrb	r3, [r3, #20]
 8009d82:	2b0a      	cmp	r3, #10
 8009d84:	d107      	bne.n	8009d96 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009d86:	6879      	ldr	r1, [r7, #4]
 8009d88:	484a      	ldr	r0, [pc, #296]	; (8009eb4 <tcp_abandon+0x16c>)
 8009d8a:	f000 ffc3 	bl	800ad14 <tcp_pcb_remove>
    tcp_free(pcb);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f7ff fdb0 	bl	80098f4 <tcp_free>
 8009d94:	e082      	b.n	8009e9c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009da2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009db0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	7d1b      	ldrb	r3, [r3, #20]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d126      	bne.n	8009e0e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	8adb      	ldrh	r3, [r3, #22]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d02e      	beq.n	8009e26 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009dc8:	4b3b      	ldr	r3, [pc, #236]	; (8009eb8 <tcp_abandon+0x170>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d105      	bne.n	8009dde <tcp_abandon+0x96>
 8009dd2:	4b39      	ldr	r3, [pc, #228]	; (8009eb8 <tcp_abandon+0x170>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	4a37      	ldr	r2, [pc, #220]	; (8009eb8 <tcp_abandon+0x170>)
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	e013      	b.n	8009e06 <tcp_abandon+0xbe>
 8009dde:	4b36      	ldr	r3, [pc, #216]	; (8009eb8 <tcp_abandon+0x170>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	61fb      	str	r3, [r7, #28]
 8009de4:	e00c      	b.n	8009e00 <tcp_abandon+0xb8>
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d104      	bne.n	8009dfa <tcp_abandon+0xb2>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	68da      	ldr	r2, [r3, #12]
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	60da      	str	r2, [r3, #12]
 8009df8:	e005      	b.n	8009e06 <tcp_abandon+0xbe>
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	61fb      	str	r3, [r7, #28]
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1ef      	bne.n	8009de6 <tcp_abandon+0x9e>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	60da      	str	r2, [r3, #12]
 8009e0c:	e00b      	b.n	8009e26 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	8adb      	ldrh	r3, [r3, #22]
 8009e16:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009e18:	6879      	ldr	r1, [r7, #4]
 8009e1a:	4828      	ldr	r0, [pc, #160]	; (8009ebc <tcp_abandon+0x174>)
 8009e1c:	f000 ff7a 	bl	800ad14 <tcp_pcb_remove>
 8009e20:	4b27      	ldr	r3, [pc, #156]	; (8009ec0 <tcp_abandon+0x178>)
 8009e22:	2201      	movs	r2, #1
 8009e24:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d004      	beq.n	8009e38 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 fd1c 	bl	800a870 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d004      	beq.n	8009e4a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 fd13 	bl	800a870 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d004      	beq.n	8009e5c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 fd0a 	bl	800a870 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00e      	beq.n	8009e80 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009e62:	6879      	ldr	r1, [r7, #4]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3304      	adds	r3, #4
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	8b12      	ldrh	r2, [r2, #24]
 8009e6c:	9202      	str	r2, [sp, #8]
 8009e6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009e70:	9201      	str	r2, [sp, #4]
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	460b      	mov	r3, r1
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	69b9      	ldr	r1, [r7, #24]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f004 fcc2 	bl	800e804 <tcp_rst>
    }
    last_state = pcb->state;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	7d1b      	ldrb	r3, [r3, #20]
 8009e84:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7ff fd34 	bl	80098f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d004      	beq.n	8009e9c <tcp_abandon+0x154>
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	f06f 010c 	mvn.w	r1, #12
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	4798      	blx	r3
  }
}
 8009e9c:	3728      	adds	r7, #40	; 0x28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	08015200 	.word	0x08015200
 8009ea8:	08015344 	.word	0x08015344
 8009eac:	08015244 	.word	0x08015244
 8009eb0:	08015360 	.word	0x08015360
 8009eb4:	2000aa88 	.word	0x2000aa88
 8009eb8:	2000aa7c 	.word	0x2000aa7c
 8009ebc:	2000aa84 	.word	0x2000aa84
 8009ec0:	2000aa8c 	.word	0x2000aa8c

08009ec4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009ecc:	2101      	movs	r1, #1
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7ff ff3a 	bl	8009d48 <tcp_abandon>
}
 8009ed4:	bf00      	nop
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d106      	bne.n	8009ef8 <tcp_update_rcv_ann_wnd+0x1c>
 8009eea:	4b25      	ldr	r3, [pc, #148]	; (8009f80 <tcp_update_rcv_ann_wnd+0xa4>)
 8009eec:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009ef0:	4924      	ldr	r1, [pc, #144]	; (8009f84 <tcp_update_rcv_ann_wnd+0xa8>)
 8009ef2:	4825      	ldr	r0, [pc, #148]	; (8009f88 <tcp_update_rcv_ann_wnd+0xac>)
 8009ef4:	f008 f96e 	bl	80121d4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009f00:	4413      	add	r3, r2
 8009f02:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009f0c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009f10:	bf28      	it	cs
 8009f12:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009f16:	b292      	uxth	r2, r2
 8009f18:	4413      	add	r3, r2
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	1ad3      	subs	r3, r2, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	db08      	blt.n	8009f34 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	e020      	b.n	8009f76 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	dd03      	ble.n	8009f4a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f48:	e014      	b.n	8009f74 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f5c:	d306      	bcc.n	8009f6c <tcp_update_rcv_ann_wnd+0x90>
 8009f5e:	4b08      	ldr	r3, [pc, #32]	; (8009f80 <tcp_update_rcv_ann_wnd+0xa4>)
 8009f60:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009f64:	4909      	ldr	r1, [pc, #36]	; (8009f8c <tcp_update_rcv_ann_wnd+0xb0>)
 8009f66:	4808      	ldr	r0, [pc, #32]	; (8009f88 <tcp_update_rcv_ann_wnd+0xac>)
 8009f68:	f008 f934 	bl	80121d4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009f74:	2300      	movs	r3, #0
  }
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	08015200 	.word	0x08015200
 8009f84:	0801545c 	.word	0x0801545c
 8009f88:	08015244 	.word	0x08015244
 8009f8c:	08015480 	.word	0x08015480

08009f90 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d107      	bne.n	8009fb2 <tcp_recved+0x22>
 8009fa2:	4b1f      	ldr	r3, [pc, #124]	; (800a020 <tcp_recved+0x90>)
 8009fa4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009fa8:	491e      	ldr	r1, [pc, #120]	; (800a024 <tcp_recved+0x94>)
 8009faa:	481f      	ldr	r0, [pc, #124]	; (800a028 <tcp_recved+0x98>)
 8009fac:	f008 f912 	bl	80121d4 <iprintf>
 8009fb0:	e032      	b.n	800a018 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	7d1b      	ldrb	r3, [r3, #20]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d106      	bne.n	8009fc8 <tcp_recved+0x38>
 8009fba:	4b19      	ldr	r3, [pc, #100]	; (800a020 <tcp_recved+0x90>)
 8009fbc:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009fc0:	491a      	ldr	r1, [pc, #104]	; (800a02c <tcp_recved+0x9c>)
 8009fc2:	4819      	ldr	r0, [pc, #100]	; (800a028 <tcp_recved+0x98>)
 8009fc4:	f008 f906 	bl	80121d4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009fcc:	887b      	ldrh	r3, [r7, #2]
 8009fce:	4413      	add	r3, r2
 8009fd0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009fd2:	89fb      	ldrh	r3, [r7, #14]
 8009fd4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009fd8:	d804      	bhi.n	8009fe4 <tcp_recved+0x54>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fde:	89fa      	ldrh	r2, [r7, #14]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d204      	bcs.n	8009fee <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009fea:	851a      	strh	r2, [r3, #40]	; 0x28
 8009fec:	e002      	b.n	8009ff4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	89fa      	ldrh	r2, [r7, #14]
 8009ff2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7ff ff71 	bl	8009edc <tcp_update_rcv_ann_wnd>
 8009ffa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a002:	d309      	bcc.n	800a018 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	8b5b      	ldrh	r3, [r3, #26]
 800a008:	f043 0302 	orr.w	r3, r3, #2
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f003 fe42 	bl	800dc9c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	08015200 	.word	0x08015200
 800a024:	0801549c 	.word	0x0801549c
 800a028:	08015244 	.word	0x08015244
 800a02c:	080154b4 	.word	0x080154b4

0800a030 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a030:	b5b0      	push	{r4, r5, r7, lr}
 800a032:	b090      	sub	sp, #64	; 0x40
 800a034:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a036:	2300      	movs	r3, #0
 800a038:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a03c:	4b94      	ldr	r3, [pc, #592]	; (800a290 <tcp_slowtmr+0x260>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3301      	adds	r3, #1
 800a042:	4a93      	ldr	r2, [pc, #588]	; (800a290 <tcp_slowtmr+0x260>)
 800a044:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a046:	4b93      	ldr	r3, [pc, #588]	; (800a294 <tcp_slowtmr+0x264>)
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	3301      	adds	r3, #1
 800a04c:	b2da      	uxtb	r2, r3
 800a04e:	4b91      	ldr	r3, [pc, #580]	; (800a294 <tcp_slowtmr+0x264>)
 800a050:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a052:	2300      	movs	r3, #0
 800a054:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a056:	4b90      	ldr	r3, [pc, #576]	; (800a298 <tcp_slowtmr+0x268>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a05c:	e29d      	b.n	800a59a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a060:	7d1b      	ldrb	r3, [r3, #20]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d106      	bne.n	800a074 <tcp_slowtmr+0x44>
 800a066:	4b8d      	ldr	r3, [pc, #564]	; (800a29c <tcp_slowtmr+0x26c>)
 800a068:	f240 42be 	movw	r2, #1214	; 0x4be
 800a06c:	498c      	ldr	r1, [pc, #560]	; (800a2a0 <tcp_slowtmr+0x270>)
 800a06e:	488d      	ldr	r0, [pc, #564]	; (800a2a4 <tcp_slowtmr+0x274>)
 800a070:	f008 f8b0 	bl	80121d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a076:	7d1b      	ldrb	r3, [r3, #20]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d106      	bne.n	800a08a <tcp_slowtmr+0x5a>
 800a07c:	4b87      	ldr	r3, [pc, #540]	; (800a29c <tcp_slowtmr+0x26c>)
 800a07e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a082:	4989      	ldr	r1, [pc, #548]	; (800a2a8 <tcp_slowtmr+0x278>)
 800a084:	4887      	ldr	r0, [pc, #540]	; (800a2a4 <tcp_slowtmr+0x274>)
 800a086:	f008 f8a5 	bl	80121d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	7d1b      	ldrb	r3, [r3, #20]
 800a08e:	2b0a      	cmp	r3, #10
 800a090:	d106      	bne.n	800a0a0 <tcp_slowtmr+0x70>
 800a092:	4b82      	ldr	r3, [pc, #520]	; (800a29c <tcp_slowtmr+0x26c>)
 800a094:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a098:	4984      	ldr	r1, [pc, #528]	; (800a2ac <tcp_slowtmr+0x27c>)
 800a09a:	4882      	ldr	r0, [pc, #520]	; (800a2a4 <tcp_slowtmr+0x274>)
 800a09c:	f008 f89a 	bl	80121d4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a2:	7f9a      	ldrb	r2, [r3, #30]
 800a0a4:	4b7b      	ldr	r3, [pc, #492]	; (800a294 <tcp_slowtmr+0x264>)
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d105      	bne.n	800a0b8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a0b6:	e270      	b.n	800a59a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a0b8:	4b76      	ldr	r3, [pc, #472]	; (800a294 <tcp_slowtmr+0x264>)
 800a0ba:	781a      	ldrb	r2, [r3, #0]
 800a0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0be:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ce:	7d1b      	ldrb	r3, [r3, #20]
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d10a      	bne.n	800a0ea <tcp_slowtmr+0xba>
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0da:	2b05      	cmp	r3, #5
 800a0dc:	d905      	bls.n	800a0ea <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a0de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a0e8:	e11e      	b.n	800a328 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0f0:	2b0b      	cmp	r3, #11
 800a0f2:	d905      	bls.n	800a100 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a0f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a0fe:	e113      	b.n	800a328 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a102:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a106:	2b00      	cmp	r3, #0
 800a108:	d075      	beq.n	800a1f6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d006      	beq.n	800a120 <tcp_slowtmr+0xf0>
 800a112:	4b62      	ldr	r3, [pc, #392]	; (800a29c <tcp_slowtmr+0x26c>)
 800a114:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a118:	4965      	ldr	r1, [pc, #404]	; (800a2b0 <tcp_slowtmr+0x280>)
 800a11a:	4862      	ldr	r0, [pc, #392]	; (800a2a4 <tcp_slowtmr+0x274>)
 800a11c:	f008 f85a 	bl	80121d4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a124:	2b00      	cmp	r3, #0
 800a126:	d106      	bne.n	800a136 <tcp_slowtmr+0x106>
 800a128:	4b5c      	ldr	r3, [pc, #368]	; (800a29c <tcp_slowtmr+0x26c>)
 800a12a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a12e:	4961      	ldr	r1, [pc, #388]	; (800a2b4 <tcp_slowtmr+0x284>)
 800a130:	485c      	ldr	r0, [pc, #368]	; (800a2a4 <tcp_slowtmr+0x274>)
 800a132:	f008 f84f 	bl	80121d4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a138:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a13c:	2b0b      	cmp	r3, #11
 800a13e:	d905      	bls.n	800a14c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a144:	3301      	adds	r3, #1
 800a146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a14a:	e0ed      	b.n	800a328 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a152:	3b01      	subs	r3, #1
 800a154:	4a58      	ldr	r2, [pc, #352]	; (800a2b8 <tcp_slowtmr+0x288>)
 800a156:	5cd3      	ldrb	r3, [r2, r3]
 800a158:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a160:	7c7a      	ldrb	r2, [r7, #17]
 800a162:	429a      	cmp	r2, r3
 800a164:	d907      	bls.n	800a176 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a168:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a16c:	3301      	adds	r3, #1
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a172:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a178:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a17c:	7c7a      	ldrb	r2, [r7, #17]
 800a17e:	429a      	cmp	r2, r3
 800a180:	f200 80d2 	bhi.w	800a328 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a184:	2301      	movs	r3, #1
 800a186:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d108      	bne.n	800a1a4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a192:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a194:	f004 fc2a 	bl	800e9ec <tcp_zero_window_probe>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d014      	beq.n	800a1c8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a19e:	2300      	movs	r3, #0
 800a1a0:	623b      	str	r3, [r7, #32]
 800a1a2:	e011      	b.n	800a1c8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1ae:	f003 faef 	bl	800d790 <tcp_split_unsent_seg>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d107      	bne.n	800a1c8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a1b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1ba:	f003 fd6f 	bl	800dc9c <tcp_output>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d101      	bne.n	800a1c8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	f000 80ac 	beq.w	800a328 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a1de:	2b06      	cmp	r3, #6
 800a1e0:	f200 80a2 	bhi.w	800a328 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a1f4:	e098      	b.n	800a328 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	db0f      	blt.n	800a220 <tcp_slowtmr+0x1f0>
 800a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a202:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a206:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d008      	beq.n	800a220 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a214:	b29b      	uxth	r3, r3
 800a216:	3301      	adds	r3, #1
 800a218:	b29b      	uxth	r3, r3
 800a21a:	b21a      	sxth	r2, r3
 800a21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a222:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a228:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a22c:	429a      	cmp	r2, r3
 800a22e:	db7b      	blt.n	800a328 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a230:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a232:	f004 f827 	bl	800e284 <tcp_rexmit_rto_prepare>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d007      	beq.n	800a24c <tcp_slowtmr+0x21c>
 800a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a240:	2b00      	cmp	r3, #0
 800a242:	d171      	bne.n	800a328 <tcp_slowtmr+0x2f8>
 800a244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d06d      	beq.n	800a328 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24e:	7d1b      	ldrb	r3, [r3, #20]
 800a250:	2b02      	cmp	r3, #2
 800a252:	d03a      	beq.n	800a2ca <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a256:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a25a:	2b0c      	cmp	r3, #12
 800a25c:	bf28      	it	cs
 800a25e:	230c      	movcs	r3, #12
 800a260:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a264:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a268:	10db      	asrs	r3, r3, #3
 800a26a:	b21b      	sxth	r3, r3
 800a26c:	461a      	mov	r2, r3
 800a26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a270:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a274:	4413      	add	r3, r2
 800a276:	7efa      	ldrb	r2, [r7, #27]
 800a278:	4910      	ldr	r1, [pc, #64]	; (800a2bc <tcp_slowtmr+0x28c>)
 800a27a:	5c8a      	ldrb	r2, [r1, r2]
 800a27c:	4093      	lsls	r3, r2
 800a27e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a286:	4293      	cmp	r3, r2
 800a288:	dc1a      	bgt.n	800a2c0 <tcp_slowtmr+0x290>
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	b21a      	sxth	r2, r3
 800a28e:	e019      	b.n	800a2c4 <tcp_slowtmr+0x294>
 800a290:	2000aa78 	.word	0x2000aa78
 800a294:	2000aa8e 	.word	0x2000aa8e
 800a298:	2000aa84 	.word	0x2000aa84
 800a29c:	08015200 	.word	0x08015200
 800a2a0:	08015544 	.word	0x08015544
 800a2a4:	08015244 	.word	0x08015244
 800a2a8:	08015570 	.word	0x08015570
 800a2ac:	0801559c 	.word	0x0801559c
 800a2b0:	080155cc 	.word	0x080155cc
 800a2b4:	08015600 	.word	0x08015600
 800a2b8:	080171e4 	.word	0x080171e4
 800a2bc:	080171d4 	.word	0x080171d4
 800a2c0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	bf28      	it	cs
 800a2e0:	4613      	movcs	r3, r2
 800a2e2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a2e4:	8a7b      	ldrh	r3, [r7, #18]
 800a2e6:	085b      	lsrs	r3, r3, #1
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2fa:	005b      	lsls	r3, r3, #1
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d206      	bcs.n	800a310 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a304:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	b29a      	uxth	r2, r3
 800a30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a312:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a316:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31c:	2200      	movs	r2, #0
 800a31e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a324:	f004 f81e 	bl	800e364 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32a:	7d1b      	ldrb	r3, [r3, #20]
 800a32c:	2b06      	cmp	r3, #6
 800a32e:	d111      	bne.n	800a354 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a332:	8b5b      	ldrh	r3, [r3, #26]
 800a334:	f003 0310 	and.w	r3, r3, #16
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00b      	beq.n	800a354 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a33c:	4b9c      	ldr	r3, [pc, #624]	; (800a5b0 <tcp_slowtmr+0x580>)
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a342:	6a1b      	ldr	r3, [r3, #32]
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	2b28      	cmp	r3, #40	; 0x28
 800a348:	d904      	bls.n	800a354 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a34a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a34e:	3301      	adds	r3, #1
 800a350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a356:	7a5b      	ldrb	r3, [r3, #9]
 800a358:	f003 0308 	and.w	r3, r3, #8
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d04a      	beq.n	800a3f6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a362:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a364:	2b04      	cmp	r3, #4
 800a366:	d003      	beq.n	800a370 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a36c:	2b07      	cmp	r3, #7
 800a36e:	d142      	bne.n	800a3f6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a370:	4b8f      	ldr	r3, [pc, #572]	; (800a5b0 <tcp_slowtmr+0x580>)
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a376:	6a1b      	ldr	r3, [r3, #32]
 800a378:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a380:	4b8c      	ldr	r3, [pc, #560]	; (800a5b4 <tcp_slowtmr+0x584>)
 800a382:	440b      	add	r3, r1
 800a384:	498c      	ldr	r1, [pc, #560]	; (800a5b8 <tcp_slowtmr+0x588>)
 800a386:	fba1 1303 	umull	r1, r3, r1, r3
 800a38a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d90a      	bls.n	800a3a6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a394:	3301      	adds	r3, #1
 800a396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a39a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a39e:	3301      	adds	r3, #1
 800a3a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a3a4:	e027      	b.n	800a3f6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a3a6:	4b82      	ldr	r3, [pc, #520]	; (800a5b0 <tcp_slowtmr+0x580>)
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ac:	6a1b      	ldr	r3, [r3, #32]
 800a3ae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a3bc:	4618      	mov	r0, r3
 800a3be:	4b7f      	ldr	r3, [pc, #508]	; (800a5bc <tcp_slowtmr+0x58c>)
 800a3c0:	fb00 f303 	mul.w	r3, r0, r3
 800a3c4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a3c6:	497c      	ldr	r1, [pc, #496]	; (800a5b8 <tcp_slowtmr+0x588>)
 800a3c8:	fba1 1303 	umull	r1, r3, r1, r3
 800a3cc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d911      	bls.n	800a3f6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800a3d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3d4:	f004 faca 	bl	800e96c <tcp_keepalive>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a3de:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d107      	bne.n	800a3f6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	b2da      	uxtb	r2, r3
 800a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d011      	beq.n	800a422 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a3fe:	4b6c      	ldr	r3, [pc, #432]	; (800a5b0 <tcp_slowtmr+0x580>)
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	1ad2      	subs	r2, r2, r3
 800a408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a40e:	4619      	mov	r1, r3
 800a410:	460b      	mov	r3, r1
 800a412:	005b      	lsls	r3, r3, #1
 800a414:	440b      	add	r3, r1
 800a416:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a418:	429a      	cmp	r2, r3
 800a41a:	d302      	bcc.n	800a422 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a41c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a41e:	f000 fddd 	bl	800afdc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a424:	7d1b      	ldrb	r3, [r3, #20]
 800a426:	2b03      	cmp	r3, #3
 800a428:	d10b      	bne.n	800a442 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a42a:	4b61      	ldr	r3, [pc, #388]	; (800a5b0 <tcp_slowtmr+0x580>)
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a430:	6a1b      	ldr	r3, [r3, #32]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	2b28      	cmp	r3, #40	; 0x28
 800a436:	d904      	bls.n	800a442 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a43c:	3301      	adds	r3, #1
 800a43e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	7d1b      	ldrb	r3, [r3, #20]
 800a446:	2b09      	cmp	r3, #9
 800a448:	d10b      	bne.n	800a462 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a44a:	4b59      	ldr	r3, [pc, #356]	; (800a5b0 <tcp_slowtmr+0x580>)
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	2bf0      	cmp	r3, #240	; 0xf0
 800a456:	d904      	bls.n	800a462 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800a458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a45c:	3301      	adds	r3, #1
 800a45e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a466:	2b00      	cmp	r3, #0
 800a468:	d060      	beq.n	800a52c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a470:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a472:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a474:	f000 fbfe 	bl	800ac74 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d010      	beq.n	800a4a0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a47e:	4b50      	ldr	r3, [pc, #320]	; (800a5c0 <tcp_slowtmr+0x590>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a484:	429a      	cmp	r2, r3
 800a486:	d106      	bne.n	800a496 <tcp_slowtmr+0x466>
 800a488:	4b4e      	ldr	r3, [pc, #312]	; (800a5c4 <tcp_slowtmr+0x594>)
 800a48a:	f240 526d 	movw	r2, #1389	; 0x56d
 800a48e:	494e      	ldr	r1, [pc, #312]	; (800a5c8 <tcp_slowtmr+0x598>)
 800a490:	484e      	ldr	r0, [pc, #312]	; (800a5cc <tcp_slowtmr+0x59c>)
 800a492:	f007 fe9f 	bl	80121d4 <iprintf>
        prev->next = pcb->next;
 800a496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a498:	68da      	ldr	r2, [r3, #12]
 800a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49c:	60da      	str	r2, [r3, #12]
 800a49e:	e00f      	b.n	800a4c0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a4a0:	4b47      	ldr	r3, [pc, #284]	; (800a5c0 <tcp_slowtmr+0x590>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d006      	beq.n	800a4b8 <tcp_slowtmr+0x488>
 800a4aa:	4b46      	ldr	r3, [pc, #280]	; (800a5c4 <tcp_slowtmr+0x594>)
 800a4ac:	f240 5271 	movw	r2, #1393	; 0x571
 800a4b0:	4947      	ldr	r1, [pc, #284]	; (800a5d0 <tcp_slowtmr+0x5a0>)
 800a4b2:	4846      	ldr	r0, [pc, #280]	; (800a5cc <tcp_slowtmr+0x59c>)
 800a4b4:	f007 fe8e 	bl	80121d4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	4a40      	ldr	r2, [pc, #256]	; (800a5c0 <tcp_slowtmr+0x590>)
 800a4be:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a4c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d013      	beq.n	800a4f0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a4d0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4d8:	8ad2      	ldrh	r2, [r2, #22]
 800a4da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4dc:	8b09      	ldrh	r1, [r1, #24]
 800a4de:	9102      	str	r1, [sp, #8]
 800a4e0:	9201      	str	r2, [sp, #4]
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	462b      	mov	r3, r5
 800a4e6:	4622      	mov	r2, r4
 800a4e8:	4601      	mov	r1, r0
 800a4ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4ec:	f004 f98a 	bl	800e804 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f8:	7d1b      	ldrb	r3, [r3, #20]
 800a4fa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a506:	6838      	ldr	r0, [r7, #0]
 800a508:	f7ff f9f4 	bl	80098f4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a50c:	4b31      	ldr	r3, [pc, #196]	; (800a5d4 <tcp_slowtmr+0x5a4>)
 800a50e:	2200      	movs	r2, #0
 800a510:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d004      	beq.n	800a522 <tcp_slowtmr+0x4f2>
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f06f 010c 	mvn.w	r1, #12
 800a51e:	68b8      	ldr	r0, [r7, #8]
 800a520:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a522:	4b2c      	ldr	r3, [pc, #176]	; (800a5d4 <tcp_slowtmr+0x5a4>)
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d037      	beq.n	800a59a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800a52a:	e592      	b.n	800a052 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	7f1b      	ldrb	r3, [r3, #28]
 800a53a:	3301      	adds	r3, #1
 800a53c:	b2da      	uxtb	r2, r3
 800a53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a540:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a544:	7f1a      	ldrb	r2, [r3, #28]
 800a546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a548:	7f5b      	ldrb	r3, [r3, #29]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d325      	bcc.n	800a59a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	2200      	movs	r2, #0
 800a552:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a554:	4b1f      	ldr	r3, [pc, #124]	; (800a5d4 <tcp_slowtmr+0x5a4>)
 800a556:	2200      	movs	r2, #0
 800a558:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00b      	beq.n	800a57c <tcp_slowtmr+0x54c>
 800a564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a56a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a56c:	6912      	ldr	r2, [r2, #16]
 800a56e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a570:	4610      	mov	r0, r2
 800a572:	4798      	blx	r3
 800a574:	4603      	mov	r3, r0
 800a576:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a57a:	e002      	b.n	800a582 <tcp_slowtmr+0x552>
 800a57c:	2300      	movs	r3, #0
 800a57e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a582:	4b14      	ldr	r3, [pc, #80]	; (800a5d4 <tcp_slowtmr+0x5a4>)
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d000      	beq.n	800a58c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800a58a:	e562      	b.n	800a052 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a58c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a590:	2b00      	cmp	r3, #0
 800a592:	d102      	bne.n	800a59a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800a594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a596:	f003 fb81 	bl	800dc9c <tcp_output>
  while (pcb != NULL) {
 800a59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f47f ad5e 	bne.w	800a05e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a5a6:	4b0c      	ldr	r3, [pc, #48]	; (800a5d8 <tcp_slowtmr+0x5a8>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a5ac:	e069      	b.n	800a682 <tcp_slowtmr+0x652>
 800a5ae:	bf00      	nop
 800a5b0:	2000aa78 	.word	0x2000aa78
 800a5b4:	000a4cb8 	.word	0x000a4cb8
 800a5b8:	10624dd3 	.word	0x10624dd3
 800a5bc:	000124f8 	.word	0x000124f8
 800a5c0:	2000aa84 	.word	0x2000aa84
 800a5c4:	08015200 	.word	0x08015200
 800a5c8:	08015638 	.word	0x08015638
 800a5cc:	08015244 	.word	0x08015244
 800a5d0:	08015664 	.word	0x08015664
 800a5d4:	2000aa8c 	.word	0x2000aa8c
 800a5d8:	2000aa88 	.word	0x2000aa88
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5de:	7d1b      	ldrb	r3, [r3, #20]
 800a5e0:	2b0a      	cmp	r3, #10
 800a5e2:	d006      	beq.n	800a5f2 <tcp_slowtmr+0x5c2>
 800a5e4:	4b2b      	ldr	r3, [pc, #172]	; (800a694 <tcp_slowtmr+0x664>)
 800a5e6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a5ea:	492b      	ldr	r1, [pc, #172]	; (800a698 <tcp_slowtmr+0x668>)
 800a5ec:	482b      	ldr	r0, [pc, #172]	; (800a69c <tcp_slowtmr+0x66c>)
 800a5ee:	f007 fdf1 	bl	80121d4 <iprintf>
    pcb_remove = 0;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a5f8:	4b29      	ldr	r3, [pc, #164]	; (800a6a0 <tcp_slowtmr+0x670>)
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fe:	6a1b      	ldr	r3, [r3, #32]
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	2bf0      	cmp	r3, #240	; 0xf0
 800a604:	d904      	bls.n	800a610 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a60a:	3301      	adds	r3, #1
 800a60c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a614:	2b00      	cmp	r3, #0
 800a616:	d02f      	beq.n	800a678 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a61a:	f000 fb2b 	bl	800ac74 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a620:	2b00      	cmp	r3, #0
 800a622:	d010      	beq.n	800a646 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a624:	4b1f      	ldr	r3, [pc, #124]	; (800a6a4 <tcp_slowtmr+0x674>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d106      	bne.n	800a63c <tcp_slowtmr+0x60c>
 800a62e:	4b19      	ldr	r3, [pc, #100]	; (800a694 <tcp_slowtmr+0x664>)
 800a630:	f240 52af 	movw	r2, #1455	; 0x5af
 800a634:	491c      	ldr	r1, [pc, #112]	; (800a6a8 <tcp_slowtmr+0x678>)
 800a636:	4819      	ldr	r0, [pc, #100]	; (800a69c <tcp_slowtmr+0x66c>)
 800a638:	f007 fdcc 	bl	80121d4 <iprintf>
        prev->next = pcb->next;
 800a63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63e:	68da      	ldr	r2, [r3, #12]
 800a640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a642:	60da      	str	r2, [r3, #12]
 800a644:	e00f      	b.n	800a666 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a646:	4b17      	ldr	r3, [pc, #92]	; (800a6a4 <tcp_slowtmr+0x674>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d006      	beq.n	800a65e <tcp_slowtmr+0x62e>
 800a650:	4b10      	ldr	r3, [pc, #64]	; (800a694 <tcp_slowtmr+0x664>)
 800a652:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a656:	4915      	ldr	r1, [pc, #84]	; (800a6ac <tcp_slowtmr+0x67c>)
 800a658:	4810      	ldr	r0, [pc, #64]	; (800a69c <tcp_slowtmr+0x66c>)
 800a65a:	f007 fdbb 	bl	80121d4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	4a10      	ldr	r2, [pc, #64]	; (800a6a4 <tcp_slowtmr+0x674>)
 800a664:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a668:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a670:	69f8      	ldr	r0, [r7, #28]
 800a672:	f7ff f93f 	bl	80098f4 <tcp_free>
 800a676:	e004      	b.n	800a682 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1a9      	bne.n	800a5dc <tcp_slowtmr+0x5ac>
    }
  }
}
 800a688:	bf00      	nop
 800a68a:	bf00      	nop
 800a68c:	3730      	adds	r7, #48	; 0x30
 800a68e:	46bd      	mov	sp, r7
 800a690:	bdb0      	pop	{r4, r5, r7, pc}
 800a692:	bf00      	nop
 800a694:	08015200 	.word	0x08015200
 800a698:	08015690 	.word	0x08015690
 800a69c:	08015244 	.word	0x08015244
 800a6a0:	2000aa78 	.word	0x2000aa78
 800a6a4:	2000aa88 	.word	0x2000aa88
 800a6a8:	080156c0 	.word	0x080156c0
 800a6ac:	080156e8 	.word	0x080156e8

0800a6b0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a6b6:	4b2d      	ldr	r3, [pc, #180]	; (800a76c <tcp_fasttmr+0xbc>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	4b2b      	ldr	r3, [pc, #172]	; (800a76c <tcp_fasttmr+0xbc>)
 800a6c0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a6c2:	4b2b      	ldr	r3, [pc, #172]	; (800a770 <tcp_fasttmr+0xc0>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a6c8:	e048      	b.n	800a75c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	7f9a      	ldrb	r2, [r3, #30]
 800a6ce:	4b27      	ldr	r3, [pc, #156]	; (800a76c <tcp_fasttmr+0xbc>)
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d03f      	beq.n	800a756 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a6d6:	4b25      	ldr	r3, [pc, #148]	; (800a76c <tcp_fasttmr+0xbc>)
 800a6d8:	781a      	ldrb	r2, [r3, #0]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	8b5b      	ldrh	r3, [r3, #26]
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d010      	beq.n	800a70c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	8b5b      	ldrh	r3, [r3, #26]
 800a6ee:	f043 0302 	orr.w	r3, r3, #2
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f003 facf 	bl	800dc9c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	8b5b      	ldrh	r3, [r3, #26]
 800a702:	f023 0303 	bic.w	r3, r3, #3
 800a706:	b29a      	uxth	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	8b5b      	ldrh	r3, [r3, #26]
 800a710:	f003 0308 	and.w	r3, r3, #8
 800a714:	2b00      	cmp	r3, #0
 800a716:	d009      	beq.n	800a72c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	8b5b      	ldrh	r3, [r3, #26]
 800a71c:	f023 0308 	bic.w	r3, r3, #8
 800a720:	b29a      	uxth	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7ff fa78 	bl	8009c1c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00a      	beq.n	800a750 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a73a:	4b0e      	ldr	r3, [pc, #56]	; (800a774 <tcp_fasttmr+0xc4>)
 800a73c:	2200      	movs	r2, #0
 800a73e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f819 	bl	800a778 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a746:	4b0b      	ldr	r3, [pc, #44]	; (800a774 <tcp_fasttmr+0xc4>)
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d000      	beq.n	800a750 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a74e:	e7b8      	b.n	800a6c2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	607b      	str	r3, [r7, #4]
 800a754:	e002      	b.n	800a75c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1b3      	bne.n	800a6ca <tcp_fasttmr+0x1a>
    }
  }
}
 800a762:	bf00      	nop
 800a764:	bf00      	nop
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	2000aa8e 	.word	0x2000aa8e
 800a770:	2000aa84 	.word	0x2000aa84
 800a774:	2000aa8c 	.word	0x2000aa8c

0800a778 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a778:	b590      	push	{r4, r7, lr}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d109      	bne.n	800a79a <tcp_process_refused_data+0x22>
 800a786:	4b37      	ldr	r3, [pc, #220]	; (800a864 <tcp_process_refused_data+0xec>)
 800a788:	f240 6209 	movw	r2, #1545	; 0x609
 800a78c:	4936      	ldr	r1, [pc, #216]	; (800a868 <tcp_process_refused_data+0xf0>)
 800a78e:	4837      	ldr	r0, [pc, #220]	; (800a86c <tcp_process_refused_data+0xf4>)
 800a790:	f007 fd20 	bl	80121d4 <iprintf>
 800a794:	f06f 030f 	mvn.w	r3, #15
 800a798:	e060      	b.n	800a85c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a79e:	7b5b      	ldrb	r3, [r3, #13]
 800a7a0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7a6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00b      	beq.n	800a7d0 <tcp_process_refused_data+0x58>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6918      	ldr	r0, [r3, #16]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	6879      	ldr	r1, [r7, #4]
 800a7c8:	47a0      	blx	r4
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	73fb      	strb	r3, [r7, #15]
 800a7ce:	e007      	b.n	800a7e0 <tcp_process_refused_data+0x68>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	6879      	ldr	r1, [r7, #4]
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	f000 f8a4 	bl	800a924 <tcp_recv_null>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a7e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d12a      	bne.n	800a83e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a7e8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ea:	f003 0320 	and.w	r3, r3, #32
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d033      	beq.n	800a85a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a7fa:	d005      	beq.n	800a808 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a800:	3301      	adds	r3, #1
 800a802:	b29a      	uxth	r2, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00b      	beq.n	800a82a <tcp_process_refused_data+0xb2>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6918      	ldr	r0, [r3, #16]
 800a81c:	2300      	movs	r3, #0
 800a81e:	2200      	movs	r2, #0
 800a820:	6879      	ldr	r1, [r7, #4]
 800a822:	47a0      	blx	r4
 800a824:	4603      	mov	r3, r0
 800a826:	73fb      	strb	r3, [r7, #15]
 800a828:	e001      	b.n	800a82e <tcp_process_refused_data+0xb6>
 800a82a:	2300      	movs	r3, #0
 800a82c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a82e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a832:	f113 0f0d 	cmn.w	r3, #13
 800a836:	d110      	bne.n	800a85a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a838:	f06f 030c 	mvn.w	r3, #12
 800a83c:	e00e      	b.n	800a85c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a83e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a842:	f113 0f0d 	cmn.w	r3, #13
 800a846:	d102      	bne.n	800a84e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a848:	f06f 030c 	mvn.w	r3, #12
 800a84c:	e006      	b.n	800a85c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a854:	f06f 0304 	mvn.w	r3, #4
 800a858:	e000      	b.n	800a85c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	bd90      	pop	{r4, r7, pc}
 800a864:	08015200 	.word	0x08015200
 800a868:	08015710 	.word	0x08015710
 800a86c:	08015244 	.word	0x08015244

0800a870 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a878:	e007      	b.n	800a88a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f80a 	bl	800a89a <tcp_seg_free>
    seg = next;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1f4      	bne.n	800a87a <tcp_segs_free+0xa>
  }
}
 800a890:	bf00      	nop
 800a892:	bf00      	nop
 800a894:	3710      	adds	r7, #16
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b082      	sub	sp, #8
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00c      	beq.n	800a8c2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d004      	beq.n	800a8ba <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fe fd09 	bl	80092cc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a8ba:	6879      	ldr	r1, [r7, #4]
 800a8bc:	2003      	movs	r0, #3
 800a8be:	f7fd fe8f 	bl	80085e0 <memp_free>
  }
}
 800a8c2:	bf00      	nop
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
	...

0800a8cc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d106      	bne.n	800a8e8 <tcp_seg_copy+0x1c>
 800a8da:	4b0f      	ldr	r3, [pc, #60]	; (800a918 <tcp_seg_copy+0x4c>)
 800a8dc:	f240 6282 	movw	r2, #1666	; 0x682
 800a8e0:	490e      	ldr	r1, [pc, #56]	; (800a91c <tcp_seg_copy+0x50>)
 800a8e2:	480f      	ldr	r0, [pc, #60]	; (800a920 <tcp_seg_copy+0x54>)
 800a8e4:	f007 fc76 	bl	80121d4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a8e8:	2003      	movs	r0, #3
 800a8ea:	f7fd fe09 	bl	8008500 <memp_malloc>
 800a8ee:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d101      	bne.n	800a8fa <tcp_seg_copy+0x2e>
    return NULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e00a      	b.n	800a910 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a8fa:	2210      	movs	r2, #16
 800a8fc:	6879      	ldr	r1, [r7, #4]
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f008 fb57 	bl	8012fb2 <memcpy>
  pbuf_ref(cseg->p);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	4618      	mov	r0, r3
 800a90a:	f7fe fd7f 	bl	800940c <pbuf_ref>
  return cseg;
 800a90e:	68fb      	ldr	r3, [r7, #12]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	08015200 	.word	0x08015200
 800a91c:	08015754 	.word	0x08015754
 800a920:	08015244 	.word	0x08015244

0800a924 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
 800a930:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d109      	bne.n	800a94c <tcp_recv_null+0x28>
 800a938:	4b12      	ldr	r3, [pc, #72]	; (800a984 <tcp_recv_null+0x60>)
 800a93a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a93e:	4912      	ldr	r1, [pc, #72]	; (800a988 <tcp_recv_null+0x64>)
 800a940:	4812      	ldr	r0, [pc, #72]	; (800a98c <tcp_recv_null+0x68>)
 800a942:	f007 fc47 	bl	80121d4 <iprintf>
 800a946:	f06f 030f 	mvn.w	r3, #15
 800a94a:	e016      	b.n	800a97a <tcp_recv_null+0x56>

  if (p != NULL) {
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d009      	beq.n	800a966 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	891b      	ldrh	r3, [r3, #8]
 800a956:	4619      	mov	r1, r3
 800a958:	68b8      	ldr	r0, [r7, #8]
 800a95a:	f7ff fb19 	bl	8009f90 <tcp_recved>
    pbuf_free(p);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7fe fcb4 	bl	80092cc <pbuf_free>
 800a964:	e008      	b.n	800a978 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a966:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d104      	bne.n	800a978 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a96e:	68b8      	ldr	r0, [r7, #8]
 800a970:	f7ff f9be 	bl	8009cf0 <tcp_close>
 800a974:	4603      	mov	r3, r0
 800a976:	e000      	b.n	800a97a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	08015200 	.word	0x08015200
 800a988:	08015770 	.word	0x08015770
 800a98c:	08015244 	.word	0x08015244

0800a990 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	4603      	mov	r3, r0
 800a998:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a99a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	db01      	blt.n	800a9a6 <tcp_kill_prio+0x16>
 800a9a2:	79fb      	ldrb	r3, [r7, #7]
 800a9a4:	e000      	b.n	800a9a8 <tcp_kill_prio+0x18>
 800a9a6:	237f      	movs	r3, #127	; 0x7f
 800a9a8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a9aa:	7afb      	ldrb	r3, [r7, #11]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d034      	beq.n	800aa1a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a9b0:	7afb      	ldrb	r3, [r7, #11]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9be:	4b19      	ldr	r3, [pc, #100]	; (800aa24 <tcp_kill_prio+0x94>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	617b      	str	r3, [r7, #20]
 800a9c4:	e01f      	b.n	800aa06 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	7d5b      	ldrb	r3, [r3, #21]
 800a9ca:	7afa      	ldrb	r2, [r7, #11]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d80c      	bhi.n	800a9ea <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a9d4:	7afa      	ldrb	r2, [r7, #11]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d112      	bne.n	800aa00 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a9da:	4b13      	ldr	r3, [pc, #76]	; (800aa28 <tcp_kill_prio+0x98>)
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	6a1b      	ldr	r3, [r3, #32]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d80a      	bhi.n	800aa00 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a9ea:	4b0f      	ldr	r3, [pc, #60]	; (800aa28 <tcp_kill_prio+0x98>)
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	7d5b      	ldrb	r3, [r3, #21]
 800a9fe:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	617b      	str	r3, [r7, #20]
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1dc      	bne.n	800a9c6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d004      	beq.n	800aa1c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800aa12:	6938      	ldr	r0, [r7, #16]
 800aa14:	f7ff fa56 	bl	8009ec4 <tcp_abort>
 800aa18:	e000      	b.n	800aa1c <tcp_kill_prio+0x8c>
    return;
 800aa1a:	bf00      	nop
  }
}
 800aa1c:	3718      	adds	r7, #24
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	2000aa84 	.word	0x2000aa84
 800aa28:	2000aa78 	.word	0x2000aa78

0800aa2c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	4603      	mov	r3, r0
 800aa34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800aa36:	79fb      	ldrb	r3, [r7, #7]
 800aa38:	2b08      	cmp	r3, #8
 800aa3a:	d009      	beq.n	800aa50 <tcp_kill_state+0x24>
 800aa3c:	79fb      	ldrb	r3, [r7, #7]
 800aa3e:	2b09      	cmp	r3, #9
 800aa40:	d006      	beq.n	800aa50 <tcp_kill_state+0x24>
 800aa42:	4b1a      	ldr	r3, [pc, #104]	; (800aaac <tcp_kill_state+0x80>)
 800aa44:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800aa48:	4919      	ldr	r1, [pc, #100]	; (800aab0 <tcp_kill_state+0x84>)
 800aa4a:	481a      	ldr	r0, [pc, #104]	; (800aab4 <tcp_kill_state+0x88>)
 800aa4c:	f007 fbc2 	bl	80121d4 <iprintf>

  inactivity = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800aa54:	2300      	movs	r3, #0
 800aa56:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa58:	4b17      	ldr	r3, [pc, #92]	; (800aab8 <tcp_kill_state+0x8c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	617b      	str	r3, [r7, #20]
 800aa5e:	e017      	b.n	800aa90 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	7d1b      	ldrb	r3, [r3, #20]
 800aa64:	79fa      	ldrb	r2, [r7, #7]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d10f      	bne.n	800aa8a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aa6a:	4b14      	ldr	r3, [pc, #80]	; (800aabc <tcp_kill_state+0x90>)
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	6a1b      	ldr	r3, [r3, #32]
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d807      	bhi.n	800aa8a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800aa7a:	4b10      	ldr	r3, [pc, #64]	; (800aabc <tcp_kill_state+0x90>)
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	617b      	str	r3, [r7, #20]
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1e4      	bne.n	800aa60 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d003      	beq.n	800aaa4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	6938      	ldr	r0, [r7, #16]
 800aaa0:	f7ff f952 	bl	8009d48 <tcp_abandon>
  }
}
 800aaa4:	bf00      	nop
 800aaa6:	3718      	adds	r7, #24
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	08015200 	.word	0x08015200
 800aab0:	0801578c 	.word	0x0801578c
 800aab4:	08015244 	.word	0x08015244
 800aab8:	2000aa84 	.word	0x2000aa84
 800aabc:	2000aa78 	.word	0x2000aa78

0800aac0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800aaca:	2300      	movs	r3, #0
 800aacc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aace:	4b12      	ldr	r3, [pc, #72]	; (800ab18 <tcp_kill_timewait+0x58>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	60fb      	str	r3, [r7, #12]
 800aad4:	e012      	b.n	800aafc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aad6:	4b11      	ldr	r3, [pc, #68]	; (800ab1c <tcp_kill_timewait+0x5c>)
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6a1b      	ldr	r3, [r3, #32]
 800aade:	1ad3      	subs	r3, r2, r3
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d807      	bhi.n	800aaf6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800aae6:	4b0d      	ldr	r3, [pc, #52]	; (800ab1c <tcp_kill_timewait+0x5c>)
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6a1b      	ldr	r3, [r3, #32]
 800aaee:	1ad3      	subs	r3, r2, r3
 800aaf0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	60fb      	str	r3, [r7, #12]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1e9      	bne.n	800aad6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d002      	beq.n	800ab0e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ab08:	68b8      	ldr	r0, [r7, #8]
 800ab0a:	f7ff f9db 	bl	8009ec4 <tcp_abort>
  }
}
 800ab0e:	bf00      	nop
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	2000aa88 	.word	0x2000aa88
 800ab1c:	2000aa78 	.word	0x2000aa78

0800ab20 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ab26:	4b10      	ldr	r3, [pc, #64]	; (800ab68 <tcp_handle_closepend+0x48>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ab2c:	e014      	b.n	800ab58 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	8b5b      	ldrh	r3, [r3, #26]
 800ab38:	f003 0308 	and.w	r3, r3, #8
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d009      	beq.n	800ab54 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	8b5b      	ldrh	r3, [r3, #26]
 800ab44:	f023 0308 	bic.w	r3, r3, #8
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f7ff f864 	bl	8009c1c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1e7      	bne.n	800ab2e <tcp_handle_closepend+0xe>
  }
}
 800ab5e:	bf00      	nop
 800ab60:	bf00      	nop
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	2000aa84 	.word	0x2000aa84

0800ab6c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab76:	2001      	movs	r0, #1
 800ab78:	f7fd fcc2 	bl	8008500 <memp_malloc>
 800ab7c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d126      	bne.n	800abd2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ab84:	f7ff ffcc 	bl	800ab20 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ab88:	f7ff ff9a 	bl	800aac0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	f7fd fcb7 	bl	8008500 <memp_malloc>
 800ab92:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d11b      	bne.n	800abd2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ab9a:	2009      	movs	r0, #9
 800ab9c:	f7ff ff46 	bl	800aa2c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aba0:	2001      	movs	r0, #1
 800aba2:	f7fd fcad 	bl	8008500 <memp_malloc>
 800aba6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d111      	bne.n	800abd2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800abae:	2008      	movs	r0, #8
 800abb0:	f7ff ff3c 	bl	800aa2c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800abb4:	2001      	movs	r0, #1
 800abb6:	f7fd fca3 	bl	8008500 <memp_malloc>
 800abba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d107      	bne.n	800abd2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800abc2:	79fb      	ldrb	r3, [r7, #7]
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7ff fee3 	bl	800a990 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800abca:	2001      	movs	r0, #1
 800abcc:	f7fd fc98 	bl	8008500 <memp_malloc>
 800abd0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d03f      	beq.n	800ac58 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800abd8:	229c      	movs	r2, #156	; 0x9c
 800abda:	2100      	movs	r1, #0
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f007 fb60 	bl	80122a2 <memset>
    pcb->prio = prio;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	79fa      	ldrb	r2, [r7, #7]
 800abe6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800abee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800abf8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	22ff      	movs	r2, #255	; 0xff
 800ac06:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ac0e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2206      	movs	r2, #6
 800ac14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2206      	movs	r2, #6
 800ac1c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac24:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ac2e:	4b0d      	ldr	r3, [pc, #52]	; (800ac64 <tcp_alloc+0xf8>)
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ac36:	4b0c      	ldr	r3, [pc, #48]	; (800ac68 <tcp_alloc+0xfc>)
 800ac38:	781a      	ldrb	r2, [r3, #0]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ac44:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	4a08      	ldr	r2, [pc, #32]	; (800ac6c <tcp_alloc+0x100>)
 800ac4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	4a07      	ldr	r2, [pc, #28]	; (800ac70 <tcp_alloc+0x104>)
 800ac54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ac58:	68fb      	ldr	r3, [r7, #12]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	2000aa78 	.word	0x2000aa78
 800ac68:	2000aa8e 	.word	0x2000aa8e
 800ac6c:	0800a925 	.word	0x0800a925
 800ac70:	006ddd00 	.word	0x006ddd00

0800ac74 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d107      	bne.n	800ac92 <tcp_pcb_purge+0x1e>
 800ac82:	4b21      	ldr	r3, [pc, #132]	; (800ad08 <tcp_pcb_purge+0x94>)
 800ac84:	f640 0251 	movw	r2, #2129	; 0x851
 800ac88:	4920      	ldr	r1, [pc, #128]	; (800ad0c <tcp_pcb_purge+0x98>)
 800ac8a:	4821      	ldr	r0, [pc, #132]	; (800ad10 <tcp_pcb_purge+0x9c>)
 800ac8c:	f007 faa2 	bl	80121d4 <iprintf>
 800ac90:	e037      	b.n	800ad02 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	7d1b      	ldrb	r3, [r3, #20]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d033      	beq.n	800ad02 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ac9e:	2b0a      	cmp	r3, #10
 800aca0:	d02f      	beq.n	800ad02 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d02b      	beq.n	800ad02 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d007      	beq.n	800acc2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe fb08 	bl	80092cc <pbuf_free>
      pcb->refused_data = NULL;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d002      	beq.n	800acd0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f986 	bl	800afdc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acd6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acdc:	4618      	mov	r0, r3
 800acde:	f7ff fdc7 	bl	800a870 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7ff fdc2 	bl	800a870 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	66da      	str	r2, [r3, #108]	; 0x6c
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	08015200 	.word	0x08015200
 800ad0c:	0801584c 	.word	0x0801584c
 800ad10:	08015244 	.word	0x08015244

0800ad14 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d106      	bne.n	800ad32 <tcp_pcb_remove+0x1e>
 800ad24:	4b3e      	ldr	r3, [pc, #248]	; (800ae20 <tcp_pcb_remove+0x10c>)
 800ad26:	f640 0283 	movw	r2, #2179	; 0x883
 800ad2a:	493e      	ldr	r1, [pc, #248]	; (800ae24 <tcp_pcb_remove+0x110>)
 800ad2c:	483e      	ldr	r0, [pc, #248]	; (800ae28 <tcp_pcb_remove+0x114>)
 800ad2e:	f007 fa51 	bl	80121d4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d106      	bne.n	800ad46 <tcp_pcb_remove+0x32>
 800ad38:	4b39      	ldr	r3, [pc, #228]	; (800ae20 <tcp_pcb_remove+0x10c>)
 800ad3a:	f640 0284 	movw	r2, #2180	; 0x884
 800ad3e:	493b      	ldr	r1, [pc, #236]	; (800ae2c <tcp_pcb_remove+0x118>)
 800ad40:	4839      	ldr	r0, [pc, #228]	; (800ae28 <tcp_pcb_remove+0x114>)
 800ad42:	f007 fa47 	bl	80121d4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	683a      	ldr	r2, [r7, #0]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d105      	bne.n	800ad5c <tcp_pcb_remove+0x48>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68da      	ldr	r2, [r3, #12]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	601a      	str	r2, [r3, #0]
 800ad5a:	e013      	b.n	800ad84 <tcp_pcb_remove+0x70>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	60fb      	str	r3, [r7, #12]
 800ad62:	e00c      	b.n	800ad7e <tcp_pcb_remove+0x6a>
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	683a      	ldr	r2, [r7, #0]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d104      	bne.n	800ad78 <tcp_pcb_remove+0x64>
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	68da      	ldr	r2, [r3, #12]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	60da      	str	r2, [r3, #12]
 800ad76:	e005      	b.n	800ad84 <tcp_pcb_remove+0x70>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	60fb      	str	r3, [r7, #12]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1ef      	bne.n	800ad64 <tcp_pcb_remove+0x50>
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	2200      	movs	r2, #0
 800ad88:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ad8a:	6838      	ldr	r0, [r7, #0]
 800ad8c:	f7ff ff72 	bl	800ac74 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	7d1b      	ldrb	r3, [r3, #20]
 800ad94:	2b0a      	cmp	r3, #10
 800ad96:	d013      	beq.n	800adc0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d00f      	beq.n	800adc0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	8b5b      	ldrh	r3, [r3, #26]
 800ada4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d009      	beq.n	800adc0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	8b5b      	ldrh	r3, [r3, #26]
 800adb0:	f043 0302 	orr.w	r3, r3, #2
 800adb4:	b29a      	uxth	r2, r3
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800adba:	6838      	ldr	r0, [r7, #0]
 800adbc:	f002 ff6e 	bl	800dc9c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	7d1b      	ldrb	r3, [r3, #20]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d020      	beq.n	800ae0a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d006      	beq.n	800adde <tcp_pcb_remove+0xca>
 800add0:	4b13      	ldr	r3, [pc, #76]	; (800ae20 <tcp_pcb_remove+0x10c>)
 800add2:	f640 0293 	movw	r2, #2195	; 0x893
 800add6:	4916      	ldr	r1, [pc, #88]	; (800ae30 <tcp_pcb_remove+0x11c>)
 800add8:	4813      	ldr	r0, [pc, #76]	; (800ae28 <tcp_pcb_remove+0x114>)
 800adda:	f007 f9fb 	bl	80121d4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d006      	beq.n	800adf4 <tcp_pcb_remove+0xe0>
 800ade6:	4b0e      	ldr	r3, [pc, #56]	; (800ae20 <tcp_pcb_remove+0x10c>)
 800ade8:	f640 0294 	movw	r2, #2196	; 0x894
 800adec:	4911      	ldr	r1, [pc, #68]	; (800ae34 <tcp_pcb_remove+0x120>)
 800adee:	480e      	ldr	r0, [pc, #56]	; (800ae28 <tcp_pcb_remove+0x114>)
 800adf0:	f007 f9f0 	bl	80121d4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d006      	beq.n	800ae0a <tcp_pcb_remove+0xf6>
 800adfc:	4b08      	ldr	r3, [pc, #32]	; (800ae20 <tcp_pcb_remove+0x10c>)
 800adfe:	f640 0296 	movw	r2, #2198	; 0x896
 800ae02:	490d      	ldr	r1, [pc, #52]	; (800ae38 <tcp_pcb_remove+0x124>)
 800ae04:	4808      	ldr	r0, [pc, #32]	; (800ae28 <tcp_pcb_remove+0x114>)
 800ae06:	f007 f9e5 	bl	80121d4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	2200      	movs	r2, #0
 800ae14:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ae16:	bf00      	nop
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	08015200 	.word	0x08015200
 800ae24:	08015868 	.word	0x08015868
 800ae28:	08015244 	.word	0x08015244
 800ae2c:	08015884 	.word	0x08015884
 800ae30:	080158a4 	.word	0x080158a4
 800ae34:	080158bc 	.word	0x080158bc
 800ae38:	080158d8 	.word	0x080158d8

0800ae3c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d106      	bne.n	800ae58 <tcp_next_iss+0x1c>
 800ae4a:	4b0a      	ldr	r3, [pc, #40]	; (800ae74 <tcp_next_iss+0x38>)
 800ae4c:	f640 02af 	movw	r2, #2223	; 0x8af
 800ae50:	4909      	ldr	r1, [pc, #36]	; (800ae78 <tcp_next_iss+0x3c>)
 800ae52:	480a      	ldr	r0, [pc, #40]	; (800ae7c <tcp_next_iss+0x40>)
 800ae54:	f007 f9be 	bl	80121d4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ae58:	4b09      	ldr	r3, [pc, #36]	; (800ae80 <tcp_next_iss+0x44>)
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	4b09      	ldr	r3, [pc, #36]	; (800ae84 <tcp_next_iss+0x48>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4413      	add	r3, r2
 800ae62:	4a07      	ldr	r2, [pc, #28]	; (800ae80 <tcp_next_iss+0x44>)
 800ae64:	6013      	str	r3, [r2, #0]
  return iss;
 800ae66:	4b06      	ldr	r3, [pc, #24]	; (800ae80 <tcp_next_iss+0x44>)
 800ae68:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	08015200 	.word	0x08015200
 800ae78:	080158f0 	.word	0x080158f0
 800ae7c:	08015244 	.word	0x08015244
 800ae80:	20000028 	.word	0x20000028
 800ae84:	2000aa78 	.word	0x2000aa78

0800ae88 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b086      	sub	sp, #24
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	4603      	mov	r3, r0
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
 800ae94:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d106      	bne.n	800aeaa <tcp_eff_send_mss_netif+0x22>
 800ae9c:	4b14      	ldr	r3, [pc, #80]	; (800aef0 <tcp_eff_send_mss_netif+0x68>)
 800ae9e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800aea2:	4914      	ldr	r1, [pc, #80]	; (800aef4 <tcp_eff_send_mss_netif+0x6c>)
 800aea4:	4814      	ldr	r0, [pc, #80]	; (800aef8 <tcp_eff_send_mss_netif+0x70>)
 800aea6:	f007 f995 	bl	80121d4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d101      	bne.n	800aeb4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800aeb0:	89fb      	ldrh	r3, [r7, #14]
 800aeb2:	e019      	b.n	800aee8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aeb8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800aeba:	8afb      	ldrh	r3, [r7, #22]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d012      	beq.n	800aee6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800aec0:	2328      	movs	r3, #40	; 0x28
 800aec2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800aec4:	8afa      	ldrh	r2, [r7, #22]
 800aec6:	8abb      	ldrh	r3, [r7, #20]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d904      	bls.n	800aed6 <tcp_eff_send_mss_netif+0x4e>
 800aecc:	8afa      	ldrh	r2, [r7, #22]
 800aece:	8abb      	ldrh	r3, [r7, #20]
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	e000      	b.n	800aed8 <tcp_eff_send_mss_netif+0x50>
 800aed6:	2300      	movs	r3, #0
 800aed8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800aeda:	8a7a      	ldrh	r2, [r7, #18]
 800aedc:	89fb      	ldrh	r3, [r7, #14]
 800aede:	4293      	cmp	r3, r2
 800aee0:	bf28      	it	cs
 800aee2:	4613      	movcs	r3, r2
 800aee4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800aee6:	89fb      	ldrh	r3, [r7, #14]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3718      	adds	r7, #24
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	08015200 	.word	0x08015200
 800aef4:	0801590c 	.word	0x0801590c
 800aef8:	08015244 	.word	0x08015244

0800aefc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d119      	bne.n	800af44 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800af10:	4b10      	ldr	r3, [pc, #64]	; (800af54 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800af12:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800af16:	4910      	ldr	r1, [pc, #64]	; (800af58 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800af18:	4810      	ldr	r0, [pc, #64]	; (800af5c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800af1a:	f007 f95b 	bl	80121d4 <iprintf>

  while (pcb != NULL) {
 800af1e:	e011      	b.n	800af44 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d108      	bne.n	800af3e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f7fe ffc6 	bl	8009ec4 <tcp_abort>
      pcb = next;
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	e002      	b.n	800af44 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1ea      	bne.n	800af20 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800af4a:	bf00      	nop
 800af4c:	bf00      	nop
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	08015200 	.word	0x08015200
 800af58:	08015934 	.word	0x08015934
 800af5c:	08015244 	.word	0x08015244

0800af60 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d02a      	beq.n	800afc6 <tcp_netif_ip_addr_changed+0x66>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d026      	beq.n	800afc6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800af78:	4b15      	ldr	r3, [pc, #84]	; (800afd0 <tcp_netif_ip_addr_changed+0x70>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4619      	mov	r1, r3
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7ff ffbc 	bl	800aefc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800af84:	4b13      	ldr	r3, [pc, #76]	; (800afd4 <tcp_netif_ip_addr_changed+0x74>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4619      	mov	r1, r3
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7ff ffb6 	bl	800aefc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d017      	beq.n	800afc6 <tcp_netif_ip_addr_changed+0x66>
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d013      	beq.n	800afc6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800af9e:	4b0e      	ldr	r3, [pc, #56]	; (800afd8 <tcp_netif_ip_addr_changed+0x78>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	60fb      	str	r3, [r7, #12]
 800afa4:	e00c      	b.n	800afc0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d103      	bne.n	800afba <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	60fb      	str	r3, [r7, #12]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d1ef      	bne.n	800afa6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800afc6:	bf00      	nop
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	2000aa84 	.word	0x2000aa84
 800afd4:	2000aa7c 	.word	0x2000aa7c
 800afd8:	2000aa80 	.word	0x2000aa80

0800afdc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d007      	beq.n	800affc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7ff fc3d 	bl	800a870 <tcp_segs_free>
    pcb->ooseq = NULL;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800affc:	bf00      	nop
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b004:	b590      	push	{r4, r7, lr}
 800b006:	b08d      	sub	sp, #52	; 0x34
 800b008:	af04      	add	r7, sp, #16
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d105      	bne.n	800b020 <tcp_input+0x1c>
 800b014:	4b9b      	ldr	r3, [pc, #620]	; (800b284 <tcp_input+0x280>)
 800b016:	2283      	movs	r2, #131	; 0x83
 800b018:	499b      	ldr	r1, [pc, #620]	; (800b288 <tcp_input+0x284>)
 800b01a:	489c      	ldr	r0, [pc, #624]	; (800b28c <tcp_input+0x288>)
 800b01c:	f007 f8da 	bl	80121d4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	4a9a      	ldr	r2, [pc, #616]	; (800b290 <tcp_input+0x28c>)
 800b026:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	895b      	ldrh	r3, [r3, #10]
 800b02c:	2b13      	cmp	r3, #19
 800b02e:	f240 83d1 	bls.w	800b7d4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b032:	4b98      	ldr	r3, [pc, #608]	; (800b294 <tcp_input+0x290>)
 800b034:	695b      	ldr	r3, [r3, #20]
 800b036:	4a97      	ldr	r2, [pc, #604]	; (800b294 <tcp_input+0x290>)
 800b038:	6812      	ldr	r2, [r2, #0]
 800b03a:	4611      	mov	r1, r2
 800b03c:	4618      	mov	r0, r3
 800b03e:	f005 ffef 	bl	8011020 <ip4_addr_isbroadcast_u32>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	f040 83c7 	bne.w	800b7d8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b04a:	4b92      	ldr	r3, [pc, #584]	; (800b294 <tcp_input+0x290>)
 800b04c:	695b      	ldr	r3, [r3, #20]
 800b04e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b052:	2be0      	cmp	r3, #224	; 0xe0
 800b054:	f000 83c0 	beq.w	800b7d8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b058:	4b8d      	ldr	r3, [pc, #564]	; (800b290 <tcp_input+0x28c>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	899b      	ldrh	r3, [r3, #12]
 800b05e:	b29b      	uxth	r3, r3
 800b060:	4618      	mov	r0, r3
 800b062:	f7fc fdd5 	bl	8007c10 <lwip_htons>
 800b066:	4603      	mov	r3, r0
 800b068:	0b1b      	lsrs	r3, r3, #12
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b072:	7cbb      	ldrb	r3, [r7, #18]
 800b074:	2b13      	cmp	r3, #19
 800b076:	f240 83b1 	bls.w	800b7dc <tcp_input+0x7d8>
 800b07a:	7cbb      	ldrb	r3, [r7, #18]
 800b07c:	b29a      	uxth	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	891b      	ldrh	r3, [r3, #8]
 800b082:	429a      	cmp	r2, r3
 800b084:	f200 83aa 	bhi.w	800b7dc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b088:	7cbb      	ldrb	r3, [r7, #18]
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	3b14      	subs	r3, #20
 800b08e:	b29a      	uxth	r2, r3
 800b090:	4b81      	ldr	r3, [pc, #516]	; (800b298 <tcp_input+0x294>)
 800b092:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b094:	4b81      	ldr	r3, [pc, #516]	; (800b29c <tcp_input+0x298>)
 800b096:	2200      	movs	r2, #0
 800b098:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	895a      	ldrh	r2, [r3, #10]
 800b09e:	7cbb      	ldrb	r3, [r7, #18]
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d309      	bcc.n	800b0ba <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b0a6:	4b7c      	ldr	r3, [pc, #496]	; (800b298 <tcp_input+0x294>)
 800b0a8:	881a      	ldrh	r2, [r3, #0]
 800b0aa:	4b7d      	ldr	r3, [pc, #500]	; (800b2a0 <tcp_input+0x29c>)
 800b0ac:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b0ae:	7cbb      	ldrb	r3, [r7, #18]
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7fe f884 	bl	80091c0 <pbuf_remove_header>
 800b0b8:	e04e      	b.n	800b158 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d105      	bne.n	800b0ce <tcp_input+0xca>
 800b0c2:	4b70      	ldr	r3, [pc, #448]	; (800b284 <tcp_input+0x280>)
 800b0c4:	22c2      	movs	r2, #194	; 0xc2
 800b0c6:	4977      	ldr	r1, [pc, #476]	; (800b2a4 <tcp_input+0x2a0>)
 800b0c8:	4870      	ldr	r0, [pc, #448]	; (800b28c <tcp_input+0x288>)
 800b0ca:	f007 f883 	bl	80121d4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b0ce:	2114      	movs	r1, #20
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f7fe f875 	bl	80091c0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	895a      	ldrh	r2, [r3, #10]
 800b0da:	4b71      	ldr	r3, [pc, #452]	; (800b2a0 <tcp_input+0x29c>)
 800b0dc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b0de:	4b6e      	ldr	r3, [pc, #440]	; (800b298 <tcp_input+0x294>)
 800b0e0:	881a      	ldrh	r2, [r3, #0]
 800b0e2:	4b6f      	ldr	r3, [pc, #444]	; (800b2a0 <tcp_input+0x29c>)
 800b0e4:	881b      	ldrh	r3, [r3, #0]
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b0ea:	4b6d      	ldr	r3, [pc, #436]	; (800b2a0 <tcp_input+0x29c>)
 800b0ec:	881b      	ldrh	r3, [r3, #0]
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f7fe f865 	bl	80091c0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	895b      	ldrh	r3, [r3, #10]
 800b0fc:	8a3a      	ldrh	r2, [r7, #16]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	f200 836e 	bhi.w	800b7e0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	4a64      	ldr	r2, [pc, #400]	; (800b29c <tcp_input+0x298>)
 800b10c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	8a3a      	ldrh	r2, [r7, #16]
 800b114:	4611      	mov	r1, r2
 800b116:	4618      	mov	r0, r3
 800b118:	f7fe f852 	bl	80091c0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	891a      	ldrh	r2, [r3, #8]
 800b120:	8a3b      	ldrh	r3, [r7, #16]
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	b29a      	uxth	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	895b      	ldrh	r3, [r3, #10]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d005      	beq.n	800b13e <tcp_input+0x13a>
 800b132:	4b54      	ldr	r3, [pc, #336]	; (800b284 <tcp_input+0x280>)
 800b134:	22df      	movs	r2, #223	; 0xdf
 800b136:	495c      	ldr	r1, [pc, #368]	; (800b2a8 <tcp_input+0x2a4>)
 800b138:	4854      	ldr	r0, [pc, #336]	; (800b28c <tcp_input+0x288>)
 800b13a:	f007 f84b 	bl	80121d4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	891a      	ldrh	r2, [r3, #8]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	891b      	ldrh	r3, [r3, #8]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d005      	beq.n	800b158 <tcp_input+0x154>
 800b14c:	4b4d      	ldr	r3, [pc, #308]	; (800b284 <tcp_input+0x280>)
 800b14e:	22e0      	movs	r2, #224	; 0xe0
 800b150:	4956      	ldr	r1, [pc, #344]	; (800b2ac <tcp_input+0x2a8>)
 800b152:	484e      	ldr	r0, [pc, #312]	; (800b28c <tcp_input+0x288>)
 800b154:	f007 f83e 	bl	80121d4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b158:	4b4d      	ldr	r3, [pc, #308]	; (800b290 <tcp_input+0x28c>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	881b      	ldrh	r3, [r3, #0]
 800b15e:	b29b      	uxth	r3, r3
 800b160:	4a4b      	ldr	r2, [pc, #300]	; (800b290 <tcp_input+0x28c>)
 800b162:	6814      	ldr	r4, [r2, #0]
 800b164:	4618      	mov	r0, r3
 800b166:	f7fc fd53 	bl	8007c10 <lwip_htons>
 800b16a:	4603      	mov	r3, r0
 800b16c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b16e:	4b48      	ldr	r3, [pc, #288]	; (800b290 <tcp_input+0x28c>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	885b      	ldrh	r3, [r3, #2]
 800b174:	b29b      	uxth	r3, r3
 800b176:	4a46      	ldr	r2, [pc, #280]	; (800b290 <tcp_input+0x28c>)
 800b178:	6814      	ldr	r4, [r2, #0]
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fc fd48 	bl	8007c10 <lwip_htons>
 800b180:	4603      	mov	r3, r0
 800b182:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b184:	4b42      	ldr	r3, [pc, #264]	; (800b290 <tcp_input+0x28c>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	4a41      	ldr	r2, [pc, #260]	; (800b290 <tcp_input+0x28c>)
 800b18c:	6814      	ldr	r4, [r2, #0]
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fc fd53 	bl	8007c3a <lwip_htonl>
 800b194:	4603      	mov	r3, r0
 800b196:	6063      	str	r3, [r4, #4]
 800b198:	6863      	ldr	r3, [r4, #4]
 800b19a:	4a45      	ldr	r2, [pc, #276]	; (800b2b0 <tcp_input+0x2ac>)
 800b19c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b19e:	4b3c      	ldr	r3, [pc, #240]	; (800b290 <tcp_input+0x28c>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	4a3a      	ldr	r2, [pc, #232]	; (800b290 <tcp_input+0x28c>)
 800b1a6:	6814      	ldr	r4, [r2, #0]
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7fc fd46 	bl	8007c3a <lwip_htonl>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	60a3      	str	r3, [r4, #8]
 800b1b2:	68a3      	ldr	r3, [r4, #8]
 800b1b4:	4a3f      	ldr	r2, [pc, #252]	; (800b2b4 <tcp_input+0x2b0>)
 800b1b6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b1b8:	4b35      	ldr	r3, [pc, #212]	; (800b290 <tcp_input+0x28c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	89db      	ldrh	r3, [r3, #14]
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	4a33      	ldr	r2, [pc, #204]	; (800b290 <tcp_input+0x28c>)
 800b1c2:	6814      	ldr	r4, [r2, #0]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fc fd23 	bl	8007c10 <lwip_htons>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b1ce:	4b30      	ldr	r3, [pc, #192]	; (800b290 <tcp_input+0x28c>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	899b      	ldrh	r3, [r3, #12]
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fc fd1a 	bl	8007c10 <lwip_htons>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1e4:	b2da      	uxtb	r2, r3
 800b1e6:	4b34      	ldr	r3, [pc, #208]	; (800b2b8 <tcp_input+0x2b4>)
 800b1e8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	891a      	ldrh	r2, [r3, #8]
 800b1ee:	4b33      	ldr	r3, [pc, #204]	; (800b2bc <tcp_input+0x2b8>)
 800b1f0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b1f2:	4b31      	ldr	r3, [pc, #196]	; (800b2b8 <tcp_input+0x2b4>)
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	f003 0303 	and.w	r3, r3, #3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00c      	beq.n	800b218 <tcp_input+0x214>
    tcplen++;
 800b1fe:	4b2f      	ldr	r3, [pc, #188]	; (800b2bc <tcp_input+0x2b8>)
 800b200:	881b      	ldrh	r3, [r3, #0]
 800b202:	3301      	adds	r3, #1
 800b204:	b29a      	uxth	r2, r3
 800b206:	4b2d      	ldr	r3, [pc, #180]	; (800b2bc <tcp_input+0x2b8>)
 800b208:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	891a      	ldrh	r2, [r3, #8]
 800b20e:	4b2b      	ldr	r3, [pc, #172]	; (800b2bc <tcp_input+0x2b8>)
 800b210:	881b      	ldrh	r3, [r3, #0]
 800b212:	429a      	cmp	r2, r3
 800b214:	f200 82e6 	bhi.w	800b7e4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b218:	2300      	movs	r3, #0
 800b21a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b21c:	4b28      	ldr	r3, [pc, #160]	; (800b2c0 <tcp_input+0x2bc>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	61fb      	str	r3, [r7, #28]
 800b222:	e09d      	b.n	800b360 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	7d1b      	ldrb	r3, [r3, #20]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d105      	bne.n	800b238 <tcp_input+0x234>
 800b22c:	4b15      	ldr	r3, [pc, #84]	; (800b284 <tcp_input+0x280>)
 800b22e:	22fb      	movs	r2, #251	; 0xfb
 800b230:	4924      	ldr	r1, [pc, #144]	; (800b2c4 <tcp_input+0x2c0>)
 800b232:	4816      	ldr	r0, [pc, #88]	; (800b28c <tcp_input+0x288>)
 800b234:	f006 ffce 	bl	80121d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	7d1b      	ldrb	r3, [r3, #20]
 800b23c:	2b0a      	cmp	r3, #10
 800b23e:	d105      	bne.n	800b24c <tcp_input+0x248>
 800b240:	4b10      	ldr	r3, [pc, #64]	; (800b284 <tcp_input+0x280>)
 800b242:	22fc      	movs	r2, #252	; 0xfc
 800b244:	4920      	ldr	r1, [pc, #128]	; (800b2c8 <tcp_input+0x2c4>)
 800b246:	4811      	ldr	r0, [pc, #68]	; (800b28c <tcp_input+0x288>)
 800b248:	f006 ffc4 	bl	80121d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	7d1b      	ldrb	r3, [r3, #20]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d105      	bne.n	800b260 <tcp_input+0x25c>
 800b254:	4b0b      	ldr	r3, [pc, #44]	; (800b284 <tcp_input+0x280>)
 800b256:	22fd      	movs	r2, #253	; 0xfd
 800b258:	491c      	ldr	r1, [pc, #112]	; (800b2cc <tcp_input+0x2c8>)
 800b25a:	480c      	ldr	r0, [pc, #48]	; (800b28c <tcp_input+0x288>)
 800b25c:	f006 ffba 	bl	80121d4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	7a1b      	ldrb	r3, [r3, #8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d033      	beq.n	800b2d0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	7a1a      	ldrb	r2, [r3, #8]
 800b26c:	4b09      	ldr	r3, [pc, #36]	; (800b294 <tcp_input+0x290>)
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b274:	3301      	adds	r3, #1
 800b276:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b278:	429a      	cmp	r2, r3
 800b27a:	d029      	beq.n	800b2d0 <tcp_input+0x2cc>
      prev = pcb;
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	61bb      	str	r3, [r7, #24]
      continue;
 800b280:	e06b      	b.n	800b35a <tcp_input+0x356>
 800b282:	bf00      	nop
 800b284:	08015968 	.word	0x08015968
 800b288:	0801599c 	.word	0x0801599c
 800b28c:	080159b4 	.word	0x080159b4
 800b290:	2000aaa0 	.word	0x2000aaa0
 800b294:	20005348 	.word	0x20005348
 800b298:	2000aaa4 	.word	0x2000aaa4
 800b29c:	2000aaa8 	.word	0x2000aaa8
 800b2a0:	2000aaa6 	.word	0x2000aaa6
 800b2a4:	080159dc 	.word	0x080159dc
 800b2a8:	080159ec 	.word	0x080159ec
 800b2ac:	080159f8 	.word	0x080159f8
 800b2b0:	2000aab0 	.word	0x2000aab0
 800b2b4:	2000aab4 	.word	0x2000aab4
 800b2b8:	2000aabc 	.word	0x2000aabc
 800b2bc:	2000aaba 	.word	0x2000aaba
 800b2c0:	2000aa84 	.word	0x2000aa84
 800b2c4:	08015a18 	.word	0x08015a18
 800b2c8:	08015a40 	.word	0x08015a40
 800b2cc:	08015a6c 	.word	0x08015a6c
    }

    if (pcb->remote_port == tcphdr->src &&
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	8b1a      	ldrh	r2, [r3, #24]
 800b2d4:	4b72      	ldr	r3, [pc, #456]	; (800b4a0 <tcp_input+0x49c>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	881b      	ldrh	r3, [r3, #0]
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d13a      	bne.n	800b356 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	8ada      	ldrh	r2, [r3, #22]
 800b2e4:	4b6e      	ldr	r3, [pc, #440]	; (800b4a0 <tcp_input+0x49c>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	885b      	ldrh	r3, [r3, #2]
 800b2ea:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d132      	bne.n	800b356 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	685a      	ldr	r2, [r3, #4]
 800b2f4:	4b6b      	ldr	r3, [pc, #428]	; (800b4a4 <tcp_input+0x4a0>)
 800b2f6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d12c      	bne.n	800b356 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	4b68      	ldr	r3, [pc, #416]	; (800b4a4 <tcp_input+0x4a0>)
 800b302:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b304:	429a      	cmp	r2, r3
 800b306:	d126      	bne.n	800b356 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	69fa      	ldr	r2, [r7, #28]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d106      	bne.n	800b320 <tcp_input+0x31c>
 800b312:	4b65      	ldr	r3, [pc, #404]	; (800b4a8 <tcp_input+0x4a4>)
 800b314:	f240 120d 	movw	r2, #269	; 0x10d
 800b318:	4964      	ldr	r1, [pc, #400]	; (800b4ac <tcp_input+0x4a8>)
 800b31a:	4865      	ldr	r0, [pc, #404]	; (800b4b0 <tcp_input+0x4ac>)
 800b31c:	f006 ff5a 	bl	80121d4 <iprintf>
      if (prev != NULL) {
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00a      	beq.n	800b33c <tcp_input+0x338>
        prev->next = pcb->next;
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	68da      	ldr	r2, [r3, #12]
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b32e:	4b61      	ldr	r3, [pc, #388]	; (800b4b4 <tcp_input+0x4b0>)
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b336:	4a5f      	ldr	r2, [pc, #380]	; (800b4b4 <tcp_input+0x4b0>)
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	69fa      	ldr	r2, [r7, #28]
 800b342:	429a      	cmp	r2, r3
 800b344:	d111      	bne.n	800b36a <tcp_input+0x366>
 800b346:	4b58      	ldr	r3, [pc, #352]	; (800b4a8 <tcp_input+0x4a4>)
 800b348:	f240 1215 	movw	r2, #277	; 0x115
 800b34c:	495a      	ldr	r1, [pc, #360]	; (800b4b8 <tcp_input+0x4b4>)
 800b34e:	4858      	ldr	r0, [pc, #352]	; (800b4b0 <tcp_input+0x4ac>)
 800b350:	f006 ff40 	bl	80121d4 <iprintf>
      break;
 800b354:	e009      	b.n	800b36a <tcp_input+0x366>
    }
    prev = pcb;
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	61fb      	str	r3, [r7, #28]
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	2b00      	cmp	r3, #0
 800b364:	f47f af5e 	bne.w	800b224 <tcp_input+0x220>
 800b368:	e000      	b.n	800b36c <tcp_input+0x368>
      break;
 800b36a:	bf00      	nop
  }

  if (pcb == NULL) {
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	f040 80aa 	bne.w	800b4c8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b374:	4b51      	ldr	r3, [pc, #324]	; (800b4bc <tcp_input+0x4b8>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	61fb      	str	r3, [r7, #28]
 800b37a:	e03f      	b.n	800b3fc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	7d1b      	ldrb	r3, [r3, #20]
 800b380:	2b0a      	cmp	r3, #10
 800b382:	d006      	beq.n	800b392 <tcp_input+0x38e>
 800b384:	4b48      	ldr	r3, [pc, #288]	; (800b4a8 <tcp_input+0x4a4>)
 800b386:	f240 121f 	movw	r2, #287	; 0x11f
 800b38a:	494d      	ldr	r1, [pc, #308]	; (800b4c0 <tcp_input+0x4bc>)
 800b38c:	4848      	ldr	r0, [pc, #288]	; (800b4b0 <tcp_input+0x4ac>)
 800b38e:	f006 ff21 	bl	80121d4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	7a1b      	ldrb	r3, [r3, #8]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d009      	beq.n	800b3ae <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	7a1a      	ldrb	r2, [r3, #8]
 800b39e:	4b41      	ldr	r3, [pc, #260]	; (800b4a4 <tcp_input+0x4a0>)
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d122      	bne.n	800b3f4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	8b1a      	ldrh	r2, [r3, #24]
 800b3b2:	4b3b      	ldr	r3, [pc, #236]	; (800b4a0 <tcp_input+0x49c>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	881b      	ldrh	r3, [r3, #0]
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d11b      	bne.n	800b3f6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	8ada      	ldrh	r2, [r3, #22]
 800b3c2:	4b37      	ldr	r3, [pc, #220]	; (800b4a0 <tcp_input+0x49c>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	885b      	ldrh	r3, [r3, #2]
 800b3c8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d113      	bne.n	800b3f6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	685a      	ldr	r2, [r3, #4]
 800b3d2:	4b34      	ldr	r3, [pc, #208]	; (800b4a4 <tcp_input+0x4a0>)
 800b3d4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d10d      	bne.n	800b3f6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	4b31      	ldr	r3, [pc, #196]	; (800b4a4 <tcp_input+0x4a0>)
 800b3e0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d107      	bne.n	800b3f6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b3e6:	69f8      	ldr	r0, [r7, #28]
 800b3e8:	f000 fb56 	bl	800ba98 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f7fd ff6d 	bl	80092cc <pbuf_free>
        return;
 800b3f2:	e1fd      	b.n	800b7f0 <tcp_input+0x7ec>
        continue;
 800b3f4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	61fb      	str	r3, [r7, #28]
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d1bc      	bne.n	800b37c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b402:	2300      	movs	r3, #0
 800b404:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b406:	4b2f      	ldr	r3, [pc, #188]	; (800b4c4 <tcp_input+0x4c0>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	617b      	str	r3, [r7, #20]
 800b40c:	e02a      	b.n	800b464 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	7a1b      	ldrb	r3, [r3, #8]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00c      	beq.n	800b430 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	7a1a      	ldrb	r2, [r3, #8]
 800b41a:	4b22      	ldr	r3, [pc, #136]	; (800b4a4 <tcp_input+0x4a0>)
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b422:	3301      	adds	r3, #1
 800b424:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b426:	429a      	cmp	r2, r3
 800b428:	d002      	beq.n	800b430 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	61bb      	str	r3, [r7, #24]
        continue;
 800b42e:	e016      	b.n	800b45e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	8ada      	ldrh	r2, [r3, #22]
 800b434:	4b1a      	ldr	r3, [pc, #104]	; (800b4a0 <tcp_input+0x49c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	885b      	ldrh	r3, [r3, #2]
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d10c      	bne.n	800b45a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	4b17      	ldr	r3, [pc, #92]	; (800b4a4 <tcp_input+0x4a0>)
 800b446:	695b      	ldr	r3, [r3, #20]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d00f      	beq.n	800b46c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00d      	beq.n	800b46e <tcp_input+0x46a>
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d009      	beq.n	800b46e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	617b      	str	r3, [r7, #20]
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1d1      	bne.n	800b40e <tcp_input+0x40a>
 800b46a:	e000      	b.n	800b46e <tcp_input+0x46a>
            break;
 800b46c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d029      	beq.n	800b4c8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00a      	beq.n	800b490 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	68da      	ldr	r2, [r3, #12]
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b482:	4b10      	ldr	r3, [pc, #64]	; (800b4c4 <tcp_input+0x4c0>)
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b48a:	4a0e      	ldr	r2, [pc, #56]	; (800b4c4 <tcp_input+0x4c0>)
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b490:	6978      	ldr	r0, [r7, #20]
 800b492:	f000 fa03 	bl	800b89c <tcp_listen_input>
      }
      pbuf_free(p);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7fd ff18 	bl	80092cc <pbuf_free>
      return;
 800b49c:	e1a8      	b.n	800b7f0 <tcp_input+0x7ec>
 800b49e:	bf00      	nop
 800b4a0:	2000aaa0 	.word	0x2000aaa0
 800b4a4:	20005348 	.word	0x20005348
 800b4a8:	08015968 	.word	0x08015968
 800b4ac:	08015a94 	.word	0x08015a94
 800b4b0:	080159b4 	.word	0x080159b4
 800b4b4:	2000aa84 	.word	0x2000aa84
 800b4b8:	08015ac0 	.word	0x08015ac0
 800b4bc:	2000aa88 	.word	0x2000aa88
 800b4c0:	08015aec 	.word	0x08015aec
 800b4c4:	2000aa80 	.word	0x2000aa80
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	f000 8158 	beq.w	800b780 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b4d0:	4b95      	ldr	r3, [pc, #596]	; (800b728 <tcp_input+0x724>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	891a      	ldrh	r2, [r3, #8]
 800b4da:	4b93      	ldr	r3, [pc, #588]	; (800b728 <tcp_input+0x724>)
 800b4dc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b4de:	4a92      	ldr	r2, [pc, #584]	; (800b728 <tcp_input+0x724>)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b4e4:	4b91      	ldr	r3, [pc, #580]	; (800b72c <tcp_input+0x728>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a8f      	ldr	r2, [pc, #572]	; (800b728 <tcp_input+0x724>)
 800b4ea:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b4ec:	4b90      	ldr	r3, [pc, #576]	; (800b730 <tcp_input+0x72c>)
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b4f2:	4b90      	ldr	r3, [pc, #576]	; (800b734 <tcp_input+0x730>)
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b4f8:	4b8f      	ldr	r3, [pc, #572]	; (800b738 <tcp_input+0x734>)
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b4fe:	4b8f      	ldr	r3, [pc, #572]	; (800b73c <tcp_input+0x738>)
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	f003 0308 	and.w	r3, r3, #8
 800b506:	2b00      	cmp	r3, #0
 800b508:	d006      	beq.n	800b518 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	7b5b      	ldrb	r3, [r3, #13]
 800b50e:	f043 0301 	orr.w	r3, r3, #1
 800b512:	b2da      	uxtb	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d017      	beq.n	800b550 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b520:	69f8      	ldr	r0, [r7, #28]
 800b522:	f7ff f929 	bl	800a778 <tcp_process_refused_data>
 800b526:	4603      	mov	r3, r0
 800b528:	f113 0f0d 	cmn.w	r3, #13
 800b52c:	d007      	beq.n	800b53e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00c      	beq.n	800b550 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b536:	4b82      	ldr	r3, [pc, #520]	; (800b740 <tcp_input+0x73c>)
 800b538:	881b      	ldrh	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d008      	beq.n	800b550 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b542:	2b00      	cmp	r3, #0
 800b544:	f040 80e3 	bne.w	800b70e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b548:	69f8      	ldr	r0, [r7, #28]
 800b54a:	f003 f9ad 	bl	800e8a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b54e:	e0de      	b.n	800b70e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b550:	4a7c      	ldr	r2, [pc, #496]	; (800b744 <tcp_input+0x740>)
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b556:	69f8      	ldr	r0, [r7, #28]
 800b558:	f000 fb18 	bl	800bb8c <tcp_process>
 800b55c:	4603      	mov	r3, r0
 800b55e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b560:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b564:	f113 0f0d 	cmn.w	r3, #13
 800b568:	f000 80d3 	beq.w	800b712 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b56c:	4b71      	ldr	r3, [pc, #452]	; (800b734 <tcp_input+0x730>)
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	f003 0308 	and.w	r3, r3, #8
 800b574:	2b00      	cmp	r3, #0
 800b576:	d015      	beq.n	800b5a4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d008      	beq.n	800b594 <tcp_input+0x590>
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b588:	69fa      	ldr	r2, [r7, #28]
 800b58a:	6912      	ldr	r2, [r2, #16]
 800b58c:	f06f 010d 	mvn.w	r1, #13
 800b590:	4610      	mov	r0, r2
 800b592:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b594:	69f9      	ldr	r1, [r7, #28]
 800b596:	486c      	ldr	r0, [pc, #432]	; (800b748 <tcp_input+0x744>)
 800b598:	f7ff fbbc 	bl	800ad14 <tcp_pcb_remove>
        tcp_free(pcb);
 800b59c:	69f8      	ldr	r0, [r7, #28]
 800b59e:	f7fe f9a9 	bl	80098f4 <tcp_free>
 800b5a2:	e0da      	b.n	800b75a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b5a8:	4b63      	ldr	r3, [pc, #396]	; (800b738 <tcp_input+0x734>)
 800b5aa:	881b      	ldrh	r3, [r3, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d01d      	beq.n	800b5ec <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b5b0:	4b61      	ldr	r3, [pc, #388]	; (800b738 <tcp_input+0x734>)
 800b5b2:	881b      	ldrh	r3, [r3, #0]
 800b5b4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00a      	beq.n	800b5d6 <tcp_input+0x5d2>
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5c6:	69fa      	ldr	r2, [r7, #28]
 800b5c8:	6910      	ldr	r0, [r2, #16]
 800b5ca:	89fa      	ldrh	r2, [r7, #14]
 800b5cc:	69f9      	ldr	r1, [r7, #28]
 800b5ce:	4798      	blx	r3
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	74fb      	strb	r3, [r7, #19]
 800b5d4:	e001      	b.n	800b5da <tcp_input+0x5d6>
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b5da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b5de:	f113 0f0d 	cmn.w	r3, #13
 800b5e2:	f000 8098 	beq.w	800b716 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b5e6:	4b54      	ldr	r3, [pc, #336]	; (800b738 <tcp_input+0x734>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b5ec:	69f8      	ldr	r0, [r7, #28]
 800b5ee:	f000 f915 	bl	800b81c <tcp_input_delayed_close>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f040 8090 	bne.w	800b71a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b5fa:	4b4d      	ldr	r3, [pc, #308]	; (800b730 <tcp_input+0x72c>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d041      	beq.n	800b686 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b606:	2b00      	cmp	r3, #0
 800b608:	d006      	beq.n	800b618 <tcp_input+0x614>
 800b60a:	4b50      	ldr	r3, [pc, #320]	; (800b74c <tcp_input+0x748>)
 800b60c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b610:	494f      	ldr	r1, [pc, #316]	; (800b750 <tcp_input+0x74c>)
 800b612:	4850      	ldr	r0, [pc, #320]	; (800b754 <tcp_input+0x750>)
 800b614:	f006 fdde 	bl	80121d4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	8b5b      	ldrh	r3, [r3, #26]
 800b61c:	f003 0310 	and.w	r3, r3, #16
 800b620:	2b00      	cmp	r3, #0
 800b622:	d008      	beq.n	800b636 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b624:	4b42      	ldr	r3, [pc, #264]	; (800b730 <tcp_input+0x72c>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4618      	mov	r0, r3
 800b62a:	f7fd fe4f 	bl	80092cc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b62e:	69f8      	ldr	r0, [r7, #28]
 800b630:	f7fe fc48 	bl	8009ec4 <tcp_abort>
            goto aborted;
 800b634:	e091      	b.n	800b75a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00c      	beq.n	800b65a <tcp_input+0x656>
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	6918      	ldr	r0, [r3, #16]
 800b64a:	4b39      	ldr	r3, [pc, #228]	; (800b730 <tcp_input+0x72c>)
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	2300      	movs	r3, #0
 800b650:	69f9      	ldr	r1, [r7, #28]
 800b652:	47a0      	blx	r4
 800b654:	4603      	mov	r3, r0
 800b656:	74fb      	strb	r3, [r7, #19]
 800b658:	e008      	b.n	800b66c <tcp_input+0x668>
 800b65a:	4b35      	ldr	r3, [pc, #212]	; (800b730 <tcp_input+0x72c>)
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	2300      	movs	r3, #0
 800b660:	69f9      	ldr	r1, [r7, #28]
 800b662:	2000      	movs	r0, #0
 800b664:	f7ff f95e 	bl	800a924 <tcp_recv_null>
 800b668:	4603      	mov	r3, r0
 800b66a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b66c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b670:	f113 0f0d 	cmn.w	r3, #13
 800b674:	d053      	beq.n	800b71e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b676:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d003      	beq.n	800b686 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b67e:	4b2c      	ldr	r3, [pc, #176]	; (800b730 <tcp_input+0x72c>)
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b686:	4b2b      	ldr	r3, [pc, #172]	; (800b734 <tcp_input+0x730>)
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	f003 0320 	and.w	r3, r3, #32
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d030      	beq.n	800b6f4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b696:	2b00      	cmp	r3, #0
 800b698:	d009      	beq.n	800b6ae <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b69e:	7b5a      	ldrb	r2, [r3, #13]
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6a4:	f042 0220 	orr.w	r2, r2, #32
 800b6a8:	b2d2      	uxtb	r2, r2
 800b6aa:	735a      	strb	r2, [r3, #13]
 800b6ac:	e022      	b.n	800b6f4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b6b6:	d005      	beq.n	800b6c4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6bc:	3301      	adds	r3, #1
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00b      	beq.n	800b6e6 <tcp_input+0x6e2>
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	6918      	ldr	r0, [r3, #16]
 800b6d8:	2300      	movs	r3, #0
 800b6da:	2200      	movs	r2, #0
 800b6dc:	69f9      	ldr	r1, [r7, #28]
 800b6de:	47a0      	blx	r4
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	74fb      	strb	r3, [r7, #19]
 800b6e4:	e001      	b.n	800b6ea <tcp_input+0x6e6>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b6ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b6ee:	f113 0f0d 	cmn.w	r3, #13
 800b6f2:	d016      	beq.n	800b722 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b6f4:	4b13      	ldr	r3, [pc, #76]	; (800b744 <tcp_input+0x740>)
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b6fa:	69f8      	ldr	r0, [r7, #28]
 800b6fc:	f000 f88e 	bl	800b81c <tcp_input_delayed_close>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d128      	bne.n	800b758 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b706:	69f8      	ldr	r0, [r7, #28]
 800b708:	f002 fac8 	bl	800dc9c <tcp_output>
 800b70c:	e025      	b.n	800b75a <tcp_input+0x756>
        goto aborted;
 800b70e:	bf00      	nop
 800b710:	e023      	b.n	800b75a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b712:	bf00      	nop
 800b714:	e021      	b.n	800b75a <tcp_input+0x756>
              goto aborted;
 800b716:	bf00      	nop
 800b718:	e01f      	b.n	800b75a <tcp_input+0x756>
          goto aborted;
 800b71a:	bf00      	nop
 800b71c:	e01d      	b.n	800b75a <tcp_input+0x756>
            goto aborted;
 800b71e:	bf00      	nop
 800b720:	e01b      	b.n	800b75a <tcp_input+0x756>
              goto aborted;
 800b722:	bf00      	nop
 800b724:	e019      	b.n	800b75a <tcp_input+0x756>
 800b726:	bf00      	nop
 800b728:	2000aa90 	.word	0x2000aa90
 800b72c:	2000aaa0 	.word	0x2000aaa0
 800b730:	2000aac0 	.word	0x2000aac0
 800b734:	2000aabd 	.word	0x2000aabd
 800b738:	2000aab8 	.word	0x2000aab8
 800b73c:	2000aabc 	.word	0x2000aabc
 800b740:	2000aaba 	.word	0x2000aaba
 800b744:	2000aac4 	.word	0x2000aac4
 800b748:	2000aa84 	.word	0x2000aa84
 800b74c:	08015968 	.word	0x08015968
 800b750:	08015b1c 	.word	0x08015b1c
 800b754:	080159b4 	.word	0x080159b4
          goto aborted;
 800b758:	bf00      	nop
    tcp_input_pcb = NULL;
 800b75a:	4b27      	ldr	r3, [pc, #156]	; (800b7f8 <tcp_input+0x7f4>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b760:	4b26      	ldr	r3, [pc, #152]	; (800b7fc <tcp_input+0x7f8>)
 800b762:	2200      	movs	r2, #0
 800b764:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b766:	4b26      	ldr	r3, [pc, #152]	; (800b800 <tcp_input+0x7fc>)
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d03f      	beq.n	800b7ee <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b76e:	4b24      	ldr	r3, [pc, #144]	; (800b800 <tcp_input+0x7fc>)
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	4618      	mov	r0, r3
 800b774:	f7fd fdaa 	bl	80092cc <pbuf_free>
      inseg.p = NULL;
 800b778:	4b21      	ldr	r3, [pc, #132]	; (800b800 <tcp_input+0x7fc>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b77e:	e036      	b.n	800b7ee <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b780:	4b20      	ldr	r3, [pc, #128]	; (800b804 <tcp_input+0x800>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	899b      	ldrh	r3, [r3, #12]
 800b786:	b29b      	uxth	r3, r3
 800b788:	4618      	mov	r0, r3
 800b78a:	f7fc fa41 	bl	8007c10 <lwip_htons>
 800b78e:	4603      	mov	r3, r0
 800b790:	b2db      	uxtb	r3, r3
 800b792:	f003 0304 	and.w	r3, r3, #4
 800b796:	2b00      	cmp	r3, #0
 800b798:	d118      	bne.n	800b7cc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b79a:	4b1b      	ldr	r3, [pc, #108]	; (800b808 <tcp_input+0x804>)
 800b79c:	6819      	ldr	r1, [r3, #0]
 800b79e:	4b1b      	ldr	r3, [pc, #108]	; (800b80c <tcp_input+0x808>)
 800b7a0:	881b      	ldrh	r3, [r3, #0]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	4b1a      	ldr	r3, [pc, #104]	; (800b810 <tcp_input+0x80c>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7aa:	4b16      	ldr	r3, [pc, #88]	; (800b804 <tcp_input+0x800>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7ae:	885b      	ldrh	r3, [r3, #2]
 800b7b0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7b2:	4a14      	ldr	r2, [pc, #80]	; (800b804 <tcp_input+0x800>)
 800b7b4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7b6:	8812      	ldrh	r2, [r2, #0]
 800b7b8:	b292      	uxth	r2, r2
 800b7ba:	9202      	str	r2, [sp, #8]
 800b7bc:	9301      	str	r3, [sp, #4]
 800b7be:	4b15      	ldr	r3, [pc, #84]	; (800b814 <tcp_input+0x810>)
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	4b15      	ldr	r3, [pc, #84]	; (800b818 <tcp_input+0x814>)
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	2000      	movs	r0, #0
 800b7c8:	f003 f81c 	bl	800e804 <tcp_rst>
    pbuf_free(p);
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f7fd fd7d 	bl	80092cc <pbuf_free>
  return;
 800b7d2:	e00c      	b.n	800b7ee <tcp_input+0x7ea>
    goto dropped;
 800b7d4:	bf00      	nop
 800b7d6:	e006      	b.n	800b7e6 <tcp_input+0x7e2>
    goto dropped;
 800b7d8:	bf00      	nop
 800b7da:	e004      	b.n	800b7e6 <tcp_input+0x7e2>
    goto dropped;
 800b7dc:	bf00      	nop
 800b7de:	e002      	b.n	800b7e6 <tcp_input+0x7e2>
      goto dropped;
 800b7e0:	bf00      	nop
 800b7e2:	e000      	b.n	800b7e6 <tcp_input+0x7e2>
      goto dropped;
 800b7e4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f7fd fd70 	bl	80092cc <pbuf_free>
 800b7ec:	e000      	b.n	800b7f0 <tcp_input+0x7ec>
  return;
 800b7ee:	bf00      	nop
}
 800b7f0:	3724      	adds	r7, #36	; 0x24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd90      	pop	{r4, r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	2000aac4 	.word	0x2000aac4
 800b7fc:	2000aac0 	.word	0x2000aac0
 800b800:	2000aa90 	.word	0x2000aa90
 800b804:	2000aaa0 	.word	0x2000aaa0
 800b808:	2000aab4 	.word	0x2000aab4
 800b80c:	2000aaba 	.word	0x2000aaba
 800b810:	2000aab0 	.word	0x2000aab0
 800b814:	20005358 	.word	0x20005358
 800b818:	2000535c 	.word	0x2000535c

0800b81c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d106      	bne.n	800b838 <tcp_input_delayed_close+0x1c>
 800b82a:	4b17      	ldr	r3, [pc, #92]	; (800b888 <tcp_input_delayed_close+0x6c>)
 800b82c:	f240 225a 	movw	r2, #602	; 0x25a
 800b830:	4916      	ldr	r1, [pc, #88]	; (800b88c <tcp_input_delayed_close+0x70>)
 800b832:	4817      	ldr	r0, [pc, #92]	; (800b890 <tcp_input_delayed_close+0x74>)
 800b834:	f006 fcce 	bl	80121d4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b838:	4b16      	ldr	r3, [pc, #88]	; (800b894 <tcp_input_delayed_close+0x78>)
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	f003 0310 	and.w	r3, r3, #16
 800b840:	2b00      	cmp	r3, #0
 800b842:	d01c      	beq.n	800b87e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	8b5b      	ldrh	r3, [r3, #26]
 800b848:	f003 0310 	and.w	r3, r3, #16
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10d      	bne.n	800b86c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b856:	2b00      	cmp	r3, #0
 800b858:	d008      	beq.n	800b86c <tcp_input_delayed_close+0x50>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	6912      	ldr	r2, [r2, #16]
 800b864:	f06f 010e 	mvn.w	r1, #14
 800b868:	4610      	mov	r0, r2
 800b86a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b86c:	6879      	ldr	r1, [r7, #4]
 800b86e:	480a      	ldr	r0, [pc, #40]	; (800b898 <tcp_input_delayed_close+0x7c>)
 800b870:	f7ff fa50 	bl	800ad14 <tcp_pcb_remove>
    tcp_free(pcb);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f7fe f83d 	bl	80098f4 <tcp_free>
    return 1;
 800b87a:	2301      	movs	r3, #1
 800b87c:	e000      	b.n	800b880 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	08015968 	.word	0x08015968
 800b88c:	08015b38 	.word	0x08015b38
 800b890:	080159b4 	.word	0x080159b4
 800b894:	2000aabd 	.word	0x2000aabd
 800b898:	2000aa84 	.word	0x2000aa84

0800b89c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b89c:	b590      	push	{r4, r7, lr}
 800b89e:	b08b      	sub	sp, #44	; 0x2c
 800b8a0:	af04      	add	r7, sp, #16
 800b8a2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b8a4:	4b6f      	ldr	r3, [pc, #444]	; (800ba64 <tcp_listen_input+0x1c8>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	f003 0304 	and.w	r3, r3, #4
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f040 80d2 	bne.w	800ba56 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d106      	bne.n	800b8c6 <tcp_listen_input+0x2a>
 800b8b8:	4b6b      	ldr	r3, [pc, #428]	; (800ba68 <tcp_listen_input+0x1cc>)
 800b8ba:	f240 2281 	movw	r2, #641	; 0x281
 800b8be:	496b      	ldr	r1, [pc, #428]	; (800ba6c <tcp_listen_input+0x1d0>)
 800b8c0:	486b      	ldr	r0, [pc, #428]	; (800ba70 <tcp_listen_input+0x1d4>)
 800b8c2:	f006 fc87 	bl	80121d4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b8c6:	4b67      	ldr	r3, [pc, #412]	; (800ba64 <tcp_listen_input+0x1c8>)
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	f003 0310 	and.w	r3, r3, #16
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d019      	beq.n	800b906 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8d2:	4b68      	ldr	r3, [pc, #416]	; (800ba74 <tcp_listen_input+0x1d8>)
 800b8d4:	6819      	ldr	r1, [r3, #0]
 800b8d6:	4b68      	ldr	r3, [pc, #416]	; (800ba78 <tcp_listen_input+0x1dc>)
 800b8d8:	881b      	ldrh	r3, [r3, #0]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	4b67      	ldr	r3, [pc, #412]	; (800ba7c <tcp_listen_input+0x1e0>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8e2:	4b67      	ldr	r3, [pc, #412]	; (800ba80 <tcp_listen_input+0x1e4>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8e6:	885b      	ldrh	r3, [r3, #2]
 800b8e8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8ea:	4a65      	ldr	r2, [pc, #404]	; (800ba80 <tcp_listen_input+0x1e4>)
 800b8ec:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8ee:	8812      	ldrh	r2, [r2, #0]
 800b8f0:	b292      	uxth	r2, r2
 800b8f2:	9202      	str	r2, [sp, #8]
 800b8f4:	9301      	str	r3, [sp, #4]
 800b8f6:	4b63      	ldr	r3, [pc, #396]	; (800ba84 <tcp_listen_input+0x1e8>)
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	4b63      	ldr	r3, [pc, #396]	; (800ba88 <tcp_listen_input+0x1ec>)
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f002 ff80 	bl	800e804 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b904:	e0a9      	b.n	800ba5a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b906:	4b57      	ldr	r3, [pc, #348]	; (800ba64 <tcp_listen_input+0x1c8>)
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	f003 0302 	and.w	r3, r3, #2
 800b90e:	2b00      	cmp	r3, #0
 800b910:	f000 80a3 	beq.w	800ba5a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	7d5b      	ldrb	r3, [r3, #21]
 800b918:	4618      	mov	r0, r3
 800b91a:	f7ff f927 	bl	800ab6c <tcp_alloc>
 800b91e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d111      	bne.n	800b94a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	699b      	ldr	r3, [r3, #24]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00a      	beq.n	800b944 <tcp_listen_input+0xa8>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	699b      	ldr	r3, [r3, #24]
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	6910      	ldr	r0, [r2, #16]
 800b936:	f04f 32ff 	mov.w	r2, #4294967295
 800b93a:	2100      	movs	r1, #0
 800b93c:	4798      	blx	r3
 800b93e:	4603      	mov	r3, r0
 800b940:	73bb      	strb	r3, [r7, #14]
      return;
 800b942:	e08b      	b.n	800ba5c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b944:	23f0      	movs	r3, #240	; 0xf0
 800b946:	73bb      	strb	r3, [r7, #14]
      return;
 800b948:	e088      	b.n	800ba5c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b94a:	4b50      	ldr	r3, [pc, #320]	; (800ba8c <tcp_listen_input+0x1f0>)
 800b94c:	695a      	ldr	r2, [r3, #20]
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b952:	4b4e      	ldr	r3, [pc, #312]	; (800ba8c <tcp_listen_input+0x1f0>)
 800b954:	691a      	ldr	r2, [r3, #16]
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	8ada      	ldrh	r2, [r3, #22]
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b962:	4b47      	ldr	r3, [pc, #284]	; (800ba80 <tcp_listen_input+0x1e4>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	881b      	ldrh	r3, [r3, #0]
 800b968:	b29a      	uxth	r2, r3
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	2203      	movs	r2, #3
 800b972:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b974:	4b41      	ldr	r3, [pc, #260]	; (800ba7c <tcp_listen_input+0x1e0>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	1c5a      	adds	r2, r3, #1
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b986:	6978      	ldr	r0, [r7, #20]
 800b988:	f7ff fa58 	bl	800ae3c <tcp_next_iss>
 800b98c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	693a      	ldr	r2, [r7, #16]
 800b998:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	693a      	ldr	r2, [r7, #16]
 800b99e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	693a      	ldr	r2, [r7, #16]
 800b9a4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b9a6:	4b35      	ldr	r3, [pc, #212]	; (800ba7c <tcp_listen_input+0x1e0>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	1e5a      	subs	r2, r3, #1
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	691a      	ldr	r2, [r3, #16]
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	7a5b      	ldrb	r3, [r3, #9]
 800b9c2:	f003 030c 	and.w	r3, r3, #12
 800b9c6:	b2da      	uxtb	r2, r3
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	7a1a      	ldrb	r2, [r3, #8]
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b9d4:	4b2e      	ldr	r3, [pc, #184]	; (800ba90 <tcp_listen_input+0x1f4>)
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	60da      	str	r2, [r3, #12]
 800b9dc:	4a2c      	ldr	r2, [pc, #176]	; (800ba90 <tcp_listen_input+0x1f4>)
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	6013      	str	r3, [r2, #0]
 800b9e2:	f003 f8d1 	bl	800eb88 <tcp_timer_needed>
 800b9e6:	4b2b      	ldr	r3, [pc, #172]	; (800ba94 <tcp_listen_input+0x1f8>)
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b9ec:	6978      	ldr	r0, [r7, #20]
 800b9ee:	f001 fd8f 	bl	800d510 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b9f2:	4b23      	ldr	r3, [pc, #140]	; (800ba80 <tcp_listen_input+0x1e4>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	89db      	ldrh	r3, [r3, #14]
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	3304      	adds	r3, #4
 800ba14:	4618      	mov	r0, r3
 800ba16:	f005 f86d 	bl	8010af4 <ip4_route>
 800ba1a:	4601      	mov	r1, r0
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	3304      	adds	r3, #4
 800ba20:	461a      	mov	r2, r3
 800ba22:	4620      	mov	r0, r4
 800ba24:	f7ff fa30 	bl	800ae88 <tcp_eff_send_mss_netif>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ba30:	2112      	movs	r1, #18
 800ba32:	6978      	ldr	r0, [r7, #20]
 800ba34:	f002 f844 	bl	800dac0 <tcp_enqueue_flags>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ba3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d004      	beq.n	800ba4e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ba44:	2100      	movs	r1, #0
 800ba46:	6978      	ldr	r0, [r7, #20]
 800ba48:	f7fe f97e 	bl	8009d48 <tcp_abandon>
      return;
 800ba4c:	e006      	b.n	800ba5c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ba4e:	6978      	ldr	r0, [r7, #20]
 800ba50:	f002 f924 	bl	800dc9c <tcp_output>
  return;
 800ba54:	e001      	b.n	800ba5a <tcp_listen_input+0x1be>
    return;
 800ba56:	bf00      	nop
 800ba58:	e000      	b.n	800ba5c <tcp_listen_input+0x1c0>
  return;
 800ba5a:	bf00      	nop
}
 800ba5c:	371c      	adds	r7, #28
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd90      	pop	{r4, r7, pc}
 800ba62:	bf00      	nop
 800ba64:	2000aabc 	.word	0x2000aabc
 800ba68:	08015968 	.word	0x08015968
 800ba6c:	08015b60 	.word	0x08015b60
 800ba70:	080159b4 	.word	0x080159b4
 800ba74:	2000aab4 	.word	0x2000aab4
 800ba78:	2000aaba 	.word	0x2000aaba
 800ba7c:	2000aab0 	.word	0x2000aab0
 800ba80:	2000aaa0 	.word	0x2000aaa0
 800ba84:	20005358 	.word	0x20005358
 800ba88:	2000535c 	.word	0x2000535c
 800ba8c:	20005348 	.word	0x20005348
 800ba90:	2000aa84 	.word	0x2000aa84
 800ba94:	2000aa8c 	.word	0x2000aa8c

0800ba98 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b086      	sub	sp, #24
 800ba9c:	af04      	add	r7, sp, #16
 800ba9e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800baa0:	4b2f      	ldr	r3, [pc, #188]	; (800bb60 <tcp_timewait_input+0xc8>)
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	f003 0304 	and.w	r3, r3, #4
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d153      	bne.n	800bb54 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d106      	bne.n	800bac0 <tcp_timewait_input+0x28>
 800bab2:	4b2c      	ldr	r3, [pc, #176]	; (800bb64 <tcp_timewait_input+0xcc>)
 800bab4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800bab8:	492b      	ldr	r1, [pc, #172]	; (800bb68 <tcp_timewait_input+0xd0>)
 800baba:	482c      	ldr	r0, [pc, #176]	; (800bb6c <tcp_timewait_input+0xd4>)
 800babc:	f006 fb8a 	bl	80121d4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800bac0:	4b27      	ldr	r3, [pc, #156]	; (800bb60 <tcp_timewait_input+0xc8>)
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	f003 0302 	and.w	r3, r3, #2
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d02a      	beq.n	800bb22 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800bacc:	4b28      	ldr	r3, [pc, #160]	; (800bb70 <tcp_timewait_input+0xd8>)
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	db2d      	blt.n	800bb36 <tcp_timewait_input+0x9e>
 800bada:	4b25      	ldr	r3, [pc, #148]	; (800bb70 <tcp_timewait_input+0xd8>)
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae2:	6879      	ldr	r1, [r7, #4]
 800bae4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bae6:	440b      	add	r3, r1
 800bae8:	1ad3      	subs	r3, r2, r3
 800baea:	2b00      	cmp	r3, #0
 800baec:	dc23      	bgt.n	800bb36 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800baee:	4b21      	ldr	r3, [pc, #132]	; (800bb74 <tcp_timewait_input+0xdc>)
 800baf0:	6819      	ldr	r1, [r3, #0]
 800baf2:	4b21      	ldr	r3, [pc, #132]	; (800bb78 <tcp_timewait_input+0xe0>)
 800baf4:	881b      	ldrh	r3, [r3, #0]
 800baf6:	461a      	mov	r2, r3
 800baf8:	4b1d      	ldr	r3, [pc, #116]	; (800bb70 <tcp_timewait_input+0xd8>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bafe:	4b1f      	ldr	r3, [pc, #124]	; (800bb7c <tcp_timewait_input+0xe4>)
 800bb00:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb02:	885b      	ldrh	r3, [r3, #2]
 800bb04:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb06:	4a1d      	ldr	r2, [pc, #116]	; (800bb7c <tcp_timewait_input+0xe4>)
 800bb08:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb0a:	8812      	ldrh	r2, [r2, #0]
 800bb0c:	b292      	uxth	r2, r2
 800bb0e:	9202      	str	r2, [sp, #8]
 800bb10:	9301      	str	r3, [sp, #4]
 800bb12:	4b1b      	ldr	r3, [pc, #108]	; (800bb80 <tcp_timewait_input+0xe8>)
 800bb14:	9300      	str	r3, [sp, #0]
 800bb16:	4b1b      	ldr	r3, [pc, #108]	; (800bb84 <tcp_timewait_input+0xec>)
 800bb18:	4602      	mov	r2, r0
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f002 fe72 	bl	800e804 <tcp_rst>
      return;
 800bb20:	e01b      	b.n	800bb5a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800bb22:	4b0f      	ldr	r3, [pc, #60]	; (800bb60 <tcp_timewait_input+0xc8>)
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	f003 0301 	and.w	r3, r3, #1
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d003      	beq.n	800bb36 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800bb2e:	4b16      	ldr	r3, [pc, #88]	; (800bb88 <tcp_timewait_input+0xf0>)
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800bb36:	4b10      	ldr	r3, [pc, #64]	; (800bb78 <tcp_timewait_input+0xe0>)
 800bb38:	881b      	ldrh	r3, [r3, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00c      	beq.n	800bb58 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	8b5b      	ldrh	r3, [r3, #26]
 800bb42:	f043 0302 	orr.w	r3, r3, #2
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f002 f8a5 	bl	800dc9c <tcp_output>
  }
  return;
 800bb52:	e001      	b.n	800bb58 <tcp_timewait_input+0xc0>
    return;
 800bb54:	bf00      	nop
 800bb56:	e000      	b.n	800bb5a <tcp_timewait_input+0xc2>
  return;
 800bb58:	bf00      	nop
}
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	2000aabc 	.word	0x2000aabc
 800bb64:	08015968 	.word	0x08015968
 800bb68:	08015b80 	.word	0x08015b80
 800bb6c:	080159b4 	.word	0x080159b4
 800bb70:	2000aab0 	.word	0x2000aab0
 800bb74:	2000aab4 	.word	0x2000aab4
 800bb78:	2000aaba 	.word	0x2000aaba
 800bb7c:	2000aaa0 	.word	0x2000aaa0
 800bb80:	20005358 	.word	0x20005358
 800bb84:	2000535c 	.word	0x2000535c
 800bb88:	2000aa78 	.word	0x2000aa78

0800bb8c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800bb8c:	b590      	push	{r4, r7, lr}
 800bb8e:	b08d      	sub	sp, #52	; 0x34
 800bb90:	af04      	add	r7, sp, #16
 800bb92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800bb94:	2300      	movs	r3, #0
 800bb96:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d106      	bne.n	800bbb0 <tcp_process+0x24>
 800bba2:	4b9d      	ldr	r3, [pc, #628]	; (800be18 <tcp_process+0x28c>)
 800bba4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bba8:	499c      	ldr	r1, [pc, #624]	; (800be1c <tcp_process+0x290>)
 800bbaa:	489d      	ldr	r0, [pc, #628]	; (800be20 <tcp_process+0x294>)
 800bbac:	f006 fb12 	bl	80121d4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800bbb0:	4b9c      	ldr	r3, [pc, #624]	; (800be24 <tcp_process+0x298>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	f003 0304 	and.w	r3, r3, #4
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d04e      	beq.n	800bc5a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	7d1b      	ldrb	r3, [r3, #20]
 800bbc0:	2b02      	cmp	r3, #2
 800bbc2:	d108      	bne.n	800bbd6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbc8:	4b97      	ldr	r3, [pc, #604]	; (800be28 <tcp_process+0x29c>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d123      	bne.n	800bc18 <tcp_process+0x8c>
        acceptable = 1;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	76fb      	strb	r3, [r7, #27]
 800bbd4:	e020      	b.n	800bc18 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbda:	4b94      	ldr	r3, [pc, #592]	; (800be2c <tcp_process+0x2a0>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d102      	bne.n	800bbe8 <tcp_process+0x5c>
        acceptable = 1;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	76fb      	strb	r3, [r7, #27]
 800bbe6:	e017      	b.n	800bc18 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bbe8:	4b90      	ldr	r3, [pc, #576]	; (800be2c <tcp_process+0x2a0>)
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	db10      	blt.n	800bc18 <tcp_process+0x8c>
 800bbf6:	4b8d      	ldr	r3, [pc, #564]	; (800be2c <tcp_process+0x2a0>)
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfe:	6879      	ldr	r1, [r7, #4]
 800bc00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bc02:	440b      	add	r3, r1
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	dc06      	bgt.n	800bc18 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	8b5b      	ldrh	r3, [r3, #26]
 800bc0e:	f043 0302 	orr.w	r3, r3, #2
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bc18:	7efb      	ldrb	r3, [r7, #27]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d01b      	beq.n	800bc56 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	7d1b      	ldrb	r3, [r3, #20]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d106      	bne.n	800bc34 <tcp_process+0xa8>
 800bc26:	4b7c      	ldr	r3, [pc, #496]	; (800be18 <tcp_process+0x28c>)
 800bc28:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bc2c:	4980      	ldr	r1, [pc, #512]	; (800be30 <tcp_process+0x2a4>)
 800bc2e:	487c      	ldr	r0, [pc, #496]	; (800be20 <tcp_process+0x294>)
 800bc30:	f006 fad0 	bl	80121d4 <iprintf>
      recv_flags |= TF_RESET;
 800bc34:	4b7f      	ldr	r3, [pc, #508]	; (800be34 <tcp_process+0x2a8>)
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	f043 0308 	orr.w	r3, r3, #8
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	4b7d      	ldr	r3, [pc, #500]	; (800be34 <tcp_process+0x2a8>)
 800bc40:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	8b5b      	ldrh	r3, [r3, #26]
 800bc46:	f023 0301 	bic.w	r3, r3, #1
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800bc50:	f06f 030d 	mvn.w	r3, #13
 800bc54:	e37a      	b.n	800c34c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bc56:	2300      	movs	r3, #0
 800bc58:	e378      	b.n	800c34c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bc5a:	4b72      	ldr	r3, [pc, #456]	; (800be24 <tcp_process+0x298>)
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	f003 0302 	and.w	r3, r3, #2
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d010      	beq.n	800bc88 <tcp_process+0xfc>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	7d1b      	ldrb	r3, [r3, #20]
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d00c      	beq.n	800bc88 <tcp_process+0xfc>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	7d1b      	ldrb	r3, [r3, #20]
 800bc72:	2b03      	cmp	r3, #3
 800bc74:	d008      	beq.n	800bc88 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	8b5b      	ldrh	r3, [r3, #26]
 800bc7a:	f043 0302 	orr.w	r3, r3, #2
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	e361      	b.n	800c34c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	8b5b      	ldrh	r3, [r3, #26]
 800bc8c:	f003 0310 	and.w	r3, r3, #16
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d103      	bne.n	800bc9c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bc94:	4b68      	ldr	r3, [pc, #416]	; (800be38 <tcp_process+0x2ac>)
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f001 fc2f 	bl	800d510 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	7d1b      	ldrb	r3, [r3, #20]
 800bcb6:	3b02      	subs	r3, #2
 800bcb8:	2b07      	cmp	r3, #7
 800bcba:	f200 8337 	bhi.w	800c32c <tcp_process+0x7a0>
 800bcbe:	a201      	add	r2, pc, #4	; (adr r2, 800bcc4 <tcp_process+0x138>)
 800bcc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc4:	0800bce5 	.word	0x0800bce5
 800bcc8:	0800bf15 	.word	0x0800bf15
 800bccc:	0800c08d 	.word	0x0800c08d
 800bcd0:	0800c0b7 	.word	0x0800c0b7
 800bcd4:	0800c1db 	.word	0x0800c1db
 800bcd8:	0800c08d 	.word	0x0800c08d
 800bcdc:	0800c267 	.word	0x0800c267
 800bce0:	0800c2f7 	.word	0x0800c2f7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bce4:	4b4f      	ldr	r3, [pc, #316]	; (800be24 <tcp_process+0x298>)
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	f003 0310 	and.w	r3, r3, #16
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f000 80e4 	beq.w	800beba <tcp_process+0x32e>
 800bcf2:	4b4c      	ldr	r3, [pc, #304]	; (800be24 <tcp_process+0x298>)
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	f003 0302 	and.w	r3, r3, #2
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f000 80dd 	beq.w	800beba <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd04:	1c5a      	adds	r2, r3, #1
 800bd06:	4b48      	ldr	r3, [pc, #288]	; (800be28 <tcp_process+0x29c>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	f040 80d5 	bne.w	800beba <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800bd10:	4b46      	ldr	r3, [pc, #280]	; (800be2c <tcp_process+0x2a0>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	1c5a      	adds	r2, r3, #1
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800bd22:	4b41      	ldr	r3, [pc, #260]	; (800be28 <tcp_process+0x29c>)
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800bd2a:	4b44      	ldr	r3, [pc, #272]	; (800be3c <tcp_process+0x2b0>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	89db      	ldrh	r3, [r3, #14]
 800bd30:	b29a      	uxth	r2, r3
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bd44:	4b39      	ldr	r3, [pc, #228]	; (800be2c <tcp_process+0x2a0>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	1e5a      	subs	r2, r3, #1
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2204      	movs	r2, #4
 800bd52:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f004 fec9 	bl	8010af4 <ip4_route>
 800bd62:	4601      	mov	r1, r0
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	3304      	adds	r3, #4
 800bd68:	461a      	mov	r2, r3
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f7ff f88c 	bl	800ae88 <tcp_eff_send_mss_netif>
 800bd70:	4603      	mov	r3, r0
 800bd72:	461a      	mov	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd7c:	009a      	lsls	r2, r3, #2
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd82:	005b      	lsls	r3, r3, #1
 800bd84:	f241 111c 	movw	r1, #4380	; 0x111c
 800bd88:	428b      	cmp	r3, r1
 800bd8a:	bf38      	it	cc
 800bd8c:	460b      	movcc	r3, r1
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d204      	bcs.n	800bd9c <tcp_process+0x210>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	e00d      	b.n	800bdb8 <tcp_process+0x22c>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bda0:	005b      	lsls	r3, r3, #1
 800bda2:	f241 121c 	movw	r2, #4380	; 0x111c
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d904      	bls.n	800bdb4 <tcp_process+0x228>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdae:	005b      	lsls	r3, r3, #1
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	e001      	b.n	800bdb8 <tcp_process+0x22c>
 800bdb4:	f241 131c 	movw	r3, #4380	; 0x111c
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d106      	bne.n	800bdd6 <tcp_process+0x24a>
 800bdc8:	4b13      	ldr	r3, [pc, #76]	; (800be18 <tcp_process+0x28c>)
 800bdca:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800bdce:	491c      	ldr	r1, [pc, #112]	; (800be40 <tcp_process+0x2b4>)
 800bdd0:	4813      	ldr	r0, [pc, #76]	; (800be20 <tcp_process+0x294>)
 800bdd2:	f006 f9ff 	bl	80121d4 <iprintf>
        --pcb->snd_queuelen;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bddc:	3b01      	subs	r3, #1
 800bdde:	b29a      	uxth	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdea:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d12a      	bne.n	800be48 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdf6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d106      	bne.n	800be0c <tcp_process+0x280>
 800bdfe:	4b06      	ldr	r3, [pc, #24]	; (800be18 <tcp_process+0x28c>)
 800be00:	f44f 725d 	mov.w	r2, #884	; 0x374
 800be04:	490f      	ldr	r1, [pc, #60]	; (800be44 <tcp_process+0x2b8>)
 800be06:	4806      	ldr	r0, [pc, #24]	; (800be20 <tcp_process+0x294>)
 800be08:	f006 f9e4 	bl	80121d4 <iprintf>
          pcb->unsent = rseg->next;
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	66da      	str	r2, [r3, #108]	; 0x6c
 800be14:	e01c      	b.n	800be50 <tcp_process+0x2c4>
 800be16:	bf00      	nop
 800be18:	08015968 	.word	0x08015968
 800be1c:	08015ba0 	.word	0x08015ba0
 800be20:	080159b4 	.word	0x080159b4
 800be24:	2000aabc 	.word	0x2000aabc
 800be28:	2000aab4 	.word	0x2000aab4
 800be2c:	2000aab0 	.word	0x2000aab0
 800be30:	08015bbc 	.word	0x08015bbc
 800be34:	2000aabd 	.word	0x2000aabd
 800be38:	2000aa78 	.word	0x2000aa78
 800be3c:	2000aaa0 	.word	0x2000aaa0
 800be40:	08015bdc 	.word	0x08015bdc
 800be44:	08015bf4 	.word	0x08015bf4
        } else {
          pcb->unacked = rseg->next;
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800be50:	69f8      	ldr	r0, [r7, #28]
 800be52:	f7fe fd22 	bl	800a89a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d104      	bne.n	800be68 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be64:	861a      	strh	r2, [r3, #48]	; 0x30
 800be66:	e006      	b.n	800be76 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2200      	movs	r2, #0
 800be72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00a      	beq.n	800be96 <tcp_process+0x30a>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	6910      	ldr	r0, [r2, #16]
 800be8a:	2200      	movs	r2, #0
 800be8c:	6879      	ldr	r1, [r7, #4]
 800be8e:	4798      	blx	r3
 800be90:	4603      	mov	r3, r0
 800be92:	76bb      	strb	r3, [r7, #26]
 800be94:	e001      	b.n	800be9a <tcp_process+0x30e>
 800be96:	2300      	movs	r3, #0
 800be98:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800be9a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800be9e:	f113 0f0d 	cmn.w	r3, #13
 800bea2:	d102      	bne.n	800beaa <tcp_process+0x31e>
          return ERR_ABRT;
 800bea4:	f06f 030c 	mvn.w	r3, #12
 800bea8:	e250      	b.n	800c34c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	8b5b      	ldrh	r3, [r3, #26]
 800beae:	f043 0302 	orr.w	r3, r3, #2
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800beb8:	e23a      	b.n	800c330 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800beba:	4b98      	ldr	r3, [pc, #608]	; (800c11c <tcp_process+0x590>)
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	f003 0310 	and.w	r3, r3, #16
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 8234 	beq.w	800c330 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bec8:	4b95      	ldr	r3, [pc, #596]	; (800c120 <tcp_process+0x594>)
 800beca:	6819      	ldr	r1, [r3, #0]
 800becc:	4b95      	ldr	r3, [pc, #596]	; (800c124 <tcp_process+0x598>)
 800bece:	881b      	ldrh	r3, [r3, #0]
 800bed0:	461a      	mov	r2, r3
 800bed2:	4b95      	ldr	r3, [pc, #596]	; (800c128 <tcp_process+0x59c>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bed8:	4b94      	ldr	r3, [pc, #592]	; (800c12c <tcp_process+0x5a0>)
 800beda:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bedc:	885b      	ldrh	r3, [r3, #2]
 800bede:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bee0:	4a92      	ldr	r2, [pc, #584]	; (800c12c <tcp_process+0x5a0>)
 800bee2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bee4:	8812      	ldrh	r2, [r2, #0]
 800bee6:	b292      	uxth	r2, r2
 800bee8:	9202      	str	r2, [sp, #8]
 800beea:	9301      	str	r3, [sp, #4]
 800beec:	4b90      	ldr	r3, [pc, #576]	; (800c130 <tcp_process+0x5a4>)
 800beee:	9300      	str	r3, [sp, #0]
 800bef0:	4b90      	ldr	r3, [pc, #576]	; (800c134 <tcp_process+0x5a8>)
 800bef2:	4602      	mov	r2, r0
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f002 fc85 	bl	800e804 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf00:	2b05      	cmp	r3, #5
 800bf02:	f200 8215 	bhi.w	800c330 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f002 fa51 	bl	800e3b4 <tcp_rexmit_rto>
      break;
 800bf12:	e20d      	b.n	800c330 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800bf14:	4b81      	ldr	r3, [pc, #516]	; (800c11c <tcp_process+0x590>)
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	f003 0310 	and.w	r3, r3, #16
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f000 80a1 	beq.w	800c064 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bf22:	4b7f      	ldr	r3, [pc, #508]	; (800c120 <tcp_process+0x594>)
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	db7e      	blt.n	800c030 <tcp_process+0x4a4>
 800bf32:	4b7b      	ldr	r3, [pc, #492]	; (800c120 <tcp_process+0x594>)
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf3a:	1ad3      	subs	r3, r2, r3
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	dc77      	bgt.n	800c030 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2204      	movs	r2, #4
 800bf44:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d102      	bne.n	800bf54 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800bf4e:	23fa      	movs	r3, #250	; 0xfa
 800bf50:	76bb      	strb	r3, [r7, #26]
 800bf52:	e01d      	b.n	800bf90 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf58:	699b      	ldr	r3, [r3, #24]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d106      	bne.n	800bf6c <tcp_process+0x3e0>
 800bf5e:	4b76      	ldr	r3, [pc, #472]	; (800c138 <tcp_process+0x5ac>)
 800bf60:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800bf64:	4975      	ldr	r1, [pc, #468]	; (800c13c <tcp_process+0x5b0>)
 800bf66:	4876      	ldr	r0, [pc, #472]	; (800c140 <tcp_process+0x5b4>)
 800bf68:	f006 f934 	bl	80121d4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf70:	699b      	ldr	r3, [r3, #24]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00a      	beq.n	800bf8c <tcp_process+0x400>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	6910      	ldr	r0, [r2, #16]
 800bf80:	2200      	movs	r2, #0
 800bf82:	6879      	ldr	r1, [r7, #4]
 800bf84:	4798      	blx	r3
 800bf86:	4603      	mov	r3, r0
 800bf88:	76bb      	strb	r3, [r7, #26]
 800bf8a:	e001      	b.n	800bf90 <tcp_process+0x404>
 800bf8c:	23f0      	movs	r3, #240	; 0xf0
 800bf8e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800bf90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00a      	beq.n	800bfae <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800bf98:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bf9c:	f113 0f0d 	cmn.w	r3, #13
 800bfa0:	d002      	beq.n	800bfa8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f7fd ff8e 	bl	8009ec4 <tcp_abort>
            }
            return ERR_ABRT;
 800bfa8:	f06f 030c 	mvn.w	r3, #12
 800bfac:	e1ce      	b.n	800c34c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fae0 	bl	800c574 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800bfb4:	4b63      	ldr	r3, [pc, #396]	; (800c144 <tcp_process+0x5b8>)
 800bfb6:	881b      	ldrh	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d005      	beq.n	800bfc8 <tcp_process+0x43c>
            recv_acked--;
 800bfbc:	4b61      	ldr	r3, [pc, #388]	; (800c144 <tcp_process+0x5b8>)
 800bfbe:	881b      	ldrh	r3, [r3, #0]
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	4b5f      	ldr	r3, [pc, #380]	; (800c144 <tcp_process+0x5b8>)
 800bfc6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfcc:	009a      	lsls	r2, r3, #2
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfd2:	005b      	lsls	r3, r3, #1
 800bfd4:	f241 111c 	movw	r1, #4380	; 0x111c
 800bfd8:	428b      	cmp	r3, r1
 800bfda:	bf38      	it	cc
 800bfdc:	460b      	movcc	r3, r1
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d204      	bcs.n	800bfec <tcp_process+0x460>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	e00d      	b.n	800c008 <tcp_process+0x47c>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bff0:	005b      	lsls	r3, r3, #1
 800bff2:	f241 121c 	movw	r2, #4380	; 0x111c
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d904      	bls.n	800c004 <tcp_process+0x478>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bffe:	005b      	lsls	r3, r3, #1
 800c000:	b29b      	uxth	r3, r3
 800c002:	e001      	b.n	800c008 <tcp_process+0x47c>
 800c004:	f241 131c 	movw	r3, #4380	; 0x111c
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c00e:	4b4e      	ldr	r3, [pc, #312]	; (800c148 <tcp_process+0x5bc>)
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	f003 0320 	and.w	r3, r3, #32
 800c016:	2b00      	cmp	r3, #0
 800c018:	d037      	beq.n	800c08a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	8b5b      	ldrh	r3, [r3, #26]
 800c01e:	f043 0302 	orr.w	r3, r3, #2
 800c022:	b29a      	uxth	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2207      	movs	r2, #7
 800c02c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c02e:	e02c      	b.n	800c08a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c030:	4b3b      	ldr	r3, [pc, #236]	; (800c120 <tcp_process+0x594>)
 800c032:	6819      	ldr	r1, [r3, #0]
 800c034:	4b3b      	ldr	r3, [pc, #236]	; (800c124 <tcp_process+0x598>)
 800c036:	881b      	ldrh	r3, [r3, #0]
 800c038:	461a      	mov	r2, r3
 800c03a:	4b3b      	ldr	r3, [pc, #236]	; (800c128 <tcp_process+0x59c>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c040:	4b3a      	ldr	r3, [pc, #232]	; (800c12c <tcp_process+0x5a0>)
 800c042:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c044:	885b      	ldrh	r3, [r3, #2]
 800c046:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c048:	4a38      	ldr	r2, [pc, #224]	; (800c12c <tcp_process+0x5a0>)
 800c04a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c04c:	8812      	ldrh	r2, [r2, #0]
 800c04e:	b292      	uxth	r2, r2
 800c050:	9202      	str	r2, [sp, #8]
 800c052:	9301      	str	r3, [sp, #4]
 800c054:	4b36      	ldr	r3, [pc, #216]	; (800c130 <tcp_process+0x5a4>)
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	4b36      	ldr	r3, [pc, #216]	; (800c134 <tcp_process+0x5a8>)
 800c05a:	4602      	mov	r2, r0
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f002 fbd1 	bl	800e804 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c062:	e167      	b.n	800c334 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c064:	4b2d      	ldr	r3, [pc, #180]	; (800c11c <tcp_process+0x590>)
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	f003 0302 	and.w	r3, r3, #2
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f000 8161 	beq.w	800c334 <tcp_process+0x7a8>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c076:	1e5a      	subs	r2, r3, #1
 800c078:	4b2b      	ldr	r3, [pc, #172]	; (800c128 <tcp_process+0x59c>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	f040 8159 	bne.w	800c334 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f002 f9b8 	bl	800e3f8 <tcp_rexmit>
      break;
 800c088:	e154      	b.n	800c334 <tcp_process+0x7a8>
 800c08a:	e153      	b.n	800c334 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 fa71 	bl	800c574 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c092:	4b2d      	ldr	r3, [pc, #180]	; (800c148 <tcp_process+0x5bc>)
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	f003 0320 	and.w	r3, r3, #32
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	f000 814c 	beq.w	800c338 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	8b5b      	ldrh	r3, [r3, #26]
 800c0a4:	f043 0302 	orr.w	r3, r3, #2
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2207      	movs	r2, #7
 800c0b2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c0b4:	e140      	b.n	800c338 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fa5c 	bl	800c574 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c0bc:	4b22      	ldr	r3, [pc, #136]	; (800c148 <tcp_process+0x5bc>)
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	f003 0320 	and.w	r3, r3, #32
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d071      	beq.n	800c1ac <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c0c8:	4b14      	ldr	r3, [pc, #80]	; (800c11c <tcp_process+0x590>)
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	f003 0310 	and.w	r3, r3, #16
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d060      	beq.n	800c196 <tcp_process+0x60a>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0d8:	4b11      	ldr	r3, [pc, #68]	; (800c120 <tcp_process+0x594>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d15a      	bne.n	800c196 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d156      	bne.n	800c196 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	8b5b      	ldrh	r3, [r3, #26]
 800c0ec:	f043 0302 	orr.w	r3, r3, #2
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f7fe fdbc 	bl	800ac74 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c0fc:	4b13      	ldr	r3, [pc, #76]	; (800c14c <tcp_process+0x5c0>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	429a      	cmp	r2, r3
 800c104:	d105      	bne.n	800c112 <tcp_process+0x586>
 800c106:	4b11      	ldr	r3, [pc, #68]	; (800c14c <tcp_process+0x5c0>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	4a0f      	ldr	r2, [pc, #60]	; (800c14c <tcp_process+0x5c0>)
 800c10e:	6013      	str	r3, [r2, #0]
 800c110:	e02e      	b.n	800c170 <tcp_process+0x5e4>
 800c112:	4b0e      	ldr	r3, [pc, #56]	; (800c14c <tcp_process+0x5c0>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	617b      	str	r3, [r7, #20]
 800c118:	e027      	b.n	800c16a <tcp_process+0x5de>
 800c11a:	bf00      	nop
 800c11c:	2000aabc 	.word	0x2000aabc
 800c120:	2000aab4 	.word	0x2000aab4
 800c124:	2000aaba 	.word	0x2000aaba
 800c128:	2000aab0 	.word	0x2000aab0
 800c12c:	2000aaa0 	.word	0x2000aaa0
 800c130:	20005358 	.word	0x20005358
 800c134:	2000535c 	.word	0x2000535c
 800c138:	08015968 	.word	0x08015968
 800c13c:	08015c08 	.word	0x08015c08
 800c140:	080159b4 	.word	0x080159b4
 800c144:	2000aab8 	.word	0x2000aab8
 800c148:	2000aabd 	.word	0x2000aabd
 800c14c:	2000aa84 	.word	0x2000aa84
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	429a      	cmp	r2, r3
 800c158:	d104      	bne.n	800c164 <tcp_process+0x5d8>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	68da      	ldr	r2, [r3, #12]
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	60da      	str	r2, [r3, #12]
 800c162:	e005      	b.n	800c170 <tcp_process+0x5e4>
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	617b      	str	r3, [r7, #20]
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d1ef      	bne.n	800c150 <tcp_process+0x5c4>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	60da      	str	r2, [r3, #12]
 800c176:	4b77      	ldr	r3, [pc, #476]	; (800c354 <tcp_process+0x7c8>)
 800c178:	2201      	movs	r2, #1
 800c17a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	220a      	movs	r2, #10
 800c180:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c182:	4b75      	ldr	r3, [pc, #468]	; (800c358 <tcp_process+0x7cc>)
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	60da      	str	r2, [r3, #12]
 800c18a:	4a73      	ldr	r2, [pc, #460]	; (800c358 <tcp_process+0x7cc>)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6013      	str	r3, [r2, #0]
 800c190:	f002 fcfa 	bl	800eb88 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c194:	e0d2      	b.n	800c33c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	8b5b      	ldrh	r3, [r3, #26]
 800c19a:	f043 0302 	orr.w	r3, r3, #2
 800c19e:	b29a      	uxth	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2208      	movs	r2, #8
 800c1a8:	751a      	strb	r2, [r3, #20]
      break;
 800c1aa:	e0c7      	b.n	800c33c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c1ac:	4b6b      	ldr	r3, [pc, #428]	; (800c35c <tcp_process+0x7d0>)
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	f003 0310 	and.w	r3, r3, #16
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f000 80c1 	beq.w	800c33c <tcp_process+0x7b0>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1be:	4b68      	ldr	r3, [pc, #416]	; (800c360 <tcp_process+0x7d4>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	f040 80ba 	bne.w	800c33c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f040 80b5 	bne.w	800c33c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2206      	movs	r2, #6
 800c1d6:	751a      	strb	r2, [r3, #20]
      break;
 800c1d8:	e0b0      	b.n	800c33c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 f9ca 	bl	800c574 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c1e0:	4b60      	ldr	r3, [pc, #384]	; (800c364 <tcp_process+0x7d8>)
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	f003 0320 	and.w	r3, r3, #32
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	f000 80a9 	beq.w	800c340 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	8b5b      	ldrh	r3, [r3, #26]
 800c1f2:	f043 0302 	orr.w	r3, r3, #2
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f7fe fd39 	bl	800ac74 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c202:	4b59      	ldr	r3, [pc, #356]	; (800c368 <tcp_process+0x7dc>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d105      	bne.n	800c218 <tcp_process+0x68c>
 800c20c:	4b56      	ldr	r3, [pc, #344]	; (800c368 <tcp_process+0x7dc>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	4a55      	ldr	r2, [pc, #340]	; (800c368 <tcp_process+0x7dc>)
 800c214:	6013      	str	r3, [r2, #0]
 800c216:	e013      	b.n	800c240 <tcp_process+0x6b4>
 800c218:	4b53      	ldr	r3, [pc, #332]	; (800c368 <tcp_process+0x7dc>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	613b      	str	r3, [r7, #16]
 800c21e:	e00c      	b.n	800c23a <tcp_process+0x6ae>
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	429a      	cmp	r2, r3
 800c228:	d104      	bne.n	800c234 <tcp_process+0x6a8>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	68da      	ldr	r2, [r3, #12]
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	60da      	str	r2, [r3, #12]
 800c232:	e005      	b.n	800c240 <tcp_process+0x6b4>
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	613b      	str	r3, [r7, #16]
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1ef      	bne.n	800c220 <tcp_process+0x694>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	60da      	str	r2, [r3, #12]
 800c246:	4b43      	ldr	r3, [pc, #268]	; (800c354 <tcp_process+0x7c8>)
 800c248:	2201      	movs	r2, #1
 800c24a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	220a      	movs	r2, #10
 800c250:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c252:	4b41      	ldr	r3, [pc, #260]	; (800c358 <tcp_process+0x7cc>)
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	60da      	str	r2, [r3, #12]
 800c25a:	4a3f      	ldr	r2, [pc, #252]	; (800c358 <tcp_process+0x7cc>)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6013      	str	r3, [r2, #0]
 800c260:	f002 fc92 	bl	800eb88 <tcp_timer_needed>
      }
      break;
 800c264:	e06c      	b.n	800c340 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 f984 	bl	800c574 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c26c:	4b3b      	ldr	r3, [pc, #236]	; (800c35c <tcp_process+0x7d0>)
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	f003 0310 	and.w	r3, r3, #16
 800c274:	2b00      	cmp	r3, #0
 800c276:	d065      	beq.n	800c344 <tcp_process+0x7b8>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c27c:	4b38      	ldr	r3, [pc, #224]	; (800c360 <tcp_process+0x7d4>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	429a      	cmp	r2, r3
 800c282:	d15f      	bne.n	800c344 <tcp_process+0x7b8>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d15b      	bne.n	800c344 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f7fe fcf1 	bl	800ac74 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c292:	4b35      	ldr	r3, [pc, #212]	; (800c368 <tcp_process+0x7dc>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d105      	bne.n	800c2a8 <tcp_process+0x71c>
 800c29c:	4b32      	ldr	r3, [pc, #200]	; (800c368 <tcp_process+0x7dc>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	4a31      	ldr	r2, [pc, #196]	; (800c368 <tcp_process+0x7dc>)
 800c2a4:	6013      	str	r3, [r2, #0]
 800c2a6:	e013      	b.n	800c2d0 <tcp_process+0x744>
 800c2a8:	4b2f      	ldr	r3, [pc, #188]	; (800c368 <tcp_process+0x7dc>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	60fb      	str	r3, [r7, #12]
 800c2ae:	e00c      	b.n	800c2ca <tcp_process+0x73e>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d104      	bne.n	800c2c4 <tcp_process+0x738>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	68da      	ldr	r2, [r3, #12]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	60da      	str	r2, [r3, #12]
 800c2c2:	e005      	b.n	800c2d0 <tcp_process+0x744>
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	60fb      	str	r3, [r7, #12]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1ef      	bne.n	800c2b0 <tcp_process+0x724>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	60da      	str	r2, [r3, #12]
 800c2d6:	4b1f      	ldr	r3, [pc, #124]	; (800c354 <tcp_process+0x7c8>)
 800c2d8:	2201      	movs	r2, #1
 800c2da:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	220a      	movs	r2, #10
 800c2e0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c2e2:	4b1d      	ldr	r3, [pc, #116]	; (800c358 <tcp_process+0x7cc>)
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	60da      	str	r2, [r3, #12]
 800c2ea:	4a1b      	ldr	r2, [pc, #108]	; (800c358 <tcp_process+0x7cc>)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6013      	str	r3, [r2, #0]
 800c2f0:	f002 fc4a 	bl	800eb88 <tcp_timer_needed>
      }
      break;
 800c2f4:	e026      	b.n	800c344 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 f93c 	bl	800c574 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c2fc:	4b17      	ldr	r3, [pc, #92]	; (800c35c <tcp_process+0x7d0>)
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	f003 0310 	and.w	r3, r3, #16
 800c304:	2b00      	cmp	r3, #0
 800c306:	d01f      	beq.n	800c348 <tcp_process+0x7bc>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c30c:	4b14      	ldr	r3, [pc, #80]	; (800c360 <tcp_process+0x7d4>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	429a      	cmp	r2, r3
 800c312:	d119      	bne.n	800c348 <tcp_process+0x7bc>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d115      	bne.n	800c348 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c31c:	4b11      	ldr	r3, [pc, #68]	; (800c364 <tcp_process+0x7d8>)
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	f043 0310 	orr.w	r3, r3, #16
 800c324:	b2da      	uxtb	r2, r3
 800c326:	4b0f      	ldr	r3, [pc, #60]	; (800c364 <tcp_process+0x7d8>)
 800c328:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c32a:	e00d      	b.n	800c348 <tcp_process+0x7bc>
    default:
      break;
 800c32c:	bf00      	nop
 800c32e:	e00c      	b.n	800c34a <tcp_process+0x7be>
      break;
 800c330:	bf00      	nop
 800c332:	e00a      	b.n	800c34a <tcp_process+0x7be>
      break;
 800c334:	bf00      	nop
 800c336:	e008      	b.n	800c34a <tcp_process+0x7be>
      break;
 800c338:	bf00      	nop
 800c33a:	e006      	b.n	800c34a <tcp_process+0x7be>
      break;
 800c33c:	bf00      	nop
 800c33e:	e004      	b.n	800c34a <tcp_process+0x7be>
      break;
 800c340:	bf00      	nop
 800c342:	e002      	b.n	800c34a <tcp_process+0x7be>
      break;
 800c344:	bf00      	nop
 800c346:	e000      	b.n	800c34a <tcp_process+0x7be>
      break;
 800c348:	bf00      	nop
  }
  return ERR_OK;
 800c34a:	2300      	movs	r3, #0
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3724      	adds	r7, #36	; 0x24
 800c350:	46bd      	mov	sp, r7
 800c352:	bd90      	pop	{r4, r7, pc}
 800c354:	2000aa8c 	.word	0x2000aa8c
 800c358:	2000aa88 	.word	0x2000aa88
 800c35c:	2000aabc 	.word	0x2000aabc
 800c360:	2000aab4 	.word	0x2000aab4
 800c364:	2000aabd 	.word	0x2000aabd
 800c368:	2000aa84 	.word	0x2000aa84

0800c36c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c36c:	b590      	push	{r4, r7, lr}
 800c36e:	b085      	sub	sp, #20
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d106      	bne.n	800c38a <tcp_oos_insert_segment+0x1e>
 800c37c:	4b3b      	ldr	r3, [pc, #236]	; (800c46c <tcp_oos_insert_segment+0x100>)
 800c37e:	f240 421f 	movw	r2, #1055	; 0x41f
 800c382:	493b      	ldr	r1, [pc, #236]	; (800c470 <tcp_oos_insert_segment+0x104>)
 800c384:	483b      	ldr	r0, [pc, #236]	; (800c474 <tcp_oos_insert_segment+0x108>)
 800c386:	f005 ff25 	bl	80121d4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	899b      	ldrh	r3, [r3, #12]
 800c390:	b29b      	uxth	r3, r3
 800c392:	4618      	mov	r0, r3
 800c394:	f7fb fc3c 	bl	8007c10 <lwip_htons>
 800c398:	4603      	mov	r3, r0
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	f003 0301 	and.w	r3, r3, #1
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d028      	beq.n	800c3f6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c3a4:	6838      	ldr	r0, [r7, #0]
 800c3a6:	f7fe fa63 	bl	800a870 <tcp_segs_free>
    next = NULL;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	603b      	str	r3, [r7, #0]
 800c3ae:	e056      	b.n	800c45e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	899b      	ldrh	r3, [r3, #12]
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7fb fc29 	bl	8007c10 <lwip_htons>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	f003 0301 	and.w	r3, r3, #1
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d00d      	beq.n	800c3e6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	899b      	ldrh	r3, [r3, #12]
 800c3d0:	b29c      	uxth	r4, r3
 800c3d2:	2001      	movs	r0, #1
 800c3d4:	f7fb fc1c 	bl	8007c10 <lwip_htons>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	461a      	mov	r2, r3
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	4322      	orrs	r2, r4
 800c3e2:	b292      	uxth	r2, r2
 800c3e4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f7fe fa52 	bl	800a89a <tcp_seg_free>
    while (next &&
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00e      	beq.n	800c41a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	891b      	ldrh	r3, [r3, #8]
 800c400:	461a      	mov	r2, r3
 800c402:	4b1d      	ldr	r3, [pc, #116]	; (800c478 <tcp_oos_insert_segment+0x10c>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	441a      	add	r2, r3
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	6839      	ldr	r1, [r7, #0]
 800c410:	8909      	ldrh	r1, [r1, #8]
 800c412:	440b      	add	r3, r1
 800c414:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c416:	2b00      	cmp	r3, #0
 800c418:	daca      	bge.n	800c3b0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d01e      	beq.n	800c45e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	891b      	ldrh	r3, [r3, #8]
 800c424:	461a      	mov	r2, r3
 800c426:	4b14      	ldr	r3, [pc, #80]	; (800c478 <tcp_oos_insert_segment+0x10c>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	441a      	add	r2, r3
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c434:	2b00      	cmp	r3, #0
 800c436:	dd12      	ble.n	800c45e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	b29a      	uxth	r2, r3
 800c440:	4b0d      	ldr	r3, [pc, #52]	; (800c478 <tcp_oos_insert_segment+0x10c>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	b29b      	uxth	r3, r3
 800c446:	1ad3      	subs	r3, r2, r3
 800c448:	b29a      	uxth	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	685a      	ldr	r2, [r3, #4]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	891b      	ldrh	r3, [r3, #8]
 800c456:	4619      	mov	r1, r3
 800c458:	4610      	mov	r0, r2
 800c45a:	f7fc fdb1 	bl	8008fc0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	601a      	str	r2, [r3, #0]
}
 800c464:	bf00      	nop
 800c466:	3714      	adds	r7, #20
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd90      	pop	{r4, r7, pc}
 800c46c:	08015968 	.word	0x08015968
 800c470:	08015c28 	.word	0x08015c28
 800c474:	080159b4 	.word	0x080159b4
 800c478:	2000aab0 	.word	0x2000aab0

0800c47c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c47c:	b5b0      	push	{r4, r5, r7, lr}
 800c47e:	b086      	sub	sp, #24
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c48a:	e03e      	b.n	800c50a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fc ff9e 	bl	80093dc <pbuf_clen>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4aa:	8a7a      	ldrh	r2, [r7, #18]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d906      	bls.n	800c4be <tcp_free_acked_segments+0x42>
 800c4b0:	4b2a      	ldr	r3, [pc, #168]	; (800c55c <tcp_free_acked_segments+0xe0>)
 800c4b2:	f240 4257 	movw	r2, #1111	; 0x457
 800c4b6:	492a      	ldr	r1, [pc, #168]	; (800c560 <tcp_free_acked_segments+0xe4>)
 800c4b8:	482a      	ldr	r0, [pc, #168]	; (800c564 <tcp_free_acked_segments+0xe8>)
 800c4ba:	f005 fe8b 	bl	80121d4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c4c4:	8a7b      	ldrh	r3, [r7, #18]
 800c4c6:	1ad3      	subs	r3, r2, r3
 800c4c8:	b29a      	uxth	r2, r3
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	891a      	ldrh	r2, [r3, #8]
 800c4d4:	4b24      	ldr	r3, [pc, #144]	; (800c568 <tcp_free_acked_segments+0xec>)
 800c4d6:	881b      	ldrh	r3, [r3, #0]
 800c4d8:	4413      	add	r3, r2
 800c4da:	b29a      	uxth	r2, r3
 800c4dc:	4b22      	ldr	r3, [pc, #136]	; (800c568 <tcp_free_acked_segments+0xec>)
 800c4de:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c4e0:	6978      	ldr	r0, [r7, #20]
 800c4e2:	f7fe f9da 	bl	800a89a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00c      	beq.n	800c50a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d109      	bne.n	800c50a <tcp_free_acked_segments+0x8e>
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d106      	bne.n	800c50a <tcp_free_acked_segments+0x8e>
 800c4fc:	4b17      	ldr	r3, [pc, #92]	; (800c55c <tcp_free_acked_segments+0xe0>)
 800c4fe:	f240 4261 	movw	r2, #1121	; 0x461
 800c502:	491a      	ldr	r1, [pc, #104]	; (800c56c <tcp_free_acked_segments+0xf0>)
 800c504:	4817      	ldr	r0, [pc, #92]	; (800c564 <tcp_free_acked_segments+0xe8>)
 800c506:	f005 fe65 	bl	80121d4 <iprintf>
  while (seg_list != NULL &&
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d020      	beq.n	800c552 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	4618      	mov	r0, r3
 800c518:	f7fb fb8f 	bl	8007c3a <lwip_htonl>
 800c51c:	4604      	mov	r4, r0
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	891b      	ldrh	r3, [r3, #8]
 800c522:	461d      	mov	r5, r3
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	899b      	ldrh	r3, [r3, #12]
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fb fb6f 	bl	8007c10 <lwip_htons>
 800c532:	4603      	mov	r3, r0
 800c534:	b2db      	uxtb	r3, r3
 800c536:	f003 0303 	and.w	r3, r3, #3
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d001      	beq.n	800c542 <tcp_free_acked_segments+0xc6>
 800c53e:	2301      	movs	r3, #1
 800c540:	e000      	b.n	800c544 <tcp_free_acked_segments+0xc8>
 800c542:	2300      	movs	r3, #0
 800c544:	442b      	add	r3, r5
 800c546:	18e2      	adds	r2, r4, r3
 800c548:	4b09      	ldr	r3, [pc, #36]	; (800c570 <tcp_free_acked_segments+0xf4>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c54e:	2b00      	cmp	r3, #0
 800c550:	dd9c      	ble.n	800c48c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c552:	68bb      	ldr	r3, [r7, #8]
}
 800c554:	4618      	mov	r0, r3
 800c556:	3718      	adds	r7, #24
 800c558:	46bd      	mov	sp, r7
 800c55a:	bdb0      	pop	{r4, r5, r7, pc}
 800c55c:	08015968 	.word	0x08015968
 800c560:	08015c50 	.word	0x08015c50
 800c564:	080159b4 	.word	0x080159b4
 800c568:	2000aab8 	.word	0x2000aab8
 800c56c:	08015c78 	.word	0x08015c78
 800c570:	2000aab4 	.word	0x2000aab4

0800c574 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c574:	b5b0      	push	{r4, r5, r7, lr}
 800c576:	b094      	sub	sp, #80	; 0x50
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c57c:	2300      	movs	r3, #0
 800c57e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d106      	bne.n	800c594 <tcp_receive+0x20>
 800c586:	4b91      	ldr	r3, [pc, #580]	; (800c7cc <tcp_receive+0x258>)
 800c588:	f240 427b 	movw	r2, #1147	; 0x47b
 800c58c:	4990      	ldr	r1, [pc, #576]	; (800c7d0 <tcp_receive+0x25c>)
 800c58e:	4891      	ldr	r0, [pc, #580]	; (800c7d4 <tcp_receive+0x260>)
 800c590:	f005 fe20 	bl	80121d4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	7d1b      	ldrb	r3, [r3, #20]
 800c598:	2b03      	cmp	r3, #3
 800c59a:	d806      	bhi.n	800c5aa <tcp_receive+0x36>
 800c59c:	4b8b      	ldr	r3, [pc, #556]	; (800c7cc <tcp_receive+0x258>)
 800c59e:	f240 427c 	movw	r2, #1148	; 0x47c
 800c5a2:	498d      	ldr	r1, [pc, #564]	; (800c7d8 <tcp_receive+0x264>)
 800c5a4:	488b      	ldr	r0, [pc, #556]	; (800c7d4 <tcp_receive+0x260>)
 800c5a6:	f005 fe15 	bl	80121d4 <iprintf>

  if (flags & TCP_ACK) {
 800c5aa:	4b8c      	ldr	r3, [pc, #560]	; (800c7dc <tcp_receive+0x268>)
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	f003 0310 	and.w	r3, r3, #16
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 8264 	beq.w	800ca80 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c5be:	461a      	mov	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5c4:	4413      	add	r3, r2
 800c5c6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5cc:	4b84      	ldr	r3, [pc, #528]	; (800c7e0 <tcp_receive+0x26c>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	1ad3      	subs	r3, r2, r3
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	db1b      	blt.n	800c60e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5da:	4b81      	ldr	r3, [pc, #516]	; (800c7e0 <tcp_receive+0x26c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d106      	bne.n	800c5f0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c5e6:	4b7f      	ldr	r3, [pc, #508]	; (800c7e4 <tcp_receive+0x270>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	db0e      	blt.n	800c60e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c5f4:	4b7b      	ldr	r3, [pc, #492]	; (800c7e4 <tcp_receive+0x270>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d125      	bne.n	800c648 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c5fc:	4b7a      	ldr	r3, [pc, #488]	; (800c7e8 <tcp_receive+0x274>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	89db      	ldrh	r3, [r3, #14]
 800c602:	b29a      	uxth	r2, r3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d91c      	bls.n	800c648 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c60e:	4b76      	ldr	r3, [pc, #472]	; (800c7e8 <tcp_receive+0x274>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	89db      	ldrh	r3, [r3, #14]
 800c614:	b29a      	uxth	r2, r3
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c628:	429a      	cmp	r2, r3
 800c62a:	d205      	bcs.n	800c638 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c638:	4b69      	ldr	r3, [pc, #420]	; (800c7e0 <tcp_receive+0x26c>)
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c640:	4b68      	ldr	r3, [pc, #416]	; (800c7e4 <tcp_receive+0x270>)
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c648:	4b66      	ldr	r3, [pc, #408]	; (800c7e4 <tcp_receive+0x270>)
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	2b00      	cmp	r3, #0
 800c654:	dc58      	bgt.n	800c708 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c656:	4b65      	ldr	r3, [pc, #404]	; (800c7ec <tcp_receive+0x278>)
 800c658:	881b      	ldrh	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d14b      	bne.n	800c6f6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c668:	4413      	add	r3, r2
 800c66a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d142      	bne.n	800c6f6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c676:	2b00      	cmp	r3, #0
 800c678:	db3d      	blt.n	800c6f6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c67e:	4b59      	ldr	r3, [pc, #356]	; (800c7e4 <tcp_receive+0x270>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	429a      	cmp	r2, r3
 800c684:	d137      	bne.n	800c6f6 <tcp_receive+0x182>
              found_dupack = 1;
 800c686:	2301      	movs	r3, #1
 800c688:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c690:	2bff      	cmp	r3, #255	; 0xff
 800c692:	d007      	beq.n	800c6a4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c69a:	3301      	adds	r3, #1
 800c69c:	b2da      	uxtb	r2, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	d91b      	bls.n	800c6e6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6b8:	4413      	add	r3, r2
 800c6ba:	b29a      	uxth	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d30a      	bcc.n	800c6dc <tcp_receive+0x168>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6d0:	4413      	add	r3, r2
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c6da:	e004      	b.n	800c6e6 <tcp_receive+0x172>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d902      	bls.n	800c6f6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f001 feed 	bl	800e4d0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c6f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f040 8161 	bne.w	800c9c0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c706:	e15b      	b.n	800c9c0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c708:	4b36      	ldr	r3, [pc, #216]	; (800c7e4 <tcp_receive+0x270>)
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	3b01      	subs	r3, #1
 800c714:	2b00      	cmp	r3, #0
 800c716:	f2c0 814e 	blt.w	800c9b6 <tcp_receive+0x442>
 800c71a:	4b32      	ldr	r3, [pc, #200]	; (800c7e4 <tcp_receive+0x270>)
 800c71c:	681a      	ldr	r2, [r3, #0]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c722:	1ad3      	subs	r3, r2, r3
 800c724:	2b00      	cmp	r3, #0
 800c726:	f300 8146 	bgt.w	800c9b6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	8b5b      	ldrh	r3, [r3, #26]
 800c72e:	f003 0304 	and.w	r3, r3, #4
 800c732:	2b00      	cmp	r3, #0
 800c734:	d010      	beq.n	800c758 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	8b5b      	ldrh	r3, [r3, #26]
 800c73a:	f023 0304 	bic.w	r3, r3, #4
 800c73e:	b29a      	uxth	r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2200      	movs	r2, #0
 800c754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c766:	10db      	asrs	r3, r3, #3
 800c768:	b21b      	sxth	r3, r3
 800c76a:	b29a      	uxth	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c772:	b29b      	uxth	r3, r3
 800c774:	4413      	add	r3, r2
 800c776:	b29b      	uxth	r3, r3
 800c778:	b21a      	sxth	r2, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c780:	4b18      	ldr	r3, [pc, #96]	; (800c7e4 <tcp_receive+0x270>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	b29a      	uxth	r2, r3
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	1ad3      	subs	r3, r2, r3
 800c78e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c798:	4b12      	ldr	r3, [pc, #72]	; (800c7e4 <tcp_receive+0x270>)
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	7d1b      	ldrb	r3, [r3, #20]
 800c7a4:	2b03      	cmp	r3, #3
 800c7a6:	f240 8097 	bls.w	800c8d8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d245      	bcs.n	800c846 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	8b5b      	ldrh	r3, [r3, #26]
 800c7be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d014      	beq.n	800c7f0 <tcp_receive+0x27c>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e013      	b.n	800c7f2 <tcp_receive+0x27e>
 800c7ca:	bf00      	nop
 800c7cc:	08015968 	.word	0x08015968
 800c7d0:	08015c98 	.word	0x08015c98
 800c7d4:	080159b4 	.word	0x080159b4
 800c7d8:	08015cb4 	.word	0x08015cb4
 800c7dc:	2000aabc 	.word	0x2000aabc
 800c7e0:	2000aab0 	.word	0x2000aab0
 800c7e4:	2000aab4 	.word	0x2000aab4
 800c7e8:	2000aaa0 	.word	0x2000aaa0
 800c7ec:	2000aaba 	.word	0x2000aaba
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c7f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c800:	fb12 f303 	smulbb	r3, r2, r3
 800c804:	b29b      	uxth	r3, r3
 800c806:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c808:	4293      	cmp	r3, r2
 800c80a:	bf28      	it	cs
 800c80c:	4613      	movcs	r3, r2
 800c80e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c816:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c818:	4413      	add	r3, r2
 800c81a:	b29a      	uxth	r2, r3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c822:	429a      	cmp	r2, r3
 800c824:	d309      	bcc.n	800c83a <tcp_receive+0x2c6>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c82c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c82e:	4413      	add	r3, r2
 800c830:	b29a      	uxth	r2, r3
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c838:	e04e      	b.n	800c8d8 <tcp_receive+0x364>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c840:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c844:	e048      	b.n	800c8d8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c84c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c84e:	4413      	add	r3, r2
 800c850:	b29a      	uxth	r2, r3
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c858:	429a      	cmp	r2, r3
 800c85a:	d309      	bcc.n	800c870 <tcp_receive+0x2fc>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c862:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c864:	4413      	add	r3, r2
 800c866:	b29a      	uxth	r2, r3
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c86e:	e004      	b.n	800c87a <tcp_receive+0x306>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c876:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c886:	429a      	cmp	r2, r3
 800c888:	d326      	bcc.n	800c8d8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c896:	1ad3      	subs	r3, r2, r3
 800c898:	b29a      	uxth	r2, r3
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8aa:	4413      	add	r3, r2
 800c8ac:	b29a      	uxth	r2, r3
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d30a      	bcc.n	800c8ce <tcp_receive+0x35a>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8c2:	4413      	add	r3, r2
 800c8c4:	b29a      	uxth	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c8cc:	e004      	b.n	800c8d8 <tcp_receive+0x364>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8e0:	4a98      	ldr	r2, [pc, #608]	; (800cb44 <tcp_receive+0x5d0>)
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f7ff fdca 	bl	800c47c <tcp_free_acked_segments>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8f6:	4a94      	ldr	r2, [pc, #592]	; (800cb48 <tcp_receive+0x5d4>)
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f7ff fdbf 	bl	800c47c <tcp_free_acked_segments>
 800c8fe:	4602      	mov	r2, r0
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d104      	bne.n	800c916 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c912:	861a      	strh	r2, [r3, #48]	; 0x30
 800c914:	e002      	b.n	800c91c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2200      	movs	r2, #0
 800c91a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c926:	2b00      	cmp	r3, #0
 800c928:	d103      	bne.n	800c932 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c938:	4b84      	ldr	r3, [pc, #528]	; (800cb4c <tcp_receive+0x5d8>)
 800c93a:	881b      	ldrh	r3, [r3, #0]
 800c93c:	4413      	add	r3, r2
 800c93e:	b29a      	uxth	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	8b5b      	ldrh	r3, [r3, #26]
 800c94a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d035      	beq.n	800c9be <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c956:	2b00      	cmp	r3, #0
 800c958:	d118      	bne.n	800c98c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d00c      	beq.n	800c97c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	4618      	mov	r0, r3
 800c970:	f7fb f963 	bl	8007c3a <lwip_htonl>
 800c974:	4603      	mov	r3, r0
 800c976:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c978:	2b00      	cmp	r3, #0
 800c97a:	dc20      	bgt.n	800c9be <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	8b5b      	ldrh	r3, [r3, #26]
 800c980:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c984:	b29a      	uxth	r2, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c98a:	e018      	b.n	800c9be <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fb f94e 	bl	8007c3a <lwip_htonl>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	1ae3      	subs	r3, r4, r3
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	dc0b      	bgt.n	800c9be <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	8b5b      	ldrh	r3, [r3, #26]
 800c9aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c9ae:	b29a      	uxth	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c9b4:	e003      	b.n	800c9be <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f001 ff76 	bl	800e8a8 <tcp_send_empty_ack>
 800c9bc:	e000      	b.n	800c9c0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c9be:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d05b      	beq.n	800ca80 <tcp_receive+0x50c>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9cc:	4b60      	ldr	r3, [pc, #384]	; (800cb50 <tcp_receive+0x5dc>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	da54      	bge.n	800ca80 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c9d6:	4b5f      	ldr	r3, [pc, #380]	; (800cb54 <tcp_receive+0x5e0>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	b29a      	uxth	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	1ad3      	subs	r3, r2, r3
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c9ea:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c9f4:	10db      	asrs	r3, r3, #3
 800c9f6:	b21b      	sxth	r3, r3
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ca08:	b29a      	uxth	r2, r3
 800ca0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ca0e:	4413      	add	r3, r2
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	b21a      	sxth	r2, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ca18:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	da05      	bge.n	800ca2c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ca20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ca24:	425b      	negs	r3, r3
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ca2c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca36:	109b      	asrs	r3, r3, #2
 800ca38:	b21b      	sxth	r3, r3
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	1ad3      	subs	r3, r2, r3
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ca50:	4413      	add	r3, r2
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	b21a      	sxth	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ca60:	10db      	asrs	r3, r3, #3
 800ca62:	b21b      	sxth	r3, r3
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	4413      	add	r3, r2
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	b21a      	sxth	r2, r3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ca80:	4b35      	ldr	r3, [pc, #212]	; (800cb58 <tcp_receive+0x5e4>)
 800ca82:	881b      	ldrh	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f000 84e2 	beq.w	800d44e <tcp_receive+0xeda>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	7d1b      	ldrb	r3, [r3, #20]
 800ca8e:	2b06      	cmp	r3, #6
 800ca90:	f200 84dd 	bhi.w	800d44e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca98:	4b30      	ldr	r3, [pc, #192]	; (800cb5c <tcp_receive+0x5e8>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	1ad3      	subs	r3, r2, r3
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f2c0 808f 	blt.w	800cbc4 <tcp_receive+0x650>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caaa:	4b2b      	ldr	r3, [pc, #172]	; (800cb58 <tcp_receive+0x5e4>)
 800caac:	881b      	ldrh	r3, [r3, #0]
 800caae:	4619      	mov	r1, r3
 800cab0:	4b2a      	ldr	r3, [pc, #168]	; (800cb5c <tcp_receive+0x5e8>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	440b      	add	r3, r1
 800cab6:	1ad3      	subs	r3, r2, r3
 800cab8:	3301      	adds	r3, #1
 800caba:	2b00      	cmp	r3, #0
 800cabc:	f300 8082 	bgt.w	800cbc4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800cac0:	4b27      	ldr	r3, [pc, #156]	; (800cb60 <tcp_receive+0x5ec>)
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caca:	4b24      	ldr	r3, [pc, #144]	; (800cb5c <tcp_receive+0x5e8>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	1ad3      	subs	r3, r2, r3
 800cad0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800cad2:	4b23      	ldr	r3, [pc, #140]	; (800cb60 <tcp_receive+0x5ec>)
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d106      	bne.n	800cae8 <tcp_receive+0x574>
 800cada:	4b22      	ldr	r3, [pc, #136]	; (800cb64 <tcp_receive+0x5f0>)
 800cadc:	f240 5294 	movw	r2, #1428	; 0x594
 800cae0:	4921      	ldr	r1, [pc, #132]	; (800cb68 <tcp_receive+0x5f4>)
 800cae2:	4822      	ldr	r0, [pc, #136]	; (800cb6c <tcp_receive+0x5f8>)
 800cae4:	f005 fb76 	bl	80121d4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800cae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800caee:	4293      	cmp	r3, r2
 800caf0:	d906      	bls.n	800cb00 <tcp_receive+0x58c>
 800caf2:	4b1c      	ldr	r3, [pc, #112]	; (800cb64 <tcp_receive+0x5f0>)
 800caf4:	f240 5295 	movw	r2, #1429	; 0x595
 800caf8:	491d      	ldr	r1, [pc, #116]	; (800cb70 <tcp_receive+0x5fc>)
 800cafa:	481c      	ldr	r0, [pc, #112]	; (800cb6c <tcp_receive+0x5f8>)
 800cafc:	f005 fb6a 	bl	80121d4 <iprintf>
      off = (u16_t)off32;
 800cb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800cb06:	4b16      	ldr	r3, [pc, #88]	; (800cb60 <tcp_receive+0x5ec>)
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	891b      	ldrh	r3, [r3, #8]
 800cb0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d906      	bls.n	800cb22 <tcp_receive+0x5ae>
 800cb14:	4b13      	ldr	r3, [pc, #76]	; (800cb64 <tcp_receive+0x5f0>)
 800cb16:	f240 5297 	movw	r2, #1431	; 0x597
 800cb1a:	4916      	ldr	r1, [pc, #88]	; (800cb74 <tcp_receive+0x600>)
 800cb1c:	4813      	ldr	r0, [pc, #76]	; (800cb6c <tcp_receive+0x5f8>)
 800cb1e:	f005 fb59 	bl	80121d4 <iprintf>
      inseg.len -= off;
 800cb22:	4b0f      	ldr	r3, [pc, #60]	; (800cb60 <tcp_receive+0x5ec>)
 800cb24:	891a      	ldrh	r2, [r3, #8]
 800cb26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb2a:	1ad3      	subs	r3, r2, r3
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	4b0c      	ldr	r3, [pc, #48]	; (800cb60 <tcp_receive+0x5ec>)
 800cb30:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800cb32:	4b0b      	ldr	r3, [pc, #44]	; (800cb60 <tcp_receive+0x5ec>)
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	891a      	ldrh	r2, [r3, #8]
 800cb38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb3c:	1ad3      	subs	r3, r2, r3
 800cb3e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800cb40:	e02a      	b.n	800cb98 <tcp_receive+0x624>
 800cb42:	bf00      	nop
 800cb44:	08015cd0 	.word	0x08015cd0
 800cb48:	08015cd8 	.word	0x08015cd8
 800cb4c:	2000aab8 	.word	0x2000aab8
 800cb50:	2000aab4 	.word	0x2000aab4
 800cb54:	2000aa78 	.word	0x2000aa78
 800cb58:	2000aaba 	.word	0x2000aaba
 800cb5c:	2000aab0 	.word	0x2000aab0
 800cb60:	2000aa90 	.word	0x2000aa90
 800cb64:	08015968 	.word	0x08015968
 800cb68:	08015ce0 	.word	0x08015ce0
 800cb6c:	080159b4 	.word	0x080159b4
 800cb70:	08015cf0 	.word	0x08015cf0
 800cb74:	08015d00 	.word	0x08015d00
        off -= p->len;
 800cb78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb7a:	895b      	ldrh	r3, [r3, #10]
 800cb7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cb80:	1ad3      	subs	r3, r2, r3
 800cb82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800cb86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cb8a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800cb8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb8e:	2200      	movs	r2, #0
 800cb90:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800cb92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800cb98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb9a:	895b      	ldrh	r3, [r3, #10]
 800cb9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d8e9      	bhi.n	800cb78 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800cba4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cba8:	4619      	mov	r1, r3
 800cbaa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cbac:	f7fc fb08 	bl	80091c0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb4:	4a91      	ldr	r2, [pc, #580]	; (800cdfc <tcp_receive+0x888>)
 800cbb6:	6013      	str	r3, [r2, #0]
 800cbb8:	4b91      	ldr	r3, [pc, #580]	; (800ce00 <tcp_receive+0x88c>)
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	4a8f      	ldr	r2, [pc, #572]	; (800cdfc <tcp_receive+0x888>)
 800cbbe:	6812      	ldr	r2, [r2, #0]
 800cbc0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cbc2:	e00d      	b.n	800cbe0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800cbc4:	4b8d      	ldr	r3, [pc, #564]	; (800cdfc <tcp_receive+0x888>)
 800cbc6:	681a      	ldr	r2, [r3, #0]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbcc:	1ad3      	subs	r3, r2, r3
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	da06      	bge.n	800cbe0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	8b5b      	ldrh	r3, [r3, #26]
 800cbd6:	f043 0302 	orr.w	r3, r3, #2
 800cbda:	b29a      	uxth	r2, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cbe0:	4b86      	ldr	r3, [pc, #536]	; (800cdfc <tcp_receive+0x888>)
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe8:	1ad3      	subs	r3, r2, r3
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f2c0 842a 	blt.w	800d444 <tcp_receive+0xed0>
 800cbf0:	4b82      	ldr	r3, [pc, #520]	; (800cdfc <tcp_receive+0x888>)
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf8:	6879      	ldr	r1, [r7, #4]
 800cbfa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cbfc:	440b      	add	r3, r1
 800cbfe:	1ad3      	subs	r3, r2, r3
 800cc00:	3301      	adds	r3, #1
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	f300 841e 	bgt.w	800d444 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc0c:	4b7b      	ldr	r3, [pc, #492]	; (800cdfc <tcp_receive+0x888>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	f040 829a 	bne.w	800d14a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800cc16:	4b7a      	ldr	r3, [pc, #488]	; (800ce00 <tcp_receive+0x88c>)
 800cc18:	891c      	ldrh	r4, [r3, #8]
 800cc1a:	4b79      	ldr	r3, [pc, #484]	; (800ce00 <tcp_receive+0x88c>)
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	899b      	ldrh	r3, [r3, #12]
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fa fff4 	bl	8007c10 <lwip_htons>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	f003 0303 	and.w	r3, r3, #3
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d001      	beq.n	800cc38 <tcp_receive+0x6c4>
 800cc34:	2301      	movs	r3, #1
 800cc36:	e000      	b.n	800cc3a <tcp_receive+0x6c6>
 800cc38:	2300      	movs	r3, #0
 800cc3a:	4423      	add	r3, r4
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	4b71      	ldr	r3, [pc, #452]	; (800ce04 <tcp_receive+0x890>)
 800cc40:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cc46:	4b6f      	ldr	r3, [pc, #444]	; (800ce04 <tcp_receive+0x890>)
 800cc48:	881b      	ldrh	r3, [r3, #0]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d275      	bcs.n	800cd3a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cc4e:	4b6c      	ldr	r3, [pc, #432]	; (800ce00 <tcp_receive+0x88c>)
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	899b      	ldrh	r3, [r3, #12]
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fa ffda 	bl	8007c10 <lwip_htons>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	f003 0301 	and.w	r3, r3, #1
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d01f      	beq.n	800cca8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cc68:	4b65      	ldr	r3, [pc, #404]	; (800ce00 <tcp_receive+0x88c>)
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	899b      	ldrh	r3, [r3, #12]
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	b21b      	sxth	r3, r3
 800cc72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cc76:	b21c      	sxth	r4, r3
 800cc78:	4b61      	ldr	r3, [pc, #388]	; (800ce00 <tcp_receive+0x88c>)
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	899b      	ldrh	r3, [r3, #12]
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7fa ffc5 	bl	8007c10 <lwip_htons>
 800cc86:	4603      	mov	r3, r0
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7fa ffbc 	bl	8007c10 <lwip_htons>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	b21b      	sxth	r3, r3
 800cc9c:	4323      	orrs	r3, r4
 800cc9e:	b21a      	sxth	r2, r3
 800cca0:	4b57      	ldr	r3, [pc, #348]	; (800ce00 <tcp_receive+0x88c>)
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	b292      	uxth	r2, r2
 800cca6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ccac:	4b54      	ldr	r3, [pc, #336]	; (800ce00 <tcp_receive+0x88c>)
 800ccae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ccb0:	4b53      	ldr	r3, [pc, #332]	; (800ce00 <tcp_receive+0x88c>)
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	899b      	ldrh	r3, [r3, #12]
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7fa ffa9 	bl	8007c10 <lwip_htons>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	f003 0302 	and.w	r3, r3, #2
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d005      	beq.n	800ccd6 <tcp_receive+0x762>
            inseg.len -= 1;
 800ccca:	4b4d      	ldr	r3, [pc, #308]	; (800ce00 <tcp_receive+0x88c>)
 800cccc:	891b      	ldrh	r3, [r3, #8]
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	4b4b      	ldr	r3, [pc, #300]	; (800ce00 <tcp_receive+0x88c>)
 800ccd4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ccd6:	4b4a      	ldr	r3, [pc, #296]	; (800ce00 <tcp_receive+0x88c>)
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	4a49      	ldr	r2, [pc, #292]	; (800ce00 <tcp_receive+0x88c>)
 800ccdc:	8912      	ldrh	r2, [r2, #8]
 800ccde:	4611      	mov	r1, r2
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7fc f96d 	bl	8008fc0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cce6:	4b46      	ldr	r3, [pc, #280]	; (800ce00 <tcp_receive+0x88c>)
 800cce8:	891c      	ldrh	r4, [r3, #8]
 800ccea:	4b45      	ldr	r3, [pc, #276]	; (800ce00 <tcp_receive+0x88c>)
 800ccec:	68db      	ldr	r3, [r3, #12]
 800ccee:	899b      	ldrh	r3, [r3, #12]
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7fa ff8c 	bl	8007c10 <lwip_htons>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	f003 0303 	and.w	r3, r3, #3
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d001      	beq.n	800cd08 <tcp_receive+0x794>
 800cd04:	2301      	movs	r3, #1
 800cd06:	e000      	b.n	800cd0a <tcp_receive+0x796>
 800cd08:	2300      	movs	r3, #0
 800cd0a:	4423      	add	r3, r4
 800cd0c:	b29a      	uxth	r2, r3
 800cd0e:	4b3d      	ldr	r3, [pc, #244]	; (800ce04 <tcp_receive+0x890>)
 800cd10:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cd12:	4b3c      	ldr	r3, [pc, #240]	; (800ce04 <tcp_receive+0x890>)
 800cd14:	881b      	ldrh	r3, [r3, #0]
 800cd16:	461a      	mov	r2, r3
 800cd18:	4b38      	ldr	r3, [pc, #224]	; (800cdfc <tcp_receive+0x888>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	441a      	add	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd22:	6879      	ldr	r1, [r7, #4]
 800cd24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cd26:	440b      	add	r3, r1
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d006      	beq.n	800cd3a <tcp_receive+0x7c6>
 800cd2c:	4b36      	ldr	r3, [pc, #216]	; (800ce08 <tcp_receive+0x894>)
 800cd2e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800cd32:	4936      	ldr	r1, [pc, #216]	; (800ce0c <tcp_receive+0x898>)
 800cd34:	4836      	ldr	r0, [pc, #216]	; (800ce10 <tcp_receive+0x89c>)
 800cd36:	f005 fa4d 	bl	80121d4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	f000 80e7 	beq.w	800cf12 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cd44:	4b2e      	ldr	r3, [pc, #184]	; (800ce00 <tcp_receive+0x88c>)
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	899b      	ldrh	r3, [r3, #12]
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7fa ff5f 	bl	8007c10 <lwip_htons>
 800cd52:	4603      	mov	r3, r0
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	f003 0301 	and.w	r3, r3, #1
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d010      	beq.n	800cd80 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800cd5e:	e00a      	b.n	800cd76 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd64:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f7fd fd92 	bl	800a89a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d1f0      	bne.n	800cd60 <tcp_receive+0x7ec>
 800cd7e:	e0c8      	b.n	800cf12 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd84:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800cd86:	e052      	b.n	800ce2e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cd88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	899b      	ldrh	r3, [r3, #12]
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7fa ff3d 	bl	8007c10 <lwip_htons>
 800cd96:	4603      	mov	r3, r0
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	f003 0301 	and.w	r3, r3, #1
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d03d      	beq.n	800ce1e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800cda2:	4b17      	ldr	r3, [pc, #92]	; (800ce00 <tcp_receive+0x88c>)
 800cda4:	68db      	ldr	r3, [r3, #12]
 800cda6:	899b      	ldrh	r3, [r3, #12]
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7fa ff30 	bl	8007c10 <lwip_htons>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d130      	bne.n	800ce1e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cdbc:	4b10      	ldr	r3, [pc, #64]	; (800ce00 <tcp_receive+0x88c>)
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	899b      	ldrh	r3, [r3, #12]
 800cdc2:	b29c      	uxth	r4, r3
 800cdc4:	2001      	movs	r0, #1
 800cdc6:	f7fa ff23 	bl	8007c10 <lwip_htons>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	461a      	mov	r2, r3
 800cdce:	4b0c      	ldr	r3, [pc, #48]	; (800ce00 <tcp_receive+0x88c>)
 800cdd0:	68db      	ldr	r3, [r3, #12]
 800cdd2:	4322      	orrs	r2, r4
 800cdd4:	b292      	uxth	r2, r2
 800cdd6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800cdd8:	4b09      	ldr	r3, [pc, #36]	; (800ce00 <tcp_receive+0x88c>)
 800cdda:	891c      	ldrh	r4, [r3, #8]
 800cddc:	4b08      	ldr	r3, [pc, #32]	; (800ce00 <tcp_receive+0x88c>)
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	899b      	ldrh	r3, [r3, #12]
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7fa ff13 	bl	8007c10 <lwip_htons>
 800cdea:	4603      	mov	r3, r0
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	f003 0303 	and.w	r3, r3, #3
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00e      	beq.n	800ce14 <tcp_receive+0x8a0>
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e00d      	b.n	800ce16 <tcp_receive+0x8a2>
 800cdfa:	bf00      	nop
 800cdfc:	2000aab0 	.word	0x2000aab0
 800ce00:	2000aa90 	.word	0x2000aa90
 800ce04:	2000aaba 	.word	0x2000aaba
 800ce08:	08015968 	.word	0x08015968
 800ce0c:	08015d10 	.word	0x08015d10
 800ce10:	080159b4 	.word	0x080159b4
 800ce14:	2300      	movs	r3, #0
 800ce16:	4423      	add	r3, r4
 800ce18:	b29a      	uxth	r2, r3
 800ce1a:	4b98      	ldr	r3, [pc, #608]	; (800d07c <tcp_receive+0xb08>)
 800ce1c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ce1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce20:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ce22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ce28:	6938      	ldr	r0, [r7, #16]
 800ce2a:	f7fd fd36 	bl	800a89a <tcp_seg_free>
            while (next &&
 800ce2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d00e      	beq.n	800ce52 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ce34:	4b91      	ldr	r3, [pc, #580]	; (800d07c <tcp_receive+0xb08>)
 800ce36:	881b      	ldrh	r3, [r3, #0]
 800ce38:	461a      	mov	r2, r3
 800ce3a:	4b91      	ldr	r3, [pc, #580]	; (800d080 <tcp_receive+0xb0c>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	441a      	add	r2, r3
 800ce40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ce48:	8909      	ldrh	r1, [r1, #8]
 800ce4a:	440b      	add	r3, r1
 800ce4c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	da9a      	bge.n	800cd88 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ce52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d059      	beq.n	800cf0c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800ce58:	4b88      	ldr	r3, [pc, #544]	; (800d07c <tcp_receive+0xb08>)
 800ce5a:	881b      	ldrh	r3, [r3, #0]
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	4b88      	ldr	r3, [pc, #544]	; (800d080 <tcp_receive+0xb0c>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	441a      	add	r2, r3
 800ce64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	dd4d      	ble.n	800cf0c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ce70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	4b81      	ldr	r3, [pc, #516]	; (800d080 <tcp_receive+0xb0c>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	1ad3      	subs	r3, r2, r3
 800ce80:	b29a      	uxth	r2, r3
 800ce82:	4b80      	ldr	r3, [pc, #512]	; (800d084 <tcp_receive+0xb10>)
 800ce84:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ce86:	4b7f      	ldr	r3, [pc, #508]	; (800d084 <tcp_receive+0xb10>)
 800ce88:	68db      	ldr	r3, [r3, #12]
 800ce8a:	899b      	ldrh	r3, [r3, #12]
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7fa febe 	bl	8007c10 <lwip_htons>
 800ce94:	4603      	mov	r3, r0
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	f003 0302 	and.w	r3, r3, #2
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d005      	beq.n	800ceac <tcp_receive+0x938>
                inseg.len -= 1;
 800cea0:	4b78      	ldr	r3, [pc, #480]	; (800d084 <tcp_receive+0xb10>)
 800cea2:	891b      	ldrh	r3, [r3, #8]
 800cea4:	3b01      	subs	r3, #1
 800cea6:	b29a      	uxth	r2, r3
 800cea8:	4b76      	ldr	r3, [pc, #472]	; (800d084 <tcp_receive+0xb10>)
 800ceaa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ceac:	4b75      	ldr	r3, [pc, #468]	; (800d084 <tcp_receive+0xb10>)
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	4a74      	ldr	r2, [pc, #464]	; (800d084 <tcp_receive+0xb10>)
 800ceb2:	8912      	ldrh	r2, [r2, #8]
 800ceb4:	4611      	mov	r1, r2
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7fc f882 	bl	8008fc0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800cebc:	4b71      	ldr	r3, [pc, #452]	; (800d084 <tcp_receive+0xb10>)
 800cebe:	891c      	ldrh	r4, [r3, #8]
 800cec0:	4b70      	ldr	r3, [pc, #448]	; (800d084 <tcp_receive+0xb10>)
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	899b      	ldrh	r3, [r3, #12]
 800cec6:	b29b      	uxth	r3, r3
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7fa fea1 	bl	8007c10 <lwip_htons>
 800cece:	4603      	mov	r3, r0
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	f003 0303 	and.w	r3, r3, #3
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d001      	beq.n	800cede <tcp_receive+0x96a>
 800ceda:	2301      	movs	r3, #1
 800cedc:	e000      	b.n	800cee0 <tcp_receive+0x96c>
 800cede:	2300      	movs	r3, #0
 800cee0:	4423      	add	r3, r4
 800cee2:	b29a      	uxth	r2, r3
 800cee4:	4b65      	ldr	r3, [pc, #404]	; (800d07c <tcp_receive+0xb08>)
 800cee6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800cee8:	4b64      	ldr	r3, [pc, #400]	; (800d07c <tcp_receive+0xb08>)
 800ceea:	881b      	ldrh	r3, [r3, #0]
 800ceec:	461a      	mov	r2, r3
 800ceee:	4b64      	ldr	r3, [pc, #400]	; (800d080 <tcp_receive+0xb0c>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	441a      	add	r2, r3
 800cef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d006      	beq.n	800cf0c <tcp_receive+0x998>
 800cefe:	4b62      	ldr	r3, [pc, #392]	; (800d088 <tcp_receive+0xb14>)
 800cf00:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800cf04:	4961      	ldr	r1, [pc, #388]	; (800d08c <tcp_receive+0xb18>)
 800cf06:	4862      	ldr	r0, [pc, #392]	; (800d090 <tcp_receive+0xb1c>)
 800cf08:	f005 f964 	bl	80121d4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf10:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800cf12:	4b5a      	ldr	r3, [pc, #360]	; (800d07c <tcp_receive+0xb08>)
 800cf14:	881b      	ldrh	r3, [r3, #0]
 800cf16:	461a      	mov	r2, r3
 800cf18:	4b59      	ldr	r3, [pc, #356]	; (800d080 <tcp_receive+0xb0c>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	441a      	add	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf26:	4b55      	ldr	r3, [pc, #340]	; (800d07c <tcp_receive+0xb08>)
 800cf28:	881b      	ldrh	r3, [r3, #0]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d206      	bcs.n	800cf3c <tcp_receive+0x9c8>
 800cf2e:	4b56      	ldr	r3, [pc, #344]	; (800d088 <tcp_receive+0xb14>)
 800cf30:	f240 6207 	movw	r2, #1543	; 0x607
 800cf34:	4957      	ldr	r1, [pc, #348]	; (800d094 <tcp_receive+0xb20>)
 800cf36:	4856      	ldr	r0, [pc, #344]	; (800d090 <tcp_receive+0xb1c>)
 800cf38:	f005 f94c 	bl	80121d4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf40:	4b4e      	ldr	r3, [pc, #312]	; (800d07c <tcp_receive+0xb08>)
 800cf42:	881b      	ldrh	r3, [r3, #0]
 800cf44:	1ad3      	subs	r3, r2, r3
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f7fc ffc5 	bl	8009edc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800cf52:	4b4c      	ldr	r3, [pc, #304]	; (800d084 <tcp_receive+0xb10>)
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	891b      	ldrh	r3, [r3, #8]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d006      	beq.n	800cf6a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800cf5c:	4b49      	ldr	r3, [pc, #292]	; (800d084 <tcp_receive+0xb10>)
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	4a4d      	ldr	r2, [pc, #308]	; (800d098 <tcp_receive+0xb24>)
 800cf62:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800cf64:	4b47      	ldr	r3, [pc, #284]	; (800d084 <tcp_receive+0xb10>)
 800cf66:	2200      	movs	r2, #0
 800cf68:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cf6a:	4b46      	ldr	r3, [pc, #280]	; (800d084 <tcp_receive+0xb10>)
 800cf6c:	68db      	ldr	r3, [r3, #12]
 800cf6e:	899b      	ldrh	r3, [r3, #12]
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fa fe4c 	bl	8007c10 <lwip_htons>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	f003 0301 	and.w	r3, r3, #1
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	f000 80b8 	beq.w	800d0f6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800cf86:	4b45      	ldr	r3, [pc, #276]	; (800d09c <tcp_receive+0xb28>)
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	f043 0320 	orr.w	r3, r3, #32
 800cf8e:	b2da      	uxtb	r2, r3
 800cf90:	4b42      	ldr	r3, [pc, #264]	; (800d09c <tcp_receive+0xb28>)
 800cf92:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800cf94:	e0af      	b.n	800d0f6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf9a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	4a36      	ldr	r2, [pc, #216]	; (800d080 <tcp_receive+0xb0c>)
 800cfa6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	891b      	ldrh	r3, [r3, #8]
 800cfac:	461c      	mov	r4, r3
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	68db      	ldr	r3, [r3, #12]
 800cfb2:	899b      	ldrh	r3, [r3, #12]
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7fa fe2a 	bl	8007c10 <lwip_htons>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	f003 0303 	and.w	r3, r3, #3
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d001      	beq.n	800cfcc <tcp_receive+0xa58>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e000      	b.n	800cfce <tcp_receive+0xa5a>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	191a      	adds	r2, r3, r4
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd4:	441a      	add	r2, r3
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfde:	461c      	mov	r4, r3
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	891b      	ldrh	r3, [r3, #8]
 800cfe4:	461d      	mov	r5, r3
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	899b      	ldrh	r3, [r3, #12]
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fa fe0e 	bl	8007c10 <lwip_htons>
 800cff4:	4603      	mov	r3, r0
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	f003 0303 	and.w	r3, r3, #3
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d001      	beq.n	800d004 <tcp_receive+0xa90>
 800d000:	2301      	movs	r3, #1
 800d002:	e000      	b.n	800d006 <tcp_receive+0xa92>
 800d004:	2300      	movs	r3, #0
 800d006:	442b      	add	r3, r5
 800d008:	429c      	cmp	r4, r3
 800d00a:	d206      	bcs.n	800d01a <tcp_receive+0xaa6>
 800d00c:	4b1e      	ldr	r3, [pc, #120]	; (800d088 <tcp_receive+0xb14>)
 800d00e:	f240 622b 	movw	r2, #1579	; 0x62b
 800d012:	4923      	ldr	r1, [pc, #140]	; (800d0a0 <tcp_receive+0xb2c>)
 800d014:	481e      	ldr	r0, [pc, #120]	; (800d090 <tcp_receive+0xb1c>)
 800d016:	f005 f8dd 	bl	80121d4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	891b      	ldrh	r3, [r3, #8]
 800d01e:	461c      	mov	r4, r3
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	899b      	ldrh	r3, [r3, #12]
 800d026:	b29b      	uxth	r3, r3
 800d028:	4618      	mov	r0, r3
 800d02a:	f7fa fdf1 	bl	8007c10 <lwip_htons>
 800d02e:	4603      	mov	r3, r0
 800d030:	b2db      	uxtb	r3, r3
 800d032:	f003 0303 	and.w	r3, r3, #3
 800d036:	2b00      	cmp	r3, #0
 800d038:	d001      	beq.n	800d03e <tcp_receive+0xaca>
 800d03a:	2301      	movs	r3, #1
 800d03c:	e000      	b.n	800d040 <tcp_receive+0xacc>
 800d03e:	2300      	movs	r3, #0
 800d040:	1919      	adds	r1, r3, r4
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d046:	b28b      	uxth	r3, r1
 800d048:	1ad3      	subs	r3, r2, r3
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f7fc ff43 	bl	8009edc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	891b      	ldrh	r3, [r3, #8]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d028      	beq.n	800d0b2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d060:	4b0d      	ldr	r3, [pc, #52]	; (800d098 <tcp_receive+0xb24>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d01d      	beq.n	800d0a4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d068:	4b0b      	ldr	r3, [pc, #44]	; (800d098 <tcp_receive+0xb24>)
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	4619      	mov	r1, r3
 800d072:	4610      	mov	r0, r2
 800d074:	f7fc f9ec 	bl	8009450 <pbuf_cat>
 800d078:	e018      	b.n	800d0ac <tcp_receive+0xb38>
 800d07a:	bf00      	nop
 800d07c:	2000aaba 	.word	0x2000aaba
 800d080:	2000aab0 	.word	0x2000aab0
 800d084:	2000aa90 	.word	0x2000aa90
 800d088:	08015968 	.word	0x08015968
 800d08c:	08015d48 	.word	0x08015d48
 800d090:	080159b4 	.word	0x080159b4
 800d094:	08015d84 	.word	0x08015d84
 800d098:	2000aac0 	.word	0x2000aac0
 800d09c:	2000aabd 	.word	0x2000aabd
 800d0a0:	08015da4 	.word	0x08015da4
            } else {
              recv_data = cseg->p;
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	4a70      	ldr	r2, [pc, #448]	; (800d26c <tcp_receive+0xcf8>)
 800d0aa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	899b      	ldrh	r3, [r3, #12]
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fa fda8 	bl	8007c10 <lwip_htons>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	f003 0301 	and.w	r3, r3, #1
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00d      	beq.n	800d0e8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d0cc:	4b68      	ldr	r3, [pc, #416]	; (800d270 <tcp_receive+0xcfc>)
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	f043 0320 	orr.w	r3, r3, #32
 800d0d4:	b2da      	uxtb	r2, r3
 800d0d6:	4b66      	ldr	r3, [pc, #408]	; (800d270 <tcp_receive+0xcfc>)
 800d0d8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	7d1b      	ldrb	r3, [r3, #20]
 800d0de:	2b04      	cmp	r3, #4
 800d0e0:	d102      	bne.n	800d0e8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2207      	movs	r2, #7
 800d0e6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d0f0:	68b8      	ldr	r0, [r7, #8]
 800d0f2:	f7fd fbd2 	bl	800a89a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d008      	beq.n	800d110 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	685a      	ldr	r2, [r3, #4]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d10a:	429a      	cmp	r2, r3
 800d10c:	f43f af43 	beq.w	800cf96 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	8b5b      	ldrh	r3, [r3, #26]
 800d114:	f003 0301 	and.w	r3, r3, #1
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d00e      	beq.n	800d13a <tcp_receive+0xbc6>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	8b5b      	ldrh	r3, [r3, #26]
 800d120:	f023 0301 	bic.w	r3, r3, #1
 800d124:	b29a      	uxth	r2, r3
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	835a      	strh	r2, [r3, #26]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	8b5b      	ldrh	r3, [r3, #26]
 800d12e:	f043 0302 	orr.w	r3, r3, #2
 800d132:	b29a      	uxth	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d138:	e188      	b.n	800d44c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	8b5b      	ldrh	r3, [r3, #26]
 800d13e:	f043 0301 	orr.w	r3, r3, #1
 800d142:	b29a      	uxth	r2, r3
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d148:	e180      	b.n	800d44c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d106      	bne.n	800d160 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d152:	4848      	ldr	r0, [pc, #288]	; (800d274 <tcp_receive+0xd00>)
 800d154:	f7fd fbba 	bl	800a8cc <tcp_seg_copy>
 800d158:	4602      	mov	r2, r0
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	675a      	str	r2, [r3, #116]	; 0x74
 800d15e:	e16d      	b.n	800d43c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d160:	2300      	movs	r3, #0
 800d162:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d168:	63bb      	str	r3, [r7, #56]	; 0x38
 800d16a:	e157      	b.n	800d41c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	4b41      	ldr	r3, [pc, #260]	; (800d278 <tcp_receive+0xd04>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	429a      	cmp	r2, r3
 800d178:	d11d      	bne.n	800d1b6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d17a:	4b3e      	ldr	r3, [pc, #248]	; (800d274 <tcp_receive+0xd00>)
 800d17c:	891a      	ldrh	r2, [r3, #8]
 800d17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d180:	891b      	ldrh	r3, [r3, #8]
 800d182:	429a      	cmp	r2, r3
 800d184:	f240 814f 	bls.w	800d426 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d188:	483a      	ldr	r0, [pc, #232]	; (800d274 <tcp_receive+0xd00>)
 800d18a:	f7fd fb9f 	bl	800a8cc <tcp_seg_copy>
 800d18e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	2b00      	cmp	r3, #0
 800d194:	f000 8149 	beq.w	800d42a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800d198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d003      	beq.n	800d1a6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800d19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1a0:	697a      	ldr	r2, [r7, #20]
 800d1a2:	601a      	str	r2, [r3, #0]
 800d1a4:	e002      	b.n	800d1ac <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	697a      	ldr	r2, [r7, #20]
 800d1aa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d1ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d1ae:	6978      	ldr	r0, [r7, #20]
 800d1b0:	f7ff f8dc 	bl	800c36c <tcp_oos_insert_segment>
                }
                break;
 800d1b4:	e139      	b.n	800d42a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d117      	bne.n	800d1ec <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d1bc:	4b2e      	ldr	r3, [pc, #184]	; (800d278 <tcp_receive+0xd04>)
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	1ad3      	subs	r3, r2, r3
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	da57      	bge.n	800d27c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d1cc:	4829      	ldr	r0, [pc, #164]	; (800d274 <tcp_receive+0xd00>)
 800d1ce:	f7fd fb7d 	bl	800a8cc <tcp_seg_copy>
 800d1d2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f000 8129 	beq.w	800d42e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	69ba      	ldr	r2, [r7, #24]
 800d1e0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d1e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d1e4:	69b8      	ldr	r0, [r7, #24]
 800d1e6:	f7ff f8c1 	bl	800c36c <tcp_oos_insert_segment>
                  }
                  break;
 800d1ea:	e120      	b.n	800d42e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d1ec:	4b22      	ldr	r3, [pc, #136]	; (800d278 <tcp_receive+0xd04>)
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	db3e      	blt.n	800d27c <tcp_receive+0xd08>
 800d1fe:	4b1e      	ldr	r3, [pc, #120]	; (800d278 <tcp_receive+0xd04>)
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	1ad3      	subs	r3, r2, r3
 800d20a:	3301      	adds	r3, #1
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	dc35      	bgt.n	800d27c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d210:	4818      	ldr	r0, [pc, #96]	; (800d274 <tcp_receive+0xd00>)
 800d212:	f7fd fb5b 	bl	800a8cc <tcp_seg_copy>
 800d216:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	f000 8109 	beq.w	800d432 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d228:	8912      	ldrh	r2, [r2, #8]
 800d22a:	441a      	add	r2, r3
 800d22c:	4b12      	ldr	r3, [pc, #72]	; (800d278 <tcp_receive+0xd04>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	1ad3      	subs	r3, r2, r3
 800d232:	2b00      	cmp	r3, #0
 800d234:	dd12      	ble.n	800d25c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d236:	4b10      	ldr	r3, [pc, #64]	; (800d278 <tcp_receive+0xd04>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d23e:	68db      	ldr	r3, [r3, #12]
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	b29b      	uxth	r3, r3
 800d244:	1ad3      	subs	r3, r2, r3
 800d246:	b29a      	uxth	r2, r3
 800d248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d24a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d24e:	685a      	ldr	r2, [r3, #4]
 800d250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d252:	891b      	ldrh	r3, [r3, #8]
 800d254:	4619      	mov	r1, r3
 800d256:	4610      	mov	r0, r2
 800d258:	f7fb feb2 	bl	8008fc0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d25e:	69fa      	ldr	r2, [r7, #28]
 800d260:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d262:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d264:	69f8      	ldr	r0, [r7, #28]
 800d266:	f7ff f881 	bl	800c36c <tcp_oos_insert_segment>
                  }
                  break;
 800d26a:	e0e2      	b.n	800d432 <tcp_receive+0xebe>
 800d26c:	2000aac0 	.word	0x2000aac0
 800d270:	2000aabd 	.word	0x2000aabd
 800d274:	2000aa90 	.word	0x2000aa90
 800d278:	2000aab0 	.word	0x2000aab0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	f040 80c6 	bne.w	800d416 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d28a:	4b80      	ldr	r3, [pc, #512]	; (800d48c <tcp_receive+0xf18>)
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d290:	68db      	ldr	r3, [r3, #12]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d296:	2b00      	cmp	r3, #0
 800d298:	f340 80bd 	ble.w	800d416 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	899b      	ldrh	r3, [r3, #12]
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7fa fcb3 	bl	8007c10 <lwip_htons>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	f003 0301 	and.w	r3, r3, #1
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f040 80bf 	bne.w	800d436 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d2b8:	4875      	ldr	r0, [pc, #468]	; (800d490 <tcp_receive+0xf1c>)
 800d2ba:	f7fd fb07 	bl	800a8cc <tcp_seg_copy>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	f000 80b6 	beq.w	800d43a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2d6:	8912      	ldrh	r2, [r2, #8]
 800d2d8:	441a      	add	r2, r3
 800d2da:	4b6c      	ldr	r3, [pc, #432]	; (800d48c <tcp_receive+0xf18>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	1ad3      	subs	r3, r2, r3
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	dd12      	ble.n	800d30a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d2e4:	4b69      	ldr	r3, [pc, #420]	; (800d48c <tcp_receive+0xf18>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	b29a      	uxth	r2, r3
 800d2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	1ad3      	subs	r3, r2, r3
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fc:	685a      	ldr	r2, [r3, #4]
 800d2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d300:	891b      	ldrh	r3, [r3, #8]
 800d302:	4619      	mov	r1, r3
 800d304:	4610      	mov	r0, r2
 800d306:	f7fb fe5b 	bl	8008fc0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d30a:	4b62      	ldr	r3, [pc, #392]	; (800d494 <tcp_receive+0xf20>)
 800d30c:	881b      	ldrh	r3, [r3, #0]
 800d30e:	461a      	mov	r2, r3
 800d310:	4b5e      	ldr	r3, [pc, #376]	; (800d48c <tcp_receive+0xf18>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	441a      	add	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d31a:	6879      	ldr	r1, [r7, #4]
 800d31c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d31e:	440b      	add	r3, r1
 800d320:	1ad3      	subs	r3, r2, r3
 800d322:	2b00      	cmp	r3, #0
 800d324:	f340 8089 	ble.w	800d43a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	899b      	ldrh	r3, [r3, #12]
 800d330:	b29b      	uxth	r3, r3
 800d332:	4618      	mov	r0, r3
 800d334:	f7fa fc6c 	bl	8007c10 <lwip_htons>
 800d338:	4603      	mov	r3, r0
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	f003 0301 	and.w	r3, r3, #1
 800d340:	2b00      	cmp	r3, #0
 800d342:	d022      	beq.n	800d38a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	899b      	ldrh	r3, [r3, #12]
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	b21b      	sxth	r3, r3
 800d350:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d354:	b21c      	sxth	r4, r3
 800d356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	899b      	ldrh	r3, [r3, #12]
 800d35e:	b29b      	uxth	r3, r3
 800d360:	4618      	mov	r0, r3
 800d362:	f7fa fc55 	bl	8007c10 <lwip_htons>
 800d366:	4603      	mov	r3, r0
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d370:	b29b      	uxth	r3, r3
 800d372:	4618      	mov	r0, r3
 800d374:	f7fa fc4c 	bl	8007c10 <lwip_htons>
 800d378:	4603      	mov	r3, r0
 800d37a:	b21b      	sxth	r3, r3
 800d37c:	4323      	orrs	r3, r4
 800d37e:	b21a      	sxth	r2, r3
 800d380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	68db      	ldr	r3, [r3, #12]
 800d386:	b292      	uxth	r2, r2
 800d388:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38e:	b29a      	uxth	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d394:	4413      	add	r3, r2
 800d396:	b299      	uxth	r1, r3
 800d398:	4b3c      	ldr	r3, [pc, #240]	; (800d48c <tcp_receive+0xf18>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	1a8a      	subs	r2, r1, r2
 800d3a4:	b292      	uxth	r2, r2
 800d3a6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	685a      	ldr	r2, [r3, #4]
 800d3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	891b      	ldrh	r3, [r3, #8]
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	4610      	mov	r0, r2
 800d3b8:	f7fb fe02 	bl	8008fc0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	891c      	ldrh	r4, [r3, #8]
 800d3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	899b      	ldrh	r3, [r3, #12]
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7fa fc1f 	bl	8007c10 <lwip_htons>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	f003 0303 	and.w	r3, r3, #3
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d001      	beq.n	800d3e2 <tcp_receive+0xe6e>
 800d3de:	2301      	movs	r3, #1
 800d3e0:	e000      	b.n	800d3e4 <tcp_receive+0xe70>
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	4423      	add	r3, r4
 800d3e6:	b29a      	uxth	r2, r3
 800d3e8:	4b2a      	ldr	r3, [pc, #168]	; (800d494 <tcp_receive+0xf20>)
 800d3ea:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d3ec:	4b29      	ldr	r3, [pc, #164]	; (800d494 <tcp_receive+0xf20>)
 800d3ee:	881b      	ldrh	r3, [r3, #0]
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	4b26      	ldr	r3, [pc, #152]	; (800d48c <tcp_receive+0xf18>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	441a      	add	r2, r3
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fc:	6879      	ldr	r1, [r7, #4]
 800d3fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d400:	440b      	add	r3, r1
 800d402:	429a      	cmp	r2, r3
 800d404:	d019      	beq.n	800d43a <tcp_receive+0xec6>
 800d406:	4b24      	ldr	r3, [pc, #144]	; (800d498 <tcp_receive+0xf24>)
 800d408:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d40c:	4923      	ldr	r1, [pc, #140]	; (800d49c <tcp_receive+0xf28>)
 800d40e:	4824      	ldr	r0, [pc, #144]	; (800d4a0 <tcp_receive+0xf2c>)
 800d410:	f004 fee0 	bl	80121d4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d414:	e011      	b.n	800d43a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f47f aea4 	bne.w	800d16c <tcp_receive+0xbf8>
 800d424:	e00a      	b.n	800d43c <tcp_receive+0xec8>
                break;
 800d426:	bf00      	nop
 800d428:	e008      	b.n	800d43c <tcp_receive+0xec8>
                break;
 800d42a:	bf00      	nop
 800d42c:	e006      	b.n	800d43c <tcp_receive+0xec8>
                  break;
 800d42e:	bf00      	nop
 800d430:	e004      	b.n	800d43c <tcp_receive+0xec8>
                  break;
 800d432:	bf00      	nop
 800d434:	e002      	b.n	800d43c <tcp_receive+0xec8>
                  break;
 800d436:	bf00      	nop
 800d438:	e000      	b.n	800d43c <tcp_receive+0xec8>
                break;
 800d43a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f001 fa33 	bl	800e8a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d442:	e003      	b.n	800d44c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f001 fa2f 	bl	800e8a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d44a:	e01a      	b.n	800d482 <tcp_receive+0xf0e>
 800d44c:	e019      	b.n	800d482 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d44e:	4b0f      	ldr	r3, [pc, #60]	; (800d48c <tcp_receive+0xf18>)
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	2b00      	cmp	r3, #0
 800d45a:	db0a      	blt.n	800d472 <tcp_receive+0xefe>
 800d45c:	4b0b      	ldr	r3, [pc, #44]	; (800d48c <tcp_receive+0xf18>)
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d464:	6879      	ldr	r1, [r7, #4]
 800d466:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d468:	440b      	add	r3, r1
 800d46a:	1ad3      	subs	r3, r2, r3
 800d46c:	3301      	adds	r3, #1
 800d46e:	2b00      	cmp	r3, #0
 800d470:	dd07      	ble.n	800d482 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	8b5b      	ldrh	r3, [r3, #26]
 800d476:	f043 0302 	orr.w	r3, r3, #2
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d480:	e7ff      	b.n	800d482 <tcp_receive+0xf0e>
 800d482:	bf00      	nop
 800d484:	3750      	adds	r7, #80	; 0x50
 800d486:	46bd      	mov	sp, r7
 800d488:	bdb0      	pop	{r4, r5, r7, pc}
 800d48a:	bf00      	nop
 800d48c:	2000aab0 	.word	0x2000aab0
 800d490:	2000aa90 	.word	0x2000aa90
 800d494:	2000aaba 	.word	0x2000aaba
 800d498:	08015968 	.word	0x08015968
 800d49c:	08015d10 	.word	0x08015d10
 800d4a0:	080159b4 	.word	0x080159b4

0800d4a4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d4aa:	4b15      	ldr	r3, [pc, #84]	; (800d500 <tcp_get_next_optbyte+0x5c>)
 800d4ac:	881b      	ldrh	r3, [r3, #0]
 800d4ae:	1c5a      	adds	r2, r3, #1
 800d4b0:	b291      	uxth	r1, r2
 800d4b2:	4a13      	ldr	r2, [pc, #76]	; (800d500 <tcp_get_next_optbyte+0x5c>)
 800d4b4:	8011      	strh	r1, [r2, #0]
 800d4b6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d4b8:	4b12      	ldr	r3, [pc, #72]	; (800d504 <tcp_get_next_optbyte+0x60>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d004      	beq.n	800d4ca <tcp_get_next_optbyte+0x26>
 800d4c0:	4b11      	ldr	r3, [pc, #68]	; (800d508 <tcp_get_next_optbyte+0x64>)
 800d4c2:	881b      	ldrh	r3, [r3, #0]
 800d4c4:	88fa      	ldrh	r2, [r7, #6]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d208      	bcs.n	800d4dc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d4ca:	4b10      	ldr	r3, [pc, #64]	; (800d50c <tcp_get_next_optbyte+0x68>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	3314      	adds	r3, #20
 800d4d0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d4d2:	88fb      	ldrh	r3, [r7, #6]
 800d4d4:	683a      	ldr	r2, [r7, #0]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	e00b      	b.n	800d4f4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d4dc:	88fb      	ldrh	r3, [r7, #6]
 800d4de:	b2da      	uxtb	r2, r3
 800d4e0:	4b09      	ldr	r3, [pc, #36]	; (800d508 <tcp_get_next_optbyte+0x64>)
 800d4e2:	881b      	ldrh	r3, [r3, #0]
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	1ad3      	subs	r3, r2, r3
 800d4e8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d4ea:	4b06      	ldr	r3, [pc, #24]	; (800d504 <tcp_get_next_optbyte+0x60>)
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	797b      	ldrb	r3, [r7, #5]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr
 800d500:	2000aaac 	.word	0x2000aaac
 800d504:	2000aaa8 	.word	0x2000aaa8
 800d508:	2000aaa6 	.word	0x2000aaa6
 800d50c:	2000aaa0 	.word	0x2000aaa0

0800d510 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d106      	bne.n	800d52c <tcp_parseopt+0x1c>
 800d51e:	4b32      	ldr	r3, [pc, #200]	; (800d5e8 <tcp_parseopt+0xd8>)
 800d520:	f240 727d 	movw	r2, #1917	; 0x77d
 800d524:	4931      	ldr	r1, [pc, #196]	; (800d5ec <tcp_parseopt+0xdc>)
 800d526:	4832      	ldr	r0, [pc, #200]	; (800d5f0 <tcp_parseopt+0xe0>)
 800d528:	f004 fe54 	bl	80121d4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d52c:	4b31      	ldr	r3, [pc, #196]	; (800d5f4 <tcp_parseopt+0xe4>)
 800d52e:	881b      	ldrh	r3, [r3, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d055      	beq.n	800d5e0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d534:	4b30      	ldr	r3, [pc, #192]	; (800d5f8 <tcp_parseopt+0xe8>)
 800d536:	2200      	movs	r2, #0
 800d538:	801a      	strh	r2, [r3, #0]
 800d53a:	e045      	b.n	800d5c8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d53c:	f7ff ffb2 	bl	800d4a4 <tcp_get_next_optbyte>
 800d540:	4603      	mov	r3, r0
 800d542:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d544:	7bfb      	ldrb	r3, [r7, #15]
 800d546:	2b02      	cmp	r3, #2
 800d548:	d006      	beq.n	800d558 <tcp_parseopt+0x48>
 800d54a:	2b02      	cmp	r3, #2
 800d54c:	dc2b      	bgt.n	800d5a6 <tcp_parseopt+0x96>
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d041      	beq.n	800d5d6 <tcp_parseopt+0xc6>
 800d552:	2b01      	cmp	r3, #1
 800d554:	d127      	bne.n	800d5a6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d556:	e037      	b.n	800d5c8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d558:	f7ff ffa4 	bl	800d4a4 <tcp_get_next_optbyte>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b04      	cmp	r3, #4
 800d560:	d13b      	bne.n	800d5da <tcp_parseopt+0xca>
 800d562:	4b25      	ldr	r3, [pc, #148]	; (800d5f8 <tcp_parseopt+0xe8>)
 800d564:	881b      	ldrh	r3, [r3, #0]
 800d566:	3301      	adds	r3, #1
 800d568:	4a22      	ldr	r2, [pc, #136]	; (800d5f4 <tcp_parseopt+0xe4>)
 800d56a:	8812      	ldrh	r2, [r2, #0]
 800d56c:	4293      	cmp	r3, r2
 800d56e:	da34      	bge.n	800d5da <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d570:	f7ff ff98 	bl	800d4a4 <tcp_get_next_optbyte>
 800d574:	4603      	mov	r3, r0
 800d576:	b29b      	uxth	r3, r3
 800d578:	021b      	lsls	r3, r3, #8
 800d57a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d57c:	f7ff ff92 	bl	800d4a4 <tcp_get_next_optbyte>
 800d580:	4603      	mov	r3, r0
 800d582:	b29a      	uxth	r2, r3
 800d584:	89bb      	ldrh	r3, [r7, #12]
 800d586:	4313      	orrs	r3, r2
 800d588:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d58a:	89bb      	ldrh	r3, [r7, #12]
 800d58c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d590:	d804      	bhi.n	800d59c <tcp_parseopt+0x8c>
 800d592:	89bb      	ldrh	r3, [r7, #12]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d001      	beq.n	800d59c <tcp_parseopt+0x8c>
 800d598:	89ba      	ldrh	r2, [r7, #12]
 800d59a:	e001      	b.n	800d5a0 <tcp_parseopt+0x90>
 800d59c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d5a4:	e010      	b.n	800d5c8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d5a6:	f7ff ff7d 	bl	800d4a4 <tcp_get_next_optbyte>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d5ae:	7afb      	ldrb	r3, [r7, #11]
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d914      	bls.n	800d5de <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d5b4:	7afb      	ldrb	r3, [r7, #11]
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	4b0f      	ldr	r3, [pc, #60]	; (800d5f8 <tcp_parseopt+0xe8>)
 800d5ba:	881b      	ldrh	r3, [r3, #0]
 800d5bc:	4413      	add	r3, r2
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	3b02      	subs	r3, #2
 800d5c2:	b29a      	uxth	r2, r3
 800d5c4:	4b0c      	ldr	r3, [pc, #48]	; (800d5f8 <tcp_parseopt+0xe8>)
 800d5c6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d5c8:	4b0b      	ldr	r3, [pc, #44]	; (800d5f8 <tcp_parseopt+0xe8>)
 800d5ca:	881a      	ldrh	r2, [r3, #0]
 800d5cc:	4b09      	ldr	r3, [pc, #36]	; (800d5f4 <tcp_parseopt+0xe4>)
 800d5ce:	881b      	ldrh	r3, [r3, #0]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d3b3      	bcc.n	800d53c <tcp_parseopt+0x2c>
 800d5d4:	e004      	b.n	800d5e0 <tcp_parseopt+0xd0>
          return;
 800d5d6:	bf00      	nop
 800d5d8:	e002      	b.n	800d5e0 <tcp_parseopt+0xd0>
            return;
 800d5da:	bf00      	nop
 800d5dc:	e000      	b.n	800d5e0 <tcp_parseopt+0xd0>
            return;
 800d5de:	bf00      	nop
      }
    }
  }
}
 800d5e0:	3710      	adds	r7, #16
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	08015968 	.word	0x08015968
 800d5ec:	08015dcc 	.word	0x08015dcc
 800d5f0:	080159b4 	.word	0x080159b4
 800d5f4:	2000aaa4 	.word	0x2000aaa4
 800d5f8:	2000aaac 	.word	0x2000aaac

0800d5fc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d600:	4b05      	ldr	r3, [pc, #20]	; (800d618 <tcp_trigger_input_pcb_close+0x1c>)
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	f043 0310 	orr.w	r3, r3, #16
 800d608:	b2da      	uxtb	r2, r3
 800d60a:	4b03      	ldr	r3, [pc, #12]	; (800d618 <tcp_trigger_input_pcb_close+0x1c>)
 800d60c:	701a      	strb	r2, [r3, #0]
}
 800d60e:	bf00      	nop
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr
 800d618:	2000aabd 	.word	0x2000aabd

0800d61c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00a      	beq.n	800d644 <tcp_route+0x28>
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	7a1b      	ldrb	r3, [r3, #8]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d006      	beq.n	800d644 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	7a1b      	ldrb	r3, [r3, #8]
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7fb fae6 	bl	8008c0c <netif_get_by_index>
 800d640:	4603      	mov	r3, r0
 800d642:	e003      	b.n	800d64c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f003 fa55 	bl	8010af4 <ip4_route>
 800d64a:	4603      	mov	r3, r0
  }
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3710      	adds	r7, #16
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d654:	b590      	push	{r4, r7, lr}
 800d656:	b087      	sub	sp, #28
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	603b      	str	r3, [r7, #0]
 800d660:	4613      	mov	r3, r2
 800d662:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d105      	bne.n	800d676 <tcp_create_segment+0x22>
 800d66a:	4b44      	ldr	r3, [pc, #272]	; (800d77c <tcp_create_segment+0x128>)
 800d66c:	22a3      	movs	r2, #163	; 0xa3
 800d66e:	4944      	ldr	r1, [pc, #272]	; (800d780 <tcp_create_segment+0x12c>)
 800d670:	4844      	ldr	r0, [pc, #272]	; (800d784 <tcp_create_segment+0x130>)
 800d672:	f004 fdaf 	bl	80121d4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d105      	bne.n	800d688 <tcp_create_segment+0x34>
 800d67c:	4b3f      	ldr	r3, [pc, #252]	; (800d77c <tcp_create_segment+0x128>)
 800d67e:	22a4      	movs	r2, #164	; 0xa4
 800d680:	4941      	ldr	r1, [pc, #260]	; (800d788 <tcp_create_segment+0x134>)
 800d682:	4840      	ldr	r0, [pc, #256]	; (800d784 <tcp_create_segment+0x130>)
 800d684:	f004 fda6 	bl	80121d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d688:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	f003 0304 	and.w	r3, r3, #4
 800d694:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d696:	2003      	movs	r0, #3
 800d698:	f7fa ff32 	bl	8008500 <memp_malloc>
 800d69c:	6138      	str	r0, [r7, #16]
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d104      	bne.n	800d6ae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d6a4:	68b8      	ldr	r0, [r7, #8]
 800d6a6:	f7fb fe11 	bl	80092cc <pbuf_free>
    return NULL;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	e061      	b.n	800d772 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d6b4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	68ba      	ldr	r2, [r7, #8]
 800d6c0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	891a      	ldrh	r2, [r3, #8]
 800d6c6:	7dfb      	ldrb	r3, [r7, #23]
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d205      	bcs.n	800d6da <tcp_create_segment+0x86>
 800d6ce:	4b2b      	ldr	r3, [pc, #172]	; (800d77c <tcp_create_segment+0x128>)
 800d6d0:	22b0      	movs	r2, #176	; 0xb0
 800d6d2:	492e      	ldr	r1, [pc, #184]	; (800d78c <tcp_create_segment+0x138>)
 800d6d4:	482b      	ldr	r0, [pc, #172]	; (800d784 <tcp_create_segment+0x130>)
 800d6d6:	f004 fd7d 	bl	80121d4 <iprintf>
  seg->len = p->tot_len - optlen;
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	891a      	ldrh	r2, [r3, #8]
 800d6de:	7dfb      	ldrb	r3, [r7, #23]
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	1ad3      	subs	r3, r2, r3
 800d6e4:	b29a      	uxth	r2, r3
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d6ea:	2114      	movs	r1, #20
 800d6ec:	68b8      	ldr	r0, [r7, #8]
 800d6ee:	f7fb fd57 	bl	80091a0 <pbuf_add_header>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d004      	beq.n	800d702 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d6f8:	6938      	ldr	r0, [r7, #16]
 800d6fa:	f7fd f8ce 	bl	800a89a <tcp_seg_free>
    return NULL;
 800d6fe:	2300      	movs	r3, #0
 800d700:	e037      	b.n	800d772 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	685a      	ldr	r2, [r3, #4]
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	8ada      	ldrh	r2, [r3, #22]
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	68dc      	ldr	r4, [r3, #12]
 800d714:	4610      	mov	r0, r2
 800d716:	f7fa fa7b 	bl	8007c10 <lwip_htons>
 800d71a:	4603      	mov	r3, r0
 800d71c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	8b1a      	ldrh	r2, [r3, #24]
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	68dc      	ldr	r4, [r3, #12]
 800d726:	4610      	mov	r0, r2
 800d728:	f7fa fa72 	bl	8007c10 <lwip_htons>
 800d72c:	4603      	mov	r3, r0
 800d72e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	68dc      	ldr	r4, [r3, #12]
 800d734:	6838      	ldr	r0, [r7, #0]
 800d736:	f7fa fa80 	bl	8007c3a <lwip_htonl>
 800d73a:	4603      	mov	r3, r0
 800d73c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d73e:	7dfb      	ldrb	r3, [r7, #23]
 800d740:	089b      	lsrs	r3, r3, #2
 800d742:	b2db      	uxtb	r3, r3
 800d744:	b29b      	uxth	r3, r3
 800d746:	3305      	adds	r3, #5
 800d748:	b29b      	uxth	r3, r3
 800d74a:	031b      	lsls	r3, r3, #12
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	79fb      	ldrb	r3, [r7, #7]
 800d750:	b29b      	uxth	r3, r3
 800d752:	4313      	orrs	r3, r2
 800d754:	b29a      	uxth	r2, r3
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	68dc      	ldr	r4, [r3, #12]
 800d75a:	4610      	mov	r0, r2
 800d75c:	f7fa fa58 	bl	8007c10 <lwip_htons>
 800d760:	4603      	mov	r3, r0
 800d762:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	2200      	movs	r2, #0
 800d76a:	749a      	strb	r2, [r3, #18]
 800d76c:	2200      	movs	r2, #0
 800d76e:	74da      	strb	r2, [r3, #19]
  return seg;
 800d770:	693b      	ldr	r3, [r7, #16]
}
 800d772:	4618      	mov	r0, r3
 800d774:	371c      	adds	r7, #28
 800d776:	46bd      	mov	sp, r7
 800d778:	bd90      	pop	{r4, r7, pc}
 800d77a:	bf00      	nop
 800d77c:	08015de8 	.word	0x08015de8
 800d780:	08015e1c 	.word	0x08015e1c
 800d784:	08015e3c 	.word	0x08015e3c
 800d788:	08015e64 	.word	0x08015e64
 800d78c:	08015e88 	.word	0x08015e88

0800d790 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d790:	b590      	push	{r4, r7, lr}
 800d792:	b08b      	sub	sp, #44	; 0x2c
 800d794:	af02      	add	r7, sp, #8
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	460b      	mov	r3, r1
 800d79a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d79c:	2300      	movs	r3, #0
 800d79e:	61fb      	str	r3, [r7, #28]
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d106      	bne.n	800d7bc <tcp_split_unsent_seg+0x2c>
 800d7ae:	4b95      	ldr	r3, [pc, #596]	; (800da04 <tcp_split_unsent_seg+0x274>)
 800d7b0:	f240 324b 	movw	r2, #843	; 0x34b
 800d7b4:	4994      	ldr	r1, [pc, #592]	; (800da08 <tcp_split_unsent_seg+0x278>)
 800d7b6:	4895      	ldr	r0, [pc, #596]	; (800da0c <tcp_split_unsent_seg+0x27c>)
 800d7b8:	f004 fd0c 	bl	80121d4 <iprintf>

  useg = pcb->unsent;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7c0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d102      	bne.n	800d7ce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7cc:	e116      	b.n	800d9fc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d7ce:	887b      	ldrh	r3, [r7, #2]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d109      	bne.n	800d7e8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d7d4:	4b8b      	ldr	r3, [pc, #556]	; (800da04 <tcp_split_unsent_seg+0x274>)
 800d7d6:	f240 3253 	movw	r2, #851	; 0x353
 800d7da:	498d      	ldr	r1, [pc, #564]	; (800da10 <tcp_split_unsent_seg+0x280>)
 800d7dc:	488b      	ldr	r0, [pc, #556]	; (800da0c <tcp_split_unsent_seg+0x27c>)
 800d7de:	f004 fcf9 	bl	80121d4 <iprintf>
    return ERR_VAL;
 800d7e2:	f06f 0305 	mvn.w	r3, #5
 800d7e6:	e109      	b.n	800d9fc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	891b      	ldrh	r3, [r3, #8]
 800d7ec:	887a      	ldrh	r2, [r7, #2]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d301      	bcc.n	800d7f6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	e102      	b.n	800d9fc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7fa:	887a      	ldrh	r2, [r7, #2]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d906      	bls.n	800d80e <tcp_split_unsent_seg+0x7e>
 800d800:	4b80      	ldr	r3, [pc, #512]	; (800da04 <tcp_split_unsent_seg+0x274>)
 800d802:	f240 325b 	movw	r2, #859	; 0x35b
 800d806:	4983      	ldr	r1, [pc, #524]	; (800da14 <tcp_split_unsent_seg+0x284>)
 800d808:	4880      	ldr	r0, [pc, #512]	; (800da0c <tcp_split_unsent_seg+0x27c>)
 800d80a:	f004 fce3 	bl	80121d4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	891b      	ldrh	r3, [r3, #8]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d106      	bne.n	800d824 <tcp_split_unsent_seg+0x94>
 800d816:	4b7b      	ldr	r3, [pc, #492]	; (800da04 <tcp_split_unsent_seg+0x274>)
 800d818:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d81c:	497e      	ldr	r1, [pc, #504]	; (800da18 <tcp_split_unsent_seg+0x288>)
 800d81e:	487b      	ldr	r0, [pc, #492]	; (800da0c <tcp_split_unsent_seg+0x27c>)
 800d820:	f004 fcd8 	bl	80121d4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	7a9b      	ldrb	r3, [r3, #10]
 800d828:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d82a:	7bfb      	ldrb	r3, [r7, #15]
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	f003 0304 	and.w	r3, r3, #4
 800d834:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	891a      	ldrh	r2, [r3, #8]
 800d83a:	887b      	ldrh	r3, [r7, #2]
 800d83c:	1ad3      	subs	r3, r2, r3
 800d83e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d840:	7bbb      	ldrb	r3, [r7, #14]
 800d842:	b29a      	uxth	r2, r3
 800d844:	89bb      	ldrh	r3, [r7, #12]
 800d846:	4413      	add	r3, r2
 800d848:	b29b      	uxth	r3, r3
 800d84a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d84e:	4619      	mov	r1, r3
 800d850:	2036      	movs	r0, #54	; 0x36
 800d852:	f7fb fa57 	bl	8008d04 <pbuf_alloc>
 800d856:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	f000 80b7 	beq.w	800d9ce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	891a      	ldrh	r2, [r3, #8]
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	891b      	ldrh	r3, [r3, #8]
 800d86a:	1ad3      	subs	r3, r2, r3
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	887b      	ldrh	r3, [r7, #2]
 800d870:	4413      	add	r3, r2
 800d872:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	6858      	ldr	r0, [r3, #4]
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	685a      	ldr	r2, [r3, #4]
 800d87c:	7bbb      	ldrb	r3, [r7, #14]
 800d87e:	18d1      	adds	r1, r2, r3
 800d880:	897b      	ldrh	r3, [r7, #10]
 800d882:	89ba      	ldrh	r2, [r7, #12]
 800d884:	f7fb ff1c 	bl	80096c0 <pbuf_copy_partial>
 800d888:	4603      	mov	r3, r0
 800d88a:	461a      	mov	r2, r3
 800d88c:	89bb      	ldrh	r3, [r7, #12]
 800d88e:	4293      	cmp	r3, r2
 800d890:	f040 809f 	bne.w	800d9d2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	899b      	ldrh	r3, [r3, #12]
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7fa f9b7 	bl	8007c10 <lwip_htons>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8aa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d8b0:	7efb      	ldrb	r3, [r7, #27]
 800d8b2:	f003 0308 	and.w	r3, r3, #8
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d007      	beq.n	800d8ca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d8ba:	7efb      	ldrb	r3, [r7, #27]
 800d8bc:	f023 0308 	bic.w	r3, r3, #8
 800d8c0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d8c2:	7ebb      	ldrb	r3, [r7, #26]
 800d8c4:	f043 0308 	orr.w	r3, r3, #8
 800d8c8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d8ca:	7efb      	ldrb	r3, [r7, #27]
 800d8cc:	f003 0301 	and.w	r3, r3, #1
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d007      	beq.n	800d8e4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d8d4:	7efb      	ldrb	r3, [r7, #27]
 800d8d6:	f023 0301 	bic.w	r3, r3, #1
 800d8da:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d8dc:	7ebb      	ldrb	r3, [r7, #26]
 800d8de:	f043 0301 	orr.w	r3, r3, #1
 800d8e2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	68db      	ldr	r3, [r3, #12]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7fa f9a5 	bl	8007c3a <lwip_htonl>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	887b      	ldrh	r3, [r7, #2]
 800d8f4:	18d1      	adds	r1, r2, r3
 800d8f6:	7eba      	ldrb	r2, [r7, #26]
 800d8f8:	7bfb      	ldrb	r3, [r7, #15]
 800d8fa:	9300      	str	r3, [sp, #0]
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	6939      	ldr	r1, [r7, #16]
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7ff fea7 	bl	800d654 <tcp_create_segment>
 800d906:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d063      	beq.n	800d9d6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	4618      	mov	r0, r3
 800d914:	f7fb fd62 	bl	80093dc <pbuf_clen>
 800d918:	4603      	mov	r3, r0
 800d91a:	461a      	mov	r2, r3
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d922:	1a9b      	subs	r3, r3, r2
 800d924:	b29a      	uxth	r2, r3
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	6858      	ldr	r0, [r3, #4]
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	891a      	ldrh	r2, [r3, #8]
 800d936:	89bb      	ldrh	r3, [r7, #12]
 800d938:	1ad3      	subs	r3, r2, r3
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	4619      	mov	r1, r3
 800d93e:	f7fb fb3f 	bl	8008fc0 <pbuf_realloc>
  useg->len -= remainder;
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	891a      	ldrh	r2, [r3, #8]
 800d946:	89bb      	ldrh	r3, [r7, #12]
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	b29a      	uxth	r2, r3
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	899b      	ldrh	r3, [r3, #12]
 800d956:	b29c      	uxth	r4, r3
 800d958:	7efb      	ldrb	r3, [r7, #27]
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7fa f957 	bl	8007c10 <lwip_htons>
 800d962:	4603      	mov	r3, r0
 800d964:	461a      	mov	r2, r3
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	68db      	ldr	r3, [r3, #12]
 800d96a:	4322      	orrs	r2, r4
 800d96c:	b292      	uxth	r2, r2
 800d96e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	4618      	mov	r0, r3
 800d976:	f7fb fd31 	bl	80093dc <pbuf_clen>
 800d97a:	4603      	mov	r3, r0
 800d97c:	461a      	mov	r2, r3
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d984:	4413      	add	r3, r2
 800d986:	b29a      	uxth	r2, r3
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	4618      	mov	r0, r3
 800d994:	f7fb fd22 	bl	80093dc <pbuf_clen>
 800d998:	4603      	mov	r3, r0
 800d99a:	461a      	mov	r2, r3
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d9a2:	4413      	add	r3, r2
 800d9a4:	b29a      	uxth	r2, r3
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	681a      	ldr	r2, [r3, #0]
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	69fa      	ldr	r2, [r7, #28]
 800d9b8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d9ba:	69fb      	ldr	r3, [r7, #28]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d103      	bne.n	800d9ca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	e016      	b.n	800d9fc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d9ce:	bf00      	nop
 800d9d0:	e002      	b.n	800d9d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d9d2:	bf00      	nop
 800d9d4:	e000      	b.n	800d9d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d9d6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d006      	beq.n	800d9ec <tcp_split_unsent_seg+0x25c>
 800d9de:	4b09      	ldr	r3, [pc, #36]	; (800da04 <tcp_split_unsent_seg+0x274>)
 800d9e0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d9e4:	490d      	ldr	r1, [pc, #52]	; (800da1c <tcp_split_unsent_seg+0x28c>)
 800d9e6:	4809      	ldr	r0, [pc, #36]	; (800da0c <tcp_split_unsent_seg+0x27c>)
 800d9e8:	f004 fbf4 	bl	80121d4 <iprintf>
  if (p != NULL) {
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d002      	beq.n	800d9f8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d9f2:	6938      	ldr	r0, [r7, #16]
 800d9f4:	f7fb fc6a 	bl	80092cc <pbuf_free>
  }

  return ERR_MEM;
 800d9f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3724      	adds	r7, #36	; 0x24
 800da00:	46bd      	mov	sp, r7
 800da02:	bd90      	pop	{r4, r7, pc}
 800da04:	08015de8 	.word	0x08015de8
 800da08:	0801617c 	.word	0x0801617c
 800da0c:	08015e3c 	.word	0x08015e3c
 800da10:	080161a0 	.word	0x080161a0
 800da14:	080161c4 	.word	0x080161c4
 800da18:	080161d4 	.word	0x080161d4
 800da1c:	080161e4 	.word	0x080161e4

0800da20 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800da20:	b590      	push	{r4, r7, lr}
 800da22:	b085      	sub	sp, #20
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d106      	bne.n	800da3c <tcp_send_fin+0x1c>
 800da2e:	4b21      	ldr	r3, [pc, #132]	; (800dab4 <tcp_send_fin+0x94>)
 800da30:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800da34:	4920      	ldr	r1, [pc, #128]	; (800dab8 <tcp_send_fin+0x98>)
 800da36:	4821      	ldr	r0, [pc, #132]	; (800dabc <tcp_send_fin+0x9c>)
 800da38:	f004 fbcc 	bl	80121d4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da40:	2b00      	cmp	r3, #0
 800da42:	d02e      	beq.n	800daa2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da48:	60fb      	str	r3, [r7, #12]
 800da4a:	e002      	b.n	800da52 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d1f8      	bne.n	800da4c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	899b      	ldrh	r3, [r3, #12]
 800da60:	b29b      	uxth	r3, r3
 800da62:	4618      	mov	r0, r3
 800da64:	f7fa f8d4 	bl	8007c10 <lwip_htons>
 800da68:	4603      	mov	r3, r0
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	f003 0307 	and.w	r3, r3, #7
 800da70:	2b00      	cmp	r3, #0
 800da72:	d116      	bne.n	800daa2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	899b      	ldrh	r3, [r3, #12]
 800da7a:	b29c      	uxth	r4, r3
 800da7c:	2001      	movs	r0, #1
 800da7e:	f7fa f8c7 	bl	8007c10 <lwip_htons>
 800da82:	4603      	mov	r3, r0
 800da84:	461a      	mov	r2, r3
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	68db      	ldr	r3, [r3, #12]
 800da8a:	4322      	orrs	r2, r4
 800da8c:	b292      	uxth	r2, r2
 800da8e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	8b5b      	ldrh	r3, [r3, #26]
 800da94:	f043 0320 	orr.w	r3, r3, #32
 800da98:	b29a      	uxth	r2, r3
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800da9e:	2300      	movs	r3, #0
 800daa0:	e004      	b.n	800daac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800daa2:	2101      	movs	r1, #1
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f000 f80b 	bl	800dac0 <tcp_enqueue_flags>
 800daaa:	4603      	mov	r3, r0
}
 800daac:	4618      	mov	r0, r3
 800daae:	3714      	adds	r7, #20
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd90      	pop	{r4, r7, pc}
 800dab4:	08015de8 	.word	0x08015de8
 800dab8:	080161f0 	.word	0x080161f0
 800dabc:	08015e3c 	.word	0x08015e3c

0800dac0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b08a      	sub	sp, #40	; 0x28
 800dac4:	af02      	add	r7, sp, #8
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	460b      	mov	r3, r1
 800daca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800dacc:	2300      	movs	r3, #0
 800dace:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800dad0:	2300      	movs	r3, #0
 800dad2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dad4:	78fb      	ldrb	r3, [r7, #3]
 800dad6:	f003 0303 	and.w	r3, r3, #3
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d106      	bne.n	800daec <tcp_enqueue_flags+0x2c>
 800dade:	4b67      	ldr	r3, [pc, #412]	; (800dc7c <tcp_enqueue_flags+0x1bc>)
 800dae0:	f240 4211 	movw	r2, #1041	; 0x411
 800dae4:	4966      	ldr	r1, [pc, #408]	; (800dc80 <tcp_enqueue_flags+0x1c0>)
 800dae6:	4867      	ldr	r0, [pc, #412]	; (800dc84 <tcp_enqueue_flags+0x1c4>)
 800dae8:	f004 fb74 	bl	80121d4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d106      	bne.n	800db00 <tcp_enqueue_flags+0x40>
 800daf2:	4b62      	ldr	r3, [pc, #392]	; (800dc7c <tcp_enqueue_flags+0x1bc>)
 800daf4:	f240 4213 	movw	r2, #1043	; 0x413
 800daf8:	4963      	ldr	r1, [pc, #396]	; (800dc88 <tcp_enqueue_flags+0x1c8>)
 800dafa:	4862      	ldr	r0, [pc, #392]	; (800dc84 <tcp_enqueue_flags+0x1c4>)
 800dafc:	f004 fb6a 	bl	80121d4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800db00:	78fb      	ldrb	r3, [r7, #3]
 800db02:	f003 0302 	and.w	r3, r3, #2
 800db06:	2b00      	cmp	r3, #0
 800db08:	d001      	beq.n	800db0e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800db0a:	2301      	movs	r3, #1
 800db0c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800db0e:	7ffb      	ldrb	r3, [r7, #31]
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	b2db      	uxtb	r3, r3
 800db14:	f003 0304 	and.w	r3, r3, #4
 800db18:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800db1a:	7dfb      	ldrb	r3, [r7, #23]
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800db22:	4619      	mov	r1, r3
 800db24:	2036      	movs	r0, #54	; 0x36
 800db26:	f7fb f8ed 	bl	8008d04 <pbuf_alloc>
 800db2a:	6138      	str	r0, [r7, #16]
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d109      	bne.n	800db46 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	8b5b      	ldrh	r3, [r3, #26]
 800db36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db3a:	b29a      	uxth	r2, r3
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800db40:	f04f 33ff 	mov.w	r3, #4294967295
 800db44:	e095      	b.n	800dc72 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	895a      	ldrh	r2, [r3, #10]
 800db4a:	7dfb      	ldrb	r3, [r7, #23]
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	429a      	cmp	r2, r3
 800db50:	d206      	bcs.n	800db60 <tcp_enqueue_flags+0xa0>
 800db52:	4b4a      	ldr	r3, [pc, #296]	; (800dc7c <tcp_enqueue_flags+0x1bc>)
 800db54:	f240 4239 	movw	r2, #1081	; 0x439
 800db58:	494c      	ldr	r1, [pc, #304]	; (800dc8c <tcp_enqueue_flags+0x1cc>)
 800db5a:	484a      	ldr	r0, [pc, #296]	; (800dc84 <tcp_enqueue_flags+0x1c4>)
 800db5c:	f004 fb3a 	bl	80121d4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800db64:	78fa      	ldrb	r2, [r7, #3]
 800db66:	7ffb      	ldrb	r3, [r7, #31]
 800db68:	9300      	str	r3, [sp, #0]
 800db6a:	460b      	mov	r3, r1
 800db6c:	6939      	ldr	r1, [r7, #16]
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7ff fd70 	bl	800d654 <tcp_create_segment>
 800db74:	60f8      	str	r0, [r7, #12]
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d109      	bne.n	800db90 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	8b5b      	ldrh	r3, [r3, #26]
 800db80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db84:	b29a      	uxth	r2, r3
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800db8a:	f04f 33ff 	mov.w	r3, #4294967295
 800db8e:	e070      	b.n	800dc72 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	68db      	ldr	r3, [r3, #12]
 800db94:	f003 0303 	and.w	r3, r3, #3
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d006      	beq.n	800dbaa <tcp_enqueue_flags+0xea>
 800db9c:	4b37      	ldr	r3, [pc, #220]	; (800dc7c <tcp_enqueue_flags+0x1bc>)
 800db9e:	f240 4242 	movw	r2, #1090	; 0x442
 800dba2:	493b      	ldr	r1, [pc, #236]	; (800dc90 <tcp_enqueue_flags+0x1d0>)
 800dba4:	4837      	ldr	r0, [pc, #220]	; (800dc84 <tcp_enqueue_flags+0x1c4>)
 800dba6:	f004 fb15 	bl	80121d4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	891b      	ldrh	r3, [r3, #8]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d006      	beq.n	800dbc0 <tcp_enqueue_flags+0x100>
 800dbb2:	4b32      	ldr	r3, [pc, #200]	; (800dc7c <tcp_enqueue_flags+0x1bc>)
 800dbb4:	f240 4243 	movw	r2, #1091	; 0x443
 800dbb8:	4936      	ldr	r1, [pc, #216]	; (800dc94 <tcp_enqueue_flags+0x1d4>)
 800dbba:	4832      	ldr	r0, [pc, #200]	; (800dc84 <tcp_enqueue_flags+0x1c4>)
 800dbbc:	f004 fb0a 	bl	80121d4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d103      	bne.n	800dbd0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	66da      	str	r2, [r3, #108]	; 0x6c
 800dbce:	e00d      	b.n	800dbec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbd4:	61bb      	str	r3, [r7, #24]
 800dbd6:	e002      	b.n	800dbde <tcp_enqueue_flags+0x11e>
 800dbd8:	69bb      	ldr	r3, [r7, #24]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	61bb      	str	r3, [r7, #24]
 800dbde:	69bb      	ldr	r3, [r7, #24]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d1f8      	bne.n	800dbd8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800dbe6:	69bb      	ldr	r3, [r7, #24]
 800dbe8:	68fa      	ldr	r2, [r7, #12]
 800dbea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800dbf4:	78fb      	ldrb	r3, [r7, #3]
 800dbf6:	f003 0302 	and.w	r3, r3, #2
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d104      	bne.n	800dc08 <tcp_enqueue_flags+0x148>
 800dbfe:	78fb      	ldrb	r3, [r7, #3]
 800dc00:	f003 0301 	and.w	r3, r3, #1
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d004      	beq.n	800dc12 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc0c:	1c5a      	adds	r2, r3, #1
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dc12:	78fb      	ldrb	r3, [r7, #3]
 800dc14:	f003 0301 	and.w	r3, r3, #1
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d006      	beq.n	800dc2a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	8b5b      	ldrh	r3, [r3, #26]
 800dc20:	f043 0320 	orr.w	r3, r3, #32
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fb fbd4 	bl	80093dc <pbuf_clen>
 800dc34:	4603      	mov	r3, r0
 800dc36:	461a      	mov	r2, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc3e:	4413      	add	r3, r2
 800dc40:	b29a      	uxth	r2, r3
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00e      	beq.n	800dc70 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d10a      	bne.n	800dc70 <tcp_enqueue_flags+0x1b0>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d106      	bne.n	800dc70 <tcp_enqueue_flags+0x1b0>
 800dc62:	4b06      	ldr	r3, [pc, #24]	; (800dc7c <tcp_enqueue_flags+0x1bc>)
 800dc64:	f240 4265 	movw	r2, #1125	; 0x465
 800dc68:	490b      	ldr	r1, [pc, #44]	; (800dc98 <tcp_enqueue_flags+0x1d8>)
 800dc6a:	4806      	ldr	r0, [pc, #24]	; (800dc84 <tcp_enqueue_flags+0x1c4>)
 800dc6c:	f004 fab2 	bl	80121d4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800dc70:	2300      	movs	r3, #0
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3720      	adds	r7, #32
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	08015de8 	.word	0x08015de8
 800dc80:	0801620c 	.word	0x0801620c
 800dc84:	08015e3c 	.word	0x08015e3c
 800dc88:	08016264 	.word	0x08016264
 800dc8c:	08016284 	.word	0x08016284
 800dc90:	080162c0 	.word	0x080162c0
 800dc94:	080162d8 	.word	0x080162d8
 800dc98:	08016304 	.word	0x08016304

0800dc9c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800dc9c:	b5b0      	push	{r4, r5, r7, lr}
 800dc9e:	b08a      	sub	sp, #40	; 0x28
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d106      	bne.n	800dcb8 <tcp_output+0x1c>
 800dcaa:	4b8a      	ldr	r3, [pc, #552]	; (800ded4 <tcp_output+0x238>)
 800dcac:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800dcb0:	4989      	ldr	r1, [pc, #548]	; (800ded8 <tcp_output+0x23c>)
 800dcb2:	488a      	ldr	r0, [pc, #552]	; (800dedc <tcp_output+0x240>)
 800dcb4:	f004 fa8e 	bl	80121d4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	7d1b      	ldrb	r3, [r3, #20]
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d106      	bne.n	800dcce <tcp_output+0x32>
 800dcc0:	4b84      	ldr	r3, [pc, #528]	; (800ded4 <tcp_output+0x238>)
 800dcc2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800dcc6:	4986      	ldr	r1, [pc, #536]	; (800dee0 <tcp_output+0x244>)
 800dcc8:	4884      	ldr	r0, [pc, #528]	; (800dedc <tcp_output+0x240>)
 800dcca:	f004 fa83 	bl	80121d4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800dcce:	4b85      	ldr	r3, [pc, #532]	; (800dee4 <tcp_output+0x248>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d101      	bne.n	800dcdc <tcp_output+0x40>
    return ERR_OK;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	e1ce      	b.n	800e07a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dce8:	4293      	cmp	r3, r2
 800dcea:	bf28      	it	cs
 800dcec:	4613      	movcs	r3, r2
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcf6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800dcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d10b      	bne.n	800dd16 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	8b5b      	ldrh	r3, [r3, #26]
 800dd02:	f003 0302 	and.w	r3, r3, #2
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f000 81aa 	beq.w	800e060 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 fdcb 	bl	800e8a8 <tcp_send_empty_ack>
 800dd12:	4603      	mov	r3, r0
 800dd14:	e1b1      	b.n	800e07a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800dd16:	6879      	ldr	r1, [r7, #4]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	3304      	adds	r3, #4
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7ff fc7c 	bl	800d61c <tcp_route>
 800dd24:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d102      	bne.n	800dd32 <tcp_output+0x96>
    return ERR_RTE;
 800dd2c:	f06f 0303 	mvn.w	r3, #3
 800dd30:	e1a3      	b.n	800e07a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d003      	beq.n	800dd40 <tcp_output+0xa4>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d111      	bne.n	800dd64 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d002      	beq.n	800dd4c <tcp_output+0xb0>
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	3304      	adds	r3, #4
 800dd4a:	e000      	b.n	800dd4e <tcp_output+0xb2>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d102      	bne.n	800dd5c <tcp_output+0xc0>
      return ERR_RTE;
 800dd56:	f06f 0303 	mvn.w	r3, #3
 800dd5a:	e18e      	b.n	800e07a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800dd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd66:	68db      	ldr	r3, [r3, #12]
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7f9 ff65 	bl	8007c3a <lwip_htonl>
 800dd70:	4602      	mov	r2, r0
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd76:	1ad3      	subs	r3, r2, r3
 800dd78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd7a:	8912      	ldrh	r2, [r2, #8]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	69ba      	ldr	r2, [r7, #24]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d227      	bcs.n	800ddd4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	69bb      	ldr	r3, [r7, #24]
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d114      	bne.n	800ddbc <tcp_output+0x120>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d110      	bne.n	800ddbc <tcp_output+0x120>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d10b      	bne.n	800ddbc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2200      	movs	r2, #0
 800dda8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2201      	movs	r2, #1
 800ddb0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	8b5b      	ldrh	r3, [r3, #26]
 800ddc0:	f003 0302 	and.w	r3, r3, #2
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	f000 814d 	beq.w	800e064 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 fd6c 	bl	800e8a8 <tcp_send_empty_ack>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	e152      	b.n	800e07a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dde0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800dde2:	6a3b      	ldr	r3, [r7, #32]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	f000 811c 	beq.w	800e022 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ddea:	e002      	b.n	800ddf2 <tcp_output+0x156>
 800ddec:	6a3b      	ldr	r3, [r7, #32]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	623b      	str	r3, [r7, #32]
 800ddf2:	6a3b      	ldr	r3, [r7, #32]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d1f8      	bne.n	800ddec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ddfa:	e112      	b.n	800e022 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ddfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	899b      	ldrh	r3, [r3, #12]
 800de02:	b29b      	uxth	r3, r3
 800de04:	4618      	mov	r0, r3
 800de06:	f7f9 ff03 	bl	8007c10 <lwip_htons>
 800de0a:	4603      	mov	r3, r0
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	f003 0304 	and.w	r3, r3, #4
 800de12:	2b00      	cmp	r3, #0
 800de14:	d006      	beq.n	800de24 <tcp_output+0x188>
 800de16:	4b2f      	ldr	r3, [pc, #188]	; (800ded4 <tcp_output+0x238>)
 800de18:	f240 5236 	movw	r2, #1334	; 0x536
 800de1c:	4932      	ldr	r1, [pc, #200]	; (800dee8 <tcp_output+0x24c>)
 800de1e:	482f      	ldr	r0, [pc, #188]	; (800dedc <tcp_output+0x240>)
 800de20:	f004 f9d8 	bl	80121d4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d01f      	beq.n	800de6c <tcp_output+0x1d0>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	8b5b      	ldrh	r3, [r3, #26]
 800de30:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800de34:	2b00      	cmp	r3, #0
 800de36:	d119      	bne.n	800de6c <tcp_output+0x1d0>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d00b      	beq.n	800de58 <tcp_output+0x1bc>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d110      	bne.n	800de6c <tcp_output+0x1d0>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de4e:	891a      	ldrh	r2, [r3, #8]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de54:	429a      	cmp	r2, r3
 800de56:	d209      	bcs.n	800de6c <tcp_output+0x1d0>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d004      	beq.n	800de6c <tcp_output+0x1d0>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800de68:	2b08      	cmp	r3, #8
 800de6a:	d901      	bls.n	800de70 <tcp_output+0x1d4>
 800de6c:	2301      	movs	r3, #1
 800de6e:	e000      	b.n	800de72 <tcp_output+0x1d6>
 800de70:	2300      	movs	r3, #0
 800de72:	2b00      	cmp	r3, #0
 800de74:	d106      	bne.n	800de84 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	8b5b      	ldrh	r3, [r3, #26]
 800de7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f000 80e4 	beq.w	800e04c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	7d1b      	ldrb	r3, [r3, #20]
 800de88:	2b02      	cmp	r3, #2
 800de8a:	d00d      	beq.n	800dea8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800de8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	899b      	ldrh	r3, [r3, #12]
 800de92:	b29c      	uxth	r4, r3
 800de94:	2010      	movs	r0, #16
 800de96:	f7f9 febb 	bl	8007c10 <lwip_htons>
 800de9a:	4603      	mov	r3, r0
 800de9c:	461a      	mov	r2, r3
 800de9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	4322      	orrs	r2, r4
 800dea4:	b292      	uxth	r2, r2
 800dea6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800dea8:	697a      	ldr	r2, [r7, #20]
 800deaa:	6879      	ldr	r1, [r7, #4]
 800deac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800deae:	f000 f909 	bl	800e0c4 <tcp_output_segment>
 800deb2:	4603      	mov	r3, r0
 800deb4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800deb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d016      	beq.n	800deec <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	8b5b      	ldrh	r3, [r3, #26]
 800dec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dec6:	b29a      	uxth	r2, r3
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	835a      	strh	r2, [r3, #26]
      return err;
 800decc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ded0:	e0d3      	b.n	800e07a <tcp_output+0x3de>
 800ded2:	bf00      	nop
 800ded4:	08015de8 	.word	0x08015de8
 800ded8:	0801632c 	.word	0x0801632c
 800dedc:	08015e3c 	.word	0x08015e3c
 800dee0:	08016344 	.word	0x08016344
 800dee4:	2000aac4 	.word	0x2000aac4
 800dee8:	0801636c 	.word	0x0801636c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800deec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	7d1b      	ldrb	r3, [r3, #20]
 800def8:	2b02      	cmp	r3, #2
 800defa:	d006      	beq.n	800df0a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	8b5b      	ldrh	r3, [r3, #26]
 800df00:	f023 0303 	bic.w	r3, r3, #3
 800df04:	b29a      	uxth	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800df0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0c:	68db      	ldr	r3, [r3, #12]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	4618      	mov	r0, r3
 800df12:	f7f9 fe92 	bl	8007c3a <lwip_htonl>
 800df16:	4604      	mov	r4, r0
 800df18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1a:	891b      	ldrh	r3, [r3, #8]
 800df1c:	461d      	mov	r5, r3
 800df1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	899b      	ldrh	r3, [r3, #12]
 800df24:	b29b      	uxth	r3, r3
 800df26:	4618      	mov	r0, r3
 800df28:	f7f9 fe72 	bl	8007c10 <lwip_htons>
 800df2c:	4603      	mov	r3, r0
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	f003 0303 	and.w	r3, r3, #3
 800df34:	2b00      	cmp	r3, #0
 800df36:	d001      	beq.n	800df3c <tcp_output+0x2a0>
 800df38:	2301      	movs	r3, #1
 800df3a:	e000      	b.n	800df3e <tcp_output+0x2a2>
 800df3c:	2300      	movs	r3, #0
 800df3e:	442b      	add	r3, r5
 800df40:	4423      	add	r3, r4
 800df42:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	1ad3      	subs	r3, r2, r3
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	da02      	bge.n	800df56 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	68ba      	ldr	r2, [r7, #8]
 800df54:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800df56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df58:	891b      	ldrh	r3, [r3, #8]
 800df5a:	461c      	mov	r4, r3
 800df5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	899b      	ldrh	r3, [r3, #12]
 800df62:	b29b      	uxth	r3, r3
 800df64:	4618      	mov	r0, r3
 800df66:	f7f9 fe53 	bl	8007c10 <lwip_htons>
 800df6a:	4603      	mov	r3, r0
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	f003 0303 	and.w	r3, r3, #3
 800df72:	2b00      	cmp	r3, #0
 800df74:	d001      	beq.n	800df7a <tcp_output+0x2de>
 800df76:	2301      	movs	r3, #1
 800df78:	e000      	b.n	800df7c <tcp_output+0x2e0>
 800df7a:	2300      	movs	r3, #0
 800df7c:	4423      	add	r3, r4
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d049      	beq.n	800e016 <tcp_output+0x37a>
      seg->next = NULL;
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	2200      	movs	r2, #0
 800df86:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d105      	bne.n	800df9c <tcp_output+0x300>
        pcb->unacked = seg;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df94:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800df96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df98:	623b      	str	r3, [r7, #32]
 800df9a:	e03f      	b.n	800e01c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800df9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7f9 fe49 	bl	8007c3a <lwip_htonl>
 800dfa8:	4604      	mov	r4, r0
 800dfaa:	6a3b      	ldr	r3, [r7, #32]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7f9 fe42 	bl	8007c3a <lwip_htonl>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	1ae3      	subs	r3, r4, r3
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	da24      	bge.n	800e008 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	3370      	adds	r3, #112	; 0x70
 800dfc2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dfc4:	e002      	b.n	800dfcc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d011      	beq.n	800dff8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	68db      	ldr	r3, [r3, #12]
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7f9 fe2c 	bl	8007c3a <lwip_htonl>
 800dfe2:	4604      	mov	r4, r0
 800dfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7f9 fe25 	bl	8007c3a <lwip_htonl>
 800dff0:	4603      	mov	r3, r0
 800dff2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	dbe6      	blt.n	800dfc6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e004:	601a      	str	r2, [r3, #0]
 800e006:	e009      	b.n	800e01c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e008:	6a3b      	ldr	r3, [r7, #32]
 800e00a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e00c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e00e:	6a3b      	ldr	r3, [r7, #32]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	623b      	str	r3, [r7, #32]
 800e014:	e002      	b.n	800e01c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e016:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e018:	f7fc fc3f 	bl	800a89a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e020:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e024:	2b00      	cmp	r3, #0
 800e026:	d012      	beq.n	800e04e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	4618      	mov	r0, r3
 800e030:	f7f9 fe03 	bl	8007c3a <lwip_htonl>
 800e034:	4602      	mov	r2, r0
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e03a:	1ad3      	subs	r3, r2, r3
 800e03c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e03e:	8912      	ldrh	r2, [r2, #8]
 800e040:	4413      	add	r3, r2
  while (seg != NULL &&
 800e042:	69ba      	ldr	r2, [r7, #24]
 800e044:	429a      	cmp	r2, r3
 800e046:	f4bf aed9 	bcs.w	800ddfc <tcp_output+0x160>
 800e04a:	e000      	b.n	800e04e <tcp_output+0x3b2>
      break;
 800e04c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e052:	2b00      	cmp	r3, #0
 800e054:	d108      	bne.n	800e068 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2200      	movs	r2, #0
 800e05a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e05e:	e004      	b.n	800e06a <tcp_output+0x3ce>
    goto output_done;
 800e060:	bf00      	nop
 800e062:	e002      	b.n	800e06a <tcp_output+0x3ce>
    goto output_done;
 800e064:	bf00      	nop
 800e066:	e000      	b.n	800e06a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e068:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	8b5b      	ldrh	r3, [r3, #26]
 800e06e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e072:	b29a      	uxth	r2, r3
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e078:	2300      	movs	r3, #0
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3728      	adds	r7, #40	; 0x28
 800e07e:	46bd      	mov	sp, r7
 800e080:	bdb0      	pop	{r4, r5, r7, pc}
 800e082:	bf00      	nop

0800e084 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d106      	bne.n	800e0a0 <tcp_output_segment_busy+0x1c>
 800e092:	4b09      	ldr	r3, [pc, #36]	; (800e0b8 <tcp_output_segment_busy+0x34>)
 800e094:	f240 529a 	movw	r2, #1434	; 0x59a
 800e098:	4908      	ldr	r1, [pc, #32]	; (800e0bc <tcp_output_segment_busy+0x38>)
 800e09a:	4809      	ldr	r0, [pc, #36]	; (800e0c0 <tcp_output_segment_busy+0x3c>)
 800e09c:	f004 f89a 	bl	80121d4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	7b9b      	ldrb	r3, [r3, #14]
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d001      	beq.n	800e0ae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	e000      	b.n	800e0b0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3708      	adds	r7, #8
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	08015de8 	.word	0x08015de8
 800e0bc:	08016384 	.word	0x08016384
 800e0c0:	08015e3c 	.word	0x08015e3c

0800e0c4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e0c4:	b5b0      	push	{r4, r5, r7, lr}
 800e0c6:	b08c      	sub	sp, #48	; 0x30
 800e0c8:	af04      	add	r7, sp, #16
 800e0ca:	60f8      	str	r0, [r7, #12]
 800e0cc:	60b9      	str	r1, [r7, #8]
 800e0ce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d106      	bne.n	800e0e4 <tcp_output_segment+0x20>
 800e0d6:	4b64      	ldr	r3, [pc, #400]	; (800e268 <tcp_output_segment+0x1a4>)
 800e0d8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e0dc:	4963      	ldr	r1, [pc, #396]	; (800e26c <tcp_output_segment+0x1a8>)
 800e0de:	4864      	ldr	r0, [pc, #400]	; (800e270 <tcp_output_segment+0x1ac>)
 800e0e0:	f004 f878 	bl	80121d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d106      	bne.n	800e0f8 <tcp_output_segment+0x34>
 800e0ea:	4b5f      	ldr	r3, [pc, #380]	; (800e268 <tcp_output_segment+0x1a4>)
 800e0ec:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e0f0:	4960      	ldr	r1, [pc, #384]	; (800e274 <tcp_output_segment+0x1b0>)
 800e0f2:	485f      	ldr	r0, [pc, #380]	; (800e270 <tcp_output_segment+0x1ac>)
 800e0f4:	f004 f86e 	bl	80121d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d106      	bne.n	800e10c <tcp_output_segment+0x48>
 800e0fe:	4b5a      	ldr	r3, [pc, #360]	; (800e268 <tcp_output_segment+0x1a4>)
 800e100:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e104:	495c      	ldr	r1, [pc, #368]	; (800e278 <tcp_output_segment+0x1b4>)
 800e106:	485a      	ldr	r0, [pc, #360]	; (800e270 <tcp_output_segment+0x1ac>)
 800e108:	f004 f864 	bl	80121d4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f7ff ffb9 	bl	800e084 <tcp_output_segment_busy>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d001      	beq.n	800e11c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e118:	2300      	movs	r3, #0
 800e11a:	e0a1      	b.n	800e260 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	68dc      	ldr	r4, [r3, #12]
 800e124:	4610      	mov	r0, r2
 800e126:	f7f9 fd88 	bl	8007c3a <lwip_htonl>
 800e12a:	4603      	mov	r3, r0
 800e12c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	68dc      	ldr	r4, [r3, #12]
 800e136:	4610      	mov	r0, r2
 800e138:	f7f9 fd6a 	bl	8007c10 <lwip_htons>
 800e13c:	4603      	mov	r3, r0
 800e13e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e144:	68ba      	ldr	r2, [r7, #8]
 800e146:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e148:	441a      	add	r2, r3
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	68db      	ldr	r3, [r3, #12]
 800e152:	3314      	adds	r3, #20
 800e154:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	7a9b      	ldrb	r3, [r3, #10]
 800e15a:	f003 0301 	and.w	r3, r3, #1
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d015      	beq.n	800e18e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	3304      	adds	r3, #4
 800e166:	461a      	mov	r2, r3
 800e168:	6879      	ldr	r1, [r7, #4]
 800e16a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e16e:	f7fc fe8b 	bl	800ae88 <tcp_eff_send_mss_netif>
 800e172:	4603      	mov	r3, r0
 800e174:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e176:	8b7b      	ldrh	r3, [r7, #26]
 800e178:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7f9 fd5c 	bl	8007c3a <lwip_htonl>
 800e182:	4602      	mov	r2, r0
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	3304      	adds	r3, #4
 800e18c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e194:	2b00      	cmp	r3, #0
 800e196:	da02      	bge.n	800e19e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	2200      	movs	r2, #0
 800e19c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d10c      	bne.n	800e1c0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e1a6:	4b35      	ldr	r3, [pc, #212]	; (800e27c <tcp_output_segment+0x1b8>)
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7f9 fd40 	bl	8007c3a <lwip_htonl>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	68da      	ldr	r2, [r3, #12]
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	1ad3      	subs	r3, r2, r3
 800e1cc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	8959      	ldrh	r1, [r3, #10]
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	8b3a      	ldrh	r2, [r7, #24]
 800e1da:	1a8a      	subs	r2, r1, r2
 800e1dc:	b292      	uxth	r2, r2
 800e1de:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	8919      	ldrh	r1, [r3, #8]
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	8b3a      	ldrh	r2, [r7, #24]
 800e1ec:	1a8a      	subs	r2, r1, r2
 800e1ee:	b292      	uxth	r2, r2
 800e1f0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	68fa      	ldr	r2, [r7, #12]
 800e1f8:	68d2      	ldr	r2, [r2, #12]
 800e1fa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	68db      	ldr	r3, [r3, #12]
 800e200:	2200      	movs	r2, #0
 800e202:	741a      	strb	r2, [r3, #16]
 800e204:	2200      	movs	r2, #0
 800e206:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	68da      	ldr	r2, [r3, #12]
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	7a9b      	ldrb	r3, [r3, #10]
 800e210:	f003 0301 	and.w	r3, r3, #1
 800e214:	2b00      	cmp	r3, #0
 800e216:	d001      	beq.n	800e21c <tcp_output_segment+0x158>
 800e218:	2318      	movs	r3, #24
 800e21a:	e000      	b.n	800e21e <tcp_output_segment+0x15a>
 800e21c:	2314      	movs	r3, #20
 800e21e:	4413      	add	r3, r2
 800e220:	69fa      	ldr	r2, [r7, #28]
 800e222:	429a      	cmp	r2, r3
 800e224:	d006      	beq.n	800e234 <tcp_output_segment+0x170>
 800e226:	4b10      	ldr	r3, [pc, #64]	; (800e268 <tcp_output_segment+0x1a4>)
 800e228:	f240 621c 	movw	r2, #1564	; 0x61c
 800e22c:	4914      	ldr	r1, [pc, #80]	; (800e280 <tcp_output_segment+0x1bc>)
 800e22e:	4810      	ldr	r0, [pc, #64]	; (800e270 <tcp_output_segment+0x1ac>)
 800e230:	f003 ffd0 	bl	80121d4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6858      	ldr	r0, [r3, #4]
 800e238:	68b9      	ldr	r1, [r7, #8]
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	1d1c      	adds	r4, r3, #4
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	7add      	ldrb	r5, [r3, #11]
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	7a9b      	ldrb	r3, [r3, #10]
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	9202      	str	r2, [sp, #8]
 800e24a:	2206      	movs	r2, #6
 800e24c:	9201      	str	r2, [sp, #4]
 800e24e:	9300      	str	r3, [sp, #0]
 800e250:	462b      	mov	r3, r5
 800e252:	4622      	mov	r2, r4
 800e254:	f002 fe0c 	bl	8010e70 <ip4_output_if>
 800e258:	4603      	mov	r3, r0
 800e25a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e25c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e260:	4618      	mov	r0, r3
 800e262:	3720      	adds	r7, #32
 800e264:	46bd      	mov	sp, r7
 800e266:	bdb0      	pop	{r4, r5, r7, pc}
 800e268:	08015de8 	.word	0x08015de8
 800e26c:	080163ac 	.word	0x080163ac
 800e270:	08015e3c 	.word	0x08015e3c
 800e274:	080163cc 	.word	0x080163cc
 800e278:	080163ec 	.word	0x080163ec
 800e27c:	2000aa78 	.word	0x2000aa78
 800e280:	08016410 	.word	0x08016410

0800e284 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e284:	b5b0      	push	{r4, r5, r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d106      	bne.n	800e2a0 <tcp_rexmit_rto_prepare+0x1c>
 800e292:	4b31      	ldr	r3, [pc, #196]	; (800e358 <tcp_rexmit_rto_prepare+0xd4>)
 800e294:	f240 6263 	movw	r2, #1635	; 0x663
 800e298:	4930      	ldr	r1, [pc, #192]	; (800e35c <tcp_rexmit_rto_prepare+0xd8>)
 800e29a:	4831      	ldr	r0, [pc, #196]	; (800e360 <tcp_rexmit_rto_prepare+0xdc>)
 800e29c:	f003 ff9a 	bl	80121d4 <iprintf>

  if (pcb->unacked == NULL) {
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d102      	bne.n	800e2ae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e2a8:	f06f 0305 	mvn.w	r3, #5
 800e2ac:	e050      	b.n	800e350 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2b2:	60fb      	str	r3, [r7, #12]
 800e2b4:	e00b      	b.n	800e2ce <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e2b6:	68f8      	ldr	r0, [r7, #12]
 800e2b8:	f7ff fee4 	bl	800e084 <tcp_output_segment_busy>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d002      	beq.n	800e2c8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e2c2:	f06f 0305 	mvn.w	r3, #5
 800e2c6:	e043      	b.n	800e350 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	60fb      	str	r3, [r7, #12]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d1ef      	bne.n	800e2b6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e2d6:	68f8      	ldr	r0, [r7, #12]
 800e2d8:	f7ff fed4 	bl	800e084 <tcp_output_segment_busy>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d002      	beq.n	800e2e8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e2e2:	f06f 0305 	mvn.w	r3, #5
 800e2e6:	e033      	b.n	800e350 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	8b5b      	ldrh	r3, [r3, #26]
 800e302:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e306:	b29a      	uxth	r2, r3
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	4618      	mov	r0, r3
 800e314:	f7f9 fc91 	bl	8007c3a <lwip_htonl>
 800e318:	4604      	mov	r4, r0
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	891b      	ldrh	r3, [r3, #8]
 800e31e:	461d      	mov	r5, r3
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	899b      	ldrh	r3, [r3, #12]
 800e326:	b29b      	uxth	r3, r3
 800e328:	4618      	mov	r0, r3
 800e32a:	f7f9 fc71 	bl	8007c10 <lwip_htons>
 800e32e:	4603      	mov	r3, r0
 800e330:	b2db      	uxtb	r3, r3
 800e332:	f003 0303 	and.w	r3, r3, #3
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <tcp_rexmit_rto_prepare+0xba>
 800e33a:	2301      	movs	r3, #1
 800e33c:	e000      	b.n	800e340 <tcp_rexmit_rto_prepare+0xbc>
 800e33e:	2300      	movs	r3, #0
 800e340:	442b      	add	r3, r5
 800e342:	18e2      	adds	r2, r4, r3
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e34e:	2300      	movs	r3, #0
}
 800e350:	4618      	mov	r0, r3
 800e352:	3710      	adds	r7, #16
 800e354:	46bd      	mov	sp, r7
 800e356:	bdb0      	pop	{r4, r5, r7, pc}
 800e358:	08015de8 	.word	0x08015de8
 800e35c:	08016424 	.word	0x08016424
 800e360:	08015e3c 	.word	0x08015e3c

0800e364 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d106      	bne.n	800e380 <tcp_rexmit_rto_commit+0x1c>
 800e372:	4b0d      	ldr	r3, [pc, #52]	; (800e3a8 <tcp_rexmit_rto_commit+0x44>)
 800e374:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e378:	490c      	ldr	r1, [pc, #48]	; (800e3ac <tcp_rexmit_rto_commit+0x48>)
 800e37a:	480d      	ldr	r0, [pc, #52]	; (800e3b0 <tcp_rexmit_rto_commit+0x4c>)
 800e37c:	f003 ff2a 	bl	80121d4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e386:	2bff      	cmp	r3, #255	; 0xff
 800e388:	d007      	beq.n	800e39a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e390:	3301      	adds	r3, #1
 800e392:	b2da      	uxtb	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f7ff fc7e 	bl	800dc9c <tcp_output>
}
 800e3a0:	bf00      	nop
 800e3a2:	3708      	adds	r7, #8
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	08015de8 	.word	0x08015de8
 800e3ac:	08016448 	.word	0x08016448
 800e3b0:	08015e3c 	.word	0x08015e3c

0800e3b4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d106      	bne.n	800e3d0 <tcp_rexmit_rto+0x1c>
 800e3c2:	4b0a      	ldr	r3, [pc, #40]	; (800e3ec <tcp_rexmit_rto+0x38>)
 800e3c4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e3c8:	4909      	ldr	r1, [pc, #36]	; (800e3f0 <tcp_rexmit_rto+0x3c>)
 800e3ca:	480a      	ldr	r0, [pc, #40]	; (800e3f4 <tcp_rexmit_rto+0x40>)
 800e3cc:	f003 ff02 	bl	80121d4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f7ff ff57 	bl	800e284 <tcp_rexmit_rto_prepare>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d102      	bne.n	800e3e2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7ff ffc1 	bl	800e364 <tcp_rexmit_rto_commit>
  }
}
 800e3e2:	bf00      	nop
 800e3e4:	3708      	adds	r7, #8
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	08015de8 	.word	0x08015de8
 800e3f0:	0801646c 	.word	0x0801646c
 800e3f4:	08015e3c 	.word	0x08015e3c

0800e3f8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e3f8:	b590      	push	{r4, r7, lr}
 800e3fa:	b085      	sub	sp, #20
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d106      	bne.n	800e414 <tcp_rexmit+0x1c>
 800e406:	4b2f      	ldr	r3, [pc, #188]	; (800e4c4 <tcp_rexmit+0xcc>)
 800e408:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e40c:	492e      	ldr	r1, [pc, #184]	; (800e4c8 <tcp_rexmit+0xd0>)
 800e40e:	482f      	ldr	r0, [pc, #188]	; (800e4cc <tcp_rexmit+0xd4>)
 800e410:	f003 fee0 	bl	80121d4 <iprintf>

  if (pcb->unacked == NULL) {
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d102      	bne.n	800e422 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e41c:	f06f 0305 	mvn.w	r3, #5
 800e420:	e04c      	b.n	800e4bc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e426:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e428:	68b8      	ldr	r0, [r7, #8]
 800e42a:	f7ff fe2b 	bl	800e084 <tcp_output_segment_busy>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d002      	beq.n	800e43a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e434:	f06f 0305 	mvn.w	r3, #5
 800e438:	e040      	b.n	800e4bc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	336c      	adds	r3, #108	; 0x6c
 800e446:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e448:	e002      	b.n	800e450 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d011      	beq.n	800e47c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	4618      	mov	r0, r3
 800e462:	f7f9 fbea 	bl	8007c3a <lwip_htonl>
 800e466:	4604      	mov	r4, r0
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	4618      	mov	r0, r3
 800e470:	f7f9 fbe3 	bl	8007c3a <lwip_htonl>
 800e474:	4603      	mov	r3, r0
 800e476:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e478:	2b00      	cmp	r3, #0
 800e47a:	dbe6      	blt.n	800e44a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	68ba      	ldr	r2, [r7, #8]
 800e488:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d103      	bne.n	800e49a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2200      	movs	r2, #0
 800e496:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4a0:	2bff      	cmp	r3, #255	; 0xff
 800e4a2:	d007      	beq.n	800e4b4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	b2da      	uxtb	r2, r3
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e4ba:	2300      	movs	r3, #0
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3714      	adds	r7, #20
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd90      	pop	{r4, r7, pc}
 800e4c4:	08015de8 	.word	0x08015de8
 800e4c8:	08016488 	.word	0x08016488
 800e4cc:	08015e3c 	.word	0x08015e3c

0800e4d0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d106      	bne.n	800e4ec <tcp_rexmit_fast+0x1c>
 800e4de:	4b2a      	ldr	r3, [pc, #168]	; (800e588 <tcp_rexmit_fast+0xb8>)
 800e4e0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e4e4:	4929      	ldr	r1, [pc, #164]	; (800e58c <tcp_rexmit_fast+0xbc>)
 800e4e6:	482a      	ldr	r0, [pc, #168]	; (800e590 <tcp_rexmit_fast+0xc0>)
 800e4e8:	f003 fe74 	bl	80121d4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d045      	beq.n	800e580 <tcp_rexmit_fast+0xb0>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	8b5b      	ldrh	r3, [r3, #26]
 800e4f8:	f003 0304 	and.w	r3, r3, #4
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d13f      	bne.n	800e580 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f7ff ff79 	bl	800e3f8 <tcp_rexmit>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d139      	bne.n	800e580 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e518:	4293      	cmp	r3, r2
 800e51a:	bf28      	it	cs
 800e51c:	4613      	movcs	r3, r2
 800e51e:	b29b      	uxth	r3, r3
 800e520:	2b00      	cmp	r3, #0
 800e522:	da00      	bge.n	800e526 <tcp_rexmit_fast+0x56>
 800e524:	3301      	adds	r3, #1
 800e526:	105b      	asrs	r3, r3, #1
 800e528:	b29a      	uxth	r2, r3
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e536:	461a      	mov	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e53c:	005b      	lsls	r3, r3, #1
 800e53e:	429a      	cmp	r2, r3
 800e540:	d206      	bcs.n	800e550 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e546:	005b      	lsls	r3, r3, #1
 800e548:	b29a      	uxth	r2, r3
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e55a:	4619      	mov	r1, r3
 800e55c:	0049      	lsls	r1, r1, #1
 800e55e:	440b      	add	r3, r1
 800e560:	b29b      	uxth	r3, r3
 800e562:	4413      	add	r3, r2
 800e564:	b29a      	uxth	r2, r3
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	8b5b      	ldrh	r3, [r3, #26]
 800e570:	f043 0304 	orr.w	r3, r3, #4
 800e574:	b29a      	uxth	r2, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2200      	movs	r2, #0
 800e57e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e580:	bf00      	nop
 800e582:	3708      	adds	r7, #8
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	08015de8 	.word	0x08015de8
 800e58c:	080164a0 	.word	0x080164a0
 800e590:	08015e3c 	.word	0x08015e3c

0800e594 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b086      	sub	sp, #24
 800e598:	af00      	add	r7, sp, #0
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	607b      	str	r3, [r7, #4]
 800e59e:	460b      	mov	r3, r1
 800e5a0:	817b      	strh	r3, [r7, #10]
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e5a6:	897a      	ldrh	r2, [r7, #10]
 800e5a8:	893b      	ldrh	r3, [r7, #8]
 800e5aa:	4413      	add	r3, r2
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	3314      	adds	r3, #20
 800e5b0:	b29b      	uxth	r3, r3
 800e5b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	2022      	movs	r0, #34	; 0x22
 800e5ba:	f7fa fba3 	bl	8008d04 <pbuf_alloc>
 800e5be:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d04d      	beq.n	800e662 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e5c6:	897b      	ldrh	r3, [r7, #10]
 800e5c8:	3313      	adds	r3, #19
 800e5ca:	697a      	ldr	r2, [r7, #20]
 800e5cc:	8952      	ldrh	r2, [r2, #10]
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	db06      	blt.n	800e5e0 <tcp_output_alloc_header_common+0x4c>
 800e5d2:	4b26      	ldr	r3, [pc, #152]	; (800e66c <tcp_output_alloc_header_common+0xd8>)
 800e5d4:	f240 7223 	movw	r2, #1827	; 0x723
 800e5d8:	4925      	ldr	r1, [pc, #148]	; (800e670 <tcp_output_alloc_header_common+0xdc>)
 800e5da:	4826      	ldr	r0, [pc, #152]	; (800e674 <tcp_output_alloc_header_common+0xe0>)
 800e5dc:	f003 fdfa 	bl	80121d4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e5e6:	8c3b      	ldrh	r3, [r7, #32]
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7f9 fb11 	bl	8007c10 <lwip_htons>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e5f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7f9 fb09 	bl	8007c10 <lwip_htons>
 800e5fe:	4603      	mov	r3, r0
 800e600:	461a      	mov	r2, r3
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e60c:	68f8      	ldr	r0, [r7, #12]
 800e60e:	f7f9 fb14 	bl	8007c3a <lwip_htonl>
 800e612:	4602      	mov	r2, r0
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e618:	897b      	ldrh	r3, [r7, #10]
 800e61a:	089b      	lsrs	r3, r3, #2
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	3305      	adds	r3, #5
 800e620:	b29b      	uxth	r3, r3
 800e622:	031b      	lsls	r3, r3, #12
 800e624:	b29a      	uxth	r2, r3
 800e626:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	4313      	orrs	r3, r2
 800e62e:	b29b      	uxth	r3, r3
 800e630:	4618      	mov	r0, r3
 800e632:	f7f9 faed 	bl	8007c10 <lwip_htons>
 800e636:	4603      	mov	r3, r0
 800e638:	461a      	mov	r2, r3
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e63e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e640:	4618      	mov	r0, r3
 800e642:	f7f9 fae5 	bl	8007c10 <lwip_htons>
 800e646:	4603      	mov	r3, r0
 800e648:	461a      	mov	r2, r3
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	2200      	movs	r2, #0
 800e652:	741a      	strb	r2, [r3, #16]
 800e654:	2200      	movs	r2, #0
 800e656:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	2200      	movs	r2, #0
 800e65c:	749a      	strb	r2, [r3, #18]
 800e65e:	2200      	movs	r2, #0
 800e660:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e662:	697b      	ldr	r3, [r7, #20]
}
 800e664:	4618      	mov	r0, r3
 800e666:	3718      	adds	r7, #24
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}
 800e66c:	08015de8 	.word	0x08015de8
 800e670:	080164c0 	.word	0x080164c0
 800e674:	08015e3c 	.word	0x08015e3c

0800e678 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e678:	b5b0      	push	{r4, r5, r7, lr}
 800e67a:	b08a      	sub	sp, #40	; 0x28
 800e67c:	af04      	add	r7, sp, #16
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	607b      	str	r3, [r7, #4]
 800e682:	460b      	mov	r3, r1
 800e684:	817b      	strh	r3, [r7, #10]
 800e686:	4613      	mov	r3, r2
 800e688:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d106      	bne.n	800e69e <tcp_output_alloc_header+0x26>
 800e690:	4b15      	ldr	r3, [pc, #84]	; (800e6e8 <tcp_output_alloc_header+0x70>)
 800e692:	f240 7242 	movw	r2, #1858	; 0x742
 800e696:	4915      	ldr	r1, [pc, #84]	; (800e6ec <tcp_output_alloc_header+0x74>)
 800e698:	4815      	ldr	r0, [pc, #84]	; (800e6f0 <tcp_output_alloc_header+0x78>)
 800e69a:	f003 fd9b 	bl	80121d4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	8adb      	ldrh	r3, [r3, #22]
 800e6a6:	68fa      	ldr	r2, [r7, #12]
 800e6a8:	8b12      	ldrh	r2, [r2, #24]
 800e6aa:	68f9      	ldr	r1, [r7, #12]
 800e6ac:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e6ae:	893d      	ldrh	r5, [r7, #8]
 800e6b0:	897c      	ldrh	r4, [r7, #10]
 800e6b2:	9103      	str	r1, [sp, #12]
 800e6b4:	2110      	movs	r1, #16
 800e6b6:	9102      	str	r1, [sp, #8]
 800e6b8:	9201      	str	r2, [sp, #4]
 800e6ba:	9300      	str	r3, [sp, #0]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	462a      	mov	r2, r5
 800e6c0:	4621      	mov	r1, r4
 800e6c2:	f7ff ff67 	bl	800e594 <tcp_output_alloc_header_common>
 800e6c6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d006      	beq.n	800e6dc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d2:	68fa      	ldr	r2, [r7, #12]
 800e6d4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e6d6:	441a      	add	r2, r3
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e6dc:	697b      	ldr	r3, [r7, #20]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3718      	adds	r7, #24
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bdb0      	pop	{r4, r5, r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	08015de8 	.word	0x08015de8
 800e6ec:	080164f0 	.word	0x080164f0
 800e6f0:	08015e3c 	.word	0x08015e3c

0800e6f4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b088      	sub	sp, #32
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	60b9      	str	r1, [r7, #8]
 800e6fe:	4611      	mov	r1, r2
 800e700:	461a      	mov	r2, r3
 800e702:	460b      	mov	r3, r1
 800e704:	71fb      	strb	r3, [r7, #7]
 800e706:	4613      	mov	r3, r2
 800e708:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e70a:	2300      	movs	r3, #0
 800e70c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d106      	bne.n	800e722 <tcp_output_fill_options+0x2e>
 800e714:	4b12      	ldr	r3, [pc, #72]	; (800e760 <tcp_output_fill_options+0x6c>)
 800e716:	f240 7256 	movw	r2, #1878	; 0x756
 800e71a:	4912      	ldr	r1, [pc, #72]	; (800e764 <tcp_output_fill_options+0x70>)
 800e71c:	4812      	ldr	r0, [pc, #72]	; (800e768 <tcp_output_fill_options+0x74>)
 800e71e:	f003 fd59 	bl	80121d4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	3314      	adds	r3, #20
 800e72c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e72e:	8bfb      	ldrh	r3, [r7, #30]
 800e730:	009b      	lsls	r3, r3, #2
 800e732:	461a      	mov	r2, r3
 800e734:	79fb      	ldrb	r3, [r7, #7]
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	f003 0304 	and.w	r3, r3, #4
 800e73c:	4413      	add	r3, r2
 800e73e:	3314      	adds	r3, #20
 800e740:	69ba      	ldr	r2, [r7, #24]
 800e742:	4413      	add	r3, r2
 800e744:	697a      	ldr	r2, [r7, #20]
 800e746:	429a      	cmp	r2, r3
 800e748:	d006      	beq.n	800e758 <tcp_output_fill_options+0x64>
 800e74a:	4b05      	ldr	r3, [pc, #20]	; (800e760 <tcp_output_fill_options+0x6c>)
 800e74c:	f240 7275 	movw	r2, #1909	; 0x775
 800e750:	4906      	ldr	r1, [pc, #24]	; (800e76c <tcp_output_fill_options+0x78>)
 800e752:	4805      	ldr	r0, [pc, #20]	; (800e768 <tcp_output_fill_options+0x74>)
 800e754:	f003 fd3e 	bl	80121d4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e758:	bf00      	nop
 800e75a:	3720      	adds	r7, #32
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}
 800e760:	08015de8 	.word	0x08015de8
 800e764:	08016518 	.word	0x08016518
 800e768:	08015e3c 	.word	0x08015e3c
 800e76c:	08016410 	.word	0x08016410

0800e770 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b08a      	sub	sp, #40	; 0x28
 800e774:	af04      	add	r7, sp, #16
 800e776:	60f8      	str	r0, [r7, #12]
 800e778:	60b9      	str	r1, [r7, #8]
 800e77a:	607a      	str	r2, [r7, #4]
 800e77c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d106      	bne.n	800e792 <tcp_output_control_segment+0x22>
 800e784:	4b1c      	ldr	r3, [pc, #112]	; (800e7f8 <tcp_output_control_segment+0x88>)
 800e786:	f240 7287 	movw	r2, #1927	; 0x787
 800e78a:	491c      	ldr	r1, [pc, #112]	; (800e7fc <tcp_output_control_segment+0x8c>)
 800e78c:	481c      	ldr	r0, [pc, #112]	; (800e800 <tcp_output_control_segment+0x90>)
 800e78e:	f003 fd21 	bl	80121d4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e792:	683a      	ldr	r2, [r7, #0]
 800e794:	6879      	ldr	r1, [r7, #4]
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	f7fe ff40 	bl	800d61c <tcp_route>
 800e79c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d102      	bne.n	800e7aa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e7a4:	23fc      	movs	r3, #252	; 0xfc
 800e7a6:	75fb      	strb	r3, [r7, #23]
 800e7a8:	e01c      	b.n	800e7e4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d006      	beq.n	800e7be <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	7adb      	ldrb	r3, [r3, #11]
 800e7b4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	7a9b      	ldrb	r3, [r3, #10]
 800e7ba:	757b      	strb	r3, [r7, #21]
 800e7bc:	e003      	b.n	800e7c6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e7be:	23ff      	movs	r3, #255	; 0xff
 800e7c0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e7c6:	7dba      	ldrb	r2, [r7, #22]
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	9302      	str	r3, [sp, #8]
 800e7cc:	2306      	movs	r3, #6
 800e7ce:	9301      	str	r3, [sp, #4]
 800e7d0:	7d7b      	ldrb	r3, [r7, #21]
 800e7d2:	9300      	str	r3, [sp, #0]
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	683a      	ldr	r2, [r7, #0]
 800e7d8:	6879      	ldr	r1, [r7, #4]
 800e7da:	68b8      	ldr	r0, [r7, #8]
 800e7dc:	f002 fb48 	bl	8010e70 <ip4_output_if>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e7e4:	68b8      	ldr	r0, [r7, #8]
 800e7e6:	f7fa fd71 	bl	80092cc <pbuf_free>
  return err;
 800e7ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3718      	adds	r7, #24
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	08015de8 	.word	0x08015de8
 800e7fc:	08016540 	.word	0x08016540
 800e800:	08015e3c 	.word	0x08015e3c

0800e804 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e804:	b590      	push	{r4, r7, lr}
 800e806:	b08b      	sub	sp, #44	; 0x2c
 800e808:	af04      	add	r7, sp, #16
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	60b9      	str	r1, [r7, #8]
 800e80e:	607a      	str	r2, [r7, #4]
 800e810:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d106      	bne.n	800e826 <tcp_rst+0x22>
 800e818:	4b1f      	ldr	r3, [pc, #124]	; (800e898 <tcp_rst+0x94>)
 800e81a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e81e:	491f      	ldr	r1, [pc, #124]	; (800e89c <tcp_rst+0x98>)
 800e820:	481f      	ldr	r0, [pc, #124]	; (800e8a0 <tcp_rst+0x9c>)
 800e822:	f003 fcd7 	bl	80121d4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d106      	bne.n	800e83a <tcp_rst+0x36>
 800e82c:	4b1a      	ldr	r3, [pc, #104]	; (800e898 <tcp_rst+0x94>)
 800e82e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e832:	491c      	ldr	r1, [pc, #112]	; (800e8a4 <tcp_rst+0xa0>)
 800e834:	481a      	ldr	r0, [pc, #104]	; (800e8a0 <tcp_rst+0x9c>)
 800e836:	f003 fccd 	bl	80121d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e83a:	2300      	movs	r3, #0
 800e83c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e83e:	f246 0308 	movw	r3, #24584	; 0x6008
 800e842:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e844:	7dfb      	ldrb	r3, [r7, #23]
 800e846:	b29c      	uxth	r4, r3
 800e848:	68b8      	ldr	r0, [r7, #8]
 800e84a:	f7f9 f9f6 	bl	8007c3a <lwip_htonl>
 800e84e:	4602      	mov	r2, r0
 800e850:	8abb      	ldrh	r3, [r7, #20]
 800e852:	9303      	str	r3, [sp, #12]
 800e854:	2314      	movs	r3, #20
 800e856:	9302      	str	r3, [sp, #8]
 800e858:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e85a:	9301      	str	r3, [sp, #4]
 800e85c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e85e:	9300      	str	r3, [sp, #0]
 800e860:	4613      	mov	r3, r2
 800e862:	2200      	movs	r2, #0
 800e864:	4621      	mov	r1, r4
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f7ff fe94 	bl	800e594 <tcp_output_alloc_header_common>
 800e86c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00c      	beq.n	800e88e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e874:	7dfb      	ldrb	r3, [r7, #23]
 800e876:	2200      	movs	r2, #0
 800e878:	6939      	ldr	r1, [r7, #16]
 800e87a:	68f8      	ldr	r0, [r7, #12]
 800e87c:	f7ff ff3a 	bl	800e6f4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e882:	683a      	ldr	r2, [r7, #0]
 800e884:	6939      	ldr	r1, [r7, #16]
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	f7ff ff72 	bl	800e770 <tcp_output_control_segment>
 800e88c:	e000      	b.n	800e890 <tcp_rst+0x8c>
    return;
 800e88e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e890:	371c      	adds	r7, #28
 800e892:	46bd      	mov	sp, r7
 800e894:	bd90      	pop	{r4, r7, pc}
 800e896:	bf00      	nop
 800e898:	08015de8 	.word	0x08015de8
 800e89c:	0801656c 	.word	0x0801656c
 800e8a0:	08015e3c 	.word	0x08015e3c
 800e8a4:	08016588 	.word	0x08016588

0800e8a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e8a8:	b590      	push	{r4, r7, lr}
 800e8aa:	b087      	sub	sp, #28
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d106      	bne.n	800e8cc <tcp_send_empty_ack+0x24>
 800e8be:	4b28      	ldr	r3, [pc, #160]	; (800e960 <tcp_send_empty_ack+0xb8>)
 800e8c0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e8c4:	4927      	ldr	r1, [pc, #156]	; (800e964 <tcp_send_empty_ack+0xbc>)
 800e8c6:	4828      	ldr	r0, [pc, #160]	; (800e968 <tcp_send_empty_ack+0xc0>)
 800e8c8:	f003 fc84 	bl	80121d4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e8cc:	7dfb      	ldrb	r3, [r7, #23]
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	f003 0304 	and.w	r3, r3, #4
 800e8d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e8d8:	7d7b      	ldrb	r3, [r7, #21]
 800e8da:	b29c      	uxth	r4, r3
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7f9 f9aa 	bl	8007c3a <lwip_htonl>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	4621      	mov	r1, r4
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f7ff fec3 	bl	800e678 <tcp_output_alloc_header>
 800e8f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d109      	bne.n	800e90e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	8b5b      	ldrh	r3, [r3, #26]
 800e8fe:	f043 0303 	orr.w	r3, r3, #3
 800e902:	b29a      	uxth	r2, r3
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e908:	f06f 0301 	mvn.w	r3, #1
 800e90c:	e023      	b.n	800e956 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e90e:	7dbb      	ldrb	r3, [r7, #22]
 800e910:	7dfa      	ldrb	r2, [r7, #23]
 800e912:	6939      	ldr	r1, [r7, #16]
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f7ff feed 	bl	800e6f4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e91a:	687a      	ldr	r2, [r7, #4]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	3304      	adds	r3, #4
 800e920:	6939      	ldr	r1, [r7, #16]
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f7ff ff24 	bl	800e770 <tcp_output_control_segment>
 800e928:	4603      	mov	r3, r0
 800e92a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e92c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d007      	beq.n	800e944 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	8b5b      	ldrh	r3, [r3, #26]
 800e938:	f043 0303 	orr.w	r3, r3, #3
 800e93c:	b29a      	uxth	r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	835a      	strh	r2, [r3, #26]
 800e942:	e006      	b.n	800e952 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	8b5b      	ldrh	r3, [r3, #26]
 800e948:	f023 0303 	bic.w	r3, r3, #3
 800e94c:	b29a      	uxth	r2, r3
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e952:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e956:	4618      	mov	r0, r3
 800e958:	371c      	adds	r7, #28
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd90      	pop	{r4, r7, pc}
 800e95e:	bf00      	nop
 800e960:	08015de8 	.word	0x08015de8
 800e964:	080165a4 	.word	0x080165a4
 800e968:	08015e3c 	.word	0x08015e3c

0800e96c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e96c:	b590      	push	{r4, r7, lr}
 800e96e:	b087      	sub	sp, #28
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e974:	2300      	movs	r3, #0
 800e976:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d106      	bne.n	800e98c <tcp_keepalive+0x20>
 800e97e:	4b18      	ldr	r3, [pc, #96]	; (800e9e0 <tcp_keepalive+0x74>)
 800e980:	f640 0224 	movw	r2, #2084	; 0x824
 800e984:	4917      	ldr	r1, [pc, #92]	; (800e9e4 <tcp_keepalive+0x78>)
 800e986:	4818      	ldr	r0, [pc, #96]	; (800e9e8 <tcp_keepalive+0x7c>)
 800e988:	f003 fc24 	bl	80121d4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e98c:	7dfb      	ldrb	r3, [r7, #23]
 800e98e:	b29c      	uxth	r4, r3
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e994:	3b01      	subs	r3, #1
 800e996:	4618      	mov	r0, r3
 800e998:	f7f9 f94f 	bl	8007c3a <lwip_htonl>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2200      	movs	r2, #0
 800e9a0:	4621      	mov	r1, r4
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f7ff fe68 	bl	800e678 <tcp_output_alloc_header>
 800e9a8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d102      	bne.n	800e9b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9b4:	e010      	b.n	800e9d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e9b6:	7dfb      	ldrb	r3, [r7, #23]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	6939      	ldr	r1, [r7, #16]
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f7ff fe99 	bl	800e6f4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e9c2:	687a      	ldr	r2, [r7, #4]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	3304      	adds	r3, #4
 800e9c8:	6939      	ldr	r1, [r7, #16]
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f7ff fed0 	bl	800e770 <tcp_output_control_segment>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e9d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	371c      	adds	r7, #28
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd90      	pop	{r4, r7, pc}
 800e9e0:	08015de8 	.word	0x08015de8
 800e9e4:	080165c4 	.word	0x080165c4
 800e9e8:	08015e3c 	.word	0x08015e3c

0800e9ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e9ec:	b590      	push	{r4, r7, lr}
 800e9ee:	b08b      	sub	sp, #44	; 0x2c
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d106      	bne.n	800ea0e <tcp_zero_window_probe+0x22>
 800ea00:	4b4c      	ldr	r3, [pc, #304]	; (800eb34 <tcp_zero_window_probe+0x148>)
 800ea02:	f640 024f 	movw	r2, #2127	; 0x84f
 800ea06:	494c      	ldr	r1, [pc, #304]	; (800eb38 <tcp_zero_window_probe+0x14c>)
 800ea08:	484c      	ldr	r0, [pc, #304]	; (800eb3c <tcp_zero_window_probe+0x150>)
 800ea0a:	f003 fbe3 	bl	80121d4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea12:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ea14:	6a3b      	ldr	r3, [r7, #32]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d101      	bne.n	800ea1e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	e086      	b.n	800eb2c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ea24:	2bff      	cmp	r3, #255	; 0xff
 800ea26:	d007      	beq.n	800ea38 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ea2e:	3301      	adds	r3, #1
 800ea30:	b2da      	uxtb	r2, r3
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ea38:	6a3b      	ldr	r3, [r7, #32]
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	899b      	ldrh	r3, [r3, #12]
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7f9 f8e5 	bl	8007c10 <lwip_htons>
 800ea46:	4603      	mov	r3, r0
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	f003 0301 	and.w	r3, r3, #1
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d005      	beq.n	800ea5e <tcp_zero_window_probe+0x72>
 800ea52:	6a3b      	ldr	r3, [r7, #32]
 800ea54:	891b      	ldrh	r3, [r3, #8]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d101      	bne.n	800ea5e <tcp_zero_window_probe+0x72>
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	e000      	b.n	800ea60 <tcp_zero_window_probe+0x74>
 800ea5e:	2300      	movs	r3, #0
 800ea60:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ea62:	7ffb      	ldrb	r3, [r7, #31]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	bf0c      	ite	eq
 800ea68:	2301      	moveq	r3, #1
 800ea6a:	2300      	movne	r3, #0
 800ea6c:	b2db      	uxtb	r3, r3
 800ea6e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ea70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea74:	b299      	uxth	r1, r3
 800ea76:	6a3b      	ldr	r3, [r7, #32]
 800ea78:	68db      	ldr	r3, [r3, #12]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	8bba      	ldrh	r2, [r7, #28]
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f7ff fdfa 	bl	800e678 <tcp_output_alloc_header>
 800ea84:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d102      	bne.n	800ea92 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ea8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea90:	e04c      	b.n	800eb2c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ea98:	7ffb      	ldrb	r3, [r7, #31]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d011      	beq.n	800eac2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	899b      	ldrh	r3, [r3, #12]
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	b21b      	sxth	r3, r3
 800eaa6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800eaaa:	b21c      	sxth	r4, r3
 800eaac:	2011      	movs	r0, #17
 800eaae:	f7f9 f8af 	bl	8007c10 <lwip_htons>
 800eab2:	4603      	mov	r3, r0
 800eab4:	b21b      	sxth	r3, r3
 800eab6:	4323      	orrs	r3, r4
 800eab8:	b21b      	sxth	r3, r3
 800eaba:	b29a      	uxth	r2, r3
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	819a      	strh	r2, [r3, #12]
 800eac0:	e010      	b.n	800eae4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	3314      	adds	r3, #20
 800eac8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800eaca:	6a3b      	ldr	r3, [r7, #32]
 800eacc:	6858      	ldr	r0, [r3, #4]
 800eace:	6a3b      	ldr	r3, [r7, #32]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	891a      	ldrh	r2, [r3, #8]
 800ead4:	6a3b      	ldr	r3, [r7, #32]
 800ead6:	891b      	ldrh	r3, [r3, #8]
 800ead8:	1ad3      	subs	r3, r2, r3
 800eada:	b29b      	uxth	r3, r3
 800eadc:	2201      	movs	r2, #1
 800eade:	6939      	ldr	r1, [r7, #16]
 800eae0:	f7fa fdee 	bl	80096c0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800eae4:	6a3b      	ldr	r3, [r7, #32]
 800eae6:	68db      	ldr	r3, [r3, #12]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7f9 f8a5 	bl	8007c3a <lwip_htonl>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	da02      	bge.n	800eb08 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	68fa      	ldr	r2, [r7, #12]
 800eb06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eb08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	69b9      	ldr	r1, [r7, #24]
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7ff fdef 	bl	800e6f4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eb16:	687a      	ldr	r2, [r7, #4]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	3304      	adds	r3, #4
 800eb1c:	69b9      	ldr	r1, [r7, #24]
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f7ff fe26 	bl	800e770 <tcp_output_control_segment>
 800eb24:	4603      	mov	r3, r0
 800eb26:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eb28:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	372c      	adds	r7, #44	; 0x2c
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd90      	pop	{r4, r7, pc}
 800eb34:	08015de8 	.word	0x08015de8
 800eb38:	080165e0 	.word	0x080165e0
 800eb3c:	08015e3c 	.word	0x08015e3c

0800eb40 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800eb48:	f7fa ff0c 	bl	8009964 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800eb4c:	4b0a      	ldr	r3, [pc, #40]	; (800eb78 <tcpip_tcp_timer+0x38>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d103      	bne.n	800eb5c <tcpip_tcp_timer+0x1c>
 800eb54:	4b09      	ldr	r3, [pc, #36]	; (800eb7c <tcpip_tcp_timer+0x3c>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d005      	beq.n	800eb68 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	4908      	ldr	r1, [pc, #32]	; (800eb80 <tcpip_tcp_timer+0x40>)
 800eb60:	20fa      	movs	r0, #250	; 0xfa
 800eb62:	f000 f8f3 	bl	800ed4c <sys_timeout>
 800eb66:	e003      	b.n	800eb70 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800eb68:	4b06      	ldr	r3, [pc, #24]	; (800eb84 <tcpip_tcp_timer+0x44>)
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	601a      	str	r2, [r3, #0]
  }
}
 800eb6e:	bf00      	nop
 800eb70:	bf00      	nop
 800eb72:	3708      	adds	r7, #8
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	2000aa84 	.word	0x2000aa84
 800eb7c:	2000aa88 	.word	0x2000aa88
 800eb80:	0800eb41 	.word	0x0800eb41
 800eb84:	2000aad0 	.word	0x2000aad0

0800eb88 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800eb8c:	4b0a      	ldr	r3, [pc, #40]	; (800ebb8 <tcp_timer_needed+0x30>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d10f      	bne.n	800ebb4 <tcp_timer_needed+0x2c>
 800eb94:	4b09      	ldr	r3, [pc, #36]	; (800ebbc <tcp_timer_needed+0x34>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d103      	bne.n	800eba4 <tcp_timer_needed+0x1c>
 800eb9c:	4b08      	ldr	r3, [pc, #32]	; (800ebc0 <tcp_timer_needed+0x38>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d007      	beq.n	800ebb4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800eba4:	4b04      	ldr	r3, [pc, #16]	; (800ebb8 <tcp_timer_needed+0x30>)
 800eba6:	2201      	movs	r2, #1
 800eba8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ebaa:	2200      	movs	r2, #0
 800ebac:	4905      	ldr	r1, [pc, #20]	; (800ebc4 <tcp_timer_needed+0x3c>)
 800ebae:	20fa      	movs	r0, #250	; 0xfa
 800ebb0:	f000 f8cc 	bl	800ed4c <sys_timeout>
  }
}
 800ebb4:	bf00      	nop
 800ebb6:	bd80      	pop	{r7, pc}
 800ebb8:	2000aad0 	.word	0x2000aad0
 800ebbc:	2000aa84 	.word	0x2000aa84
 800ebc0:	2000aa88 	.word	0x2000aa88
 800ebc4:	0800eb41 	.word	0x0800eb41

0800ebc8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b086      	sub	sp, #24
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ebd4:	2006      	movs	r0, #6
 800ebd6:	f7f9 fc93 	bl	8008500 <memp_malloc>
 800ebda:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d109      	bne.n	800ebf6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d151      	bne.n	800ec8c <sys_timeout_abs+0xc4>
 800ebe8:	4b2a      	ldr	r3, [pc, #168]	; (800ec94 <sys_timeout_abs+0xcc>)
 800ebea:	22be      	movs	r2, #190	; 0xbe
 800ebec:	492a      	ldr	r1, [pc, #168]	; (800ec98 <sys_timeout_abs+0xd0>)
 800ebee:	482b      	ldr	r0, [pc, #172]	; (800ec9c <sys_timeout_abs+0xd4>)
 800ebf0:	f003 faf0 	bl	80121d4 <iprintf>
    return;
 800ebf4:	e04a      	b.n	800ec8c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	68ba      	ldr	r2, [r7, #8]
 800ec00:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	687a      	ldr	r2, [r7, #4]
 800ec06:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	68fa      	ldr	r2, [r7, #12]
 800ec0c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ec0e:	4b24      	ldr	r3, [pc, #144]	; (800eca0 <sys_timeout_abs+0xd8>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d103      	bne.n	800ec1e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ec16:	4a22      	ldr	r2, [pc, #136]	; (800eca0 <sys_timeout_abs+0xd8>)
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	6013      	str	r3, [r2, #0]
    return;
 800ec1c:	e037      	b.n	800ec8e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	685a      	ldr	r2, [r3, #4]
 800ec22:	4b1f      	ldr	r3, [pc, #124]	; (800eca0 <sys_timeout_abs+0xd8>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	1ad3      	subs	r3, r2, r3
 800ec2a:	0fdb      	lsrs	r3, r3, #31
 800ec2c:	f003 0301 	and.w	r3, r3, #1
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d007      	beq.n	800ec46 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ec36:	4b1a      	ldr	r3, [pc, #104]	; (800eca0 <sys_timeout_abs+0xd8>)
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ec3e:	4a18      	ldr	r2, [pc, #96]	; (800eca0 <sys_timeout_abs+0xd8>)
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	6013      	str	r3, [r2, #0]
 800ec44:	e023      	b.n	800ec8e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ec46:	4b16      	ldr	r3, [pc, #88]	; (800eca0 <sys_timeout_abs+0xd8>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	617b      	str	r3, [r7, #20]
 800ec4c:	e01a      	b.n	800ec84 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d00b      	beq.n	800ec6e <sys_timeout_abs+0xa6>
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	685a      	ldr	r2, [r3, #4]
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	1ad3      	subs	r3, r2, r3
 800ec62:	0fdb      	lsrs	r3, r3, #31
 800ec64:	f003 0301 	and.w	r3, r3, #1
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d007      	beq.n	800ec7e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	681a      	ldr	r2, [r3, #0]
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	693a      	ldr	r2, [r7, #16]
 800ec7a:	601a      	str	r2, [r3, #0]
        break;
 800ec7c:	e007      	b.n	800ec8e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	617b      	str	r3, [r7, #20]
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d1e1      	bne.n	800ec4e <sys_timeout_abs+0x86>
 800ec8a:	e000      	b.n	800ec8e <sys_timeout_abs+0xc6>
    return;
 800ec8c:	bf00      	nop
      }
    }
  }
}
 800ec8e:	3718      	adds	r7, #24
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	08016604 	.word	0x08016604
 800ec98:	08016638 	.word	0x08016638
 800ec9c:	08016678 	.word	0x08016678
 800eca0:	2000aac8 	.word	0x2000aac8

0800eca4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b086      	sub	sp, #24
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	4798      	blx	r3

  now = sys_now();
 800ecb6:	f7f8 fa25 	bl	8007104 <sys_now>
 800ecba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	681a      	ldr	r2, [r3, #0]
 800ecc0:	4b0f      	ldr	r3, [pc, #60]	; (800ed00 <lwip_cyclic_timer+0x5c>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	4413      	add	r3, r2
 800ecc6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ecc8:	68fa      	ldr	r2, [r7, #12]
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	1ad3      	subs	r3, r2, r3
 800ecce:	0fdb      	lsrs	r3, r3, #31
 800ecd0:	f003 0301 	and.w	r3, r3, #1
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d009      	beq.n	800ecee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	681a      	ldr	r2, [r3, #0]
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	4413      	add	r3, r2
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	4907      	ldr	r1, [pc, #28]	; (800ed04 <lwip_cyclic_timer+0x60>)
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7ff ff6e 	bl	800ebc8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ecec:	e004      	b.n	800ecf8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	4904      	ldr	r1, [pc, #16]	; (800ed04 <lwip_cyclic_timer+0x60>)
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	f7ff ff68 	bl	800ebc8 <sys_timeout_abs>
}
 800ecf8:	bf00      	nop
 800ecfa:	3718      	adds	r7, #24
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	2000aacc 	.word	0x2000aacc
 800ed04:	0800eca5 	.word	0x0800eca5

0800ed08 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ed0e:	2301      	movs	r3, #1
 800ed10:	607b      	str	r3, [r7, #4]
 800ed12:	e00e      	b.n	800ed32 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ed14:	4a0b      	ldr	r2, [pc, #44]	; (800ed44 <sys_timeouts_init+0x3c>)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	00db      	lsls	r3, r3, #3
 800ed20:	4a08      	ldr	r2, [pc, #32]	; (800ed44 <sys_timeouts_init+0x3c>)
 800ed22:	4413      	add	r3, r2
 800ed24:	461a      	mov	r2, r3
 800ed26:	4908      	ldr	r1, [pc, #32]	; (800ed48 <sys_timeouts_init+0x40>)
 800ed28:	f000 f810 	bl	800ed4c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	607b      	str	r3, [r7, #4]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d9ed      	bls.n	800ed14 <sys_timeouts_init+0xc>
  }
}
 800ed38:	bf00      	nop
 800ed3a:	bf00      	nop
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	080171fc 	.word	0x080171fc
 800ed48:	0800eca5 	.word	0x0800eca5

0800ed4c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b086      	sub	sp, #24
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	60f8      	str	r0, [r7, #12]
 800ed54:	60b9      	str	r1, [r7, #8]
 800ed56:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed5e:	d306      	bcc.n	800ed6e <sys_timeout+0x22>
 800ed60:	4b0a      	ldr	r3, [pc, #40]	; (800ed8c <sys_timeout+0x40>)
 800ed62:	f240 1229 	movw	r2, #297	; 0x129
 800ed66:	490a      	ldr	r1, [pc, #40]	; (800ed90 <sys_timeout+0x44>)
 800ed68:	480a      	ldr	r0, [pc, #40]	; (800ed94 <sys_timeout+0x48>)
 800ed6a:	f003 fa33 	bl	80121d4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ed6e:	f7f8 f9c9 	bl	8007104 <sys_now>
 800ed72:	4602      	mov	r2, r0
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	4413      	add	r3, r2
 800ed78:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	68b9      	ldr	r1, [r7, #8]
 800ed7e:	6978      	ldr	r0, [r7, #20]
 800ed80:	f7ff ff22 	bl	800ebc8 <sys_timeout_abs>
#endif
}
 800ed84:	bf00      	nop
 800ed86:	3718      	adds	r7, #24
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	08016604 	.word	0x08016604
 800ed90:	080166a0 	.word	0x080166a0
 800ed94:	08016678 	.word	0x08016678

0800ed98 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800eda2:	4b19      	ldr	r3, [pc, #100]	; (800ee08 <sys_untimeout+0x70>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d029      	beq.n	800edfe <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800edaa:	4b17      	ldr	r3, [pc, #92]	; (800ee08 <sys_untimeout+0x70>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	60bb      	str	r3, [r7, #8]
 800edb0:	2300      	movs	r3, #0
 800edb2:	60fb      	str	r3, [r7, #12]
 800edb4:	e01f      	b.n	800edf6 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	689b      	ldr	r3, [r3, #8]
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d115      	bne.n	800edec <sys_untimeout+0x54>
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	683a      	ldr	r2, [r7, #0]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d110      	bne.n	800edec <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d104      	bne.n	800edda <sys_untimeout+0x42>
        next_timeout = t->next;
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4a0c      	ldr	r2, [pc, #48]	; (800ee08 <sys_untimeout+0x70>)
 800edd6:	6013      	str	r3, [r2, #0]
 800edd8:	e003      	b.n	800ede2 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 800ede2:	68b9      	ldr	r1, [r7, #8]
 800ede4:	2006      	movs	r0, #6
 800ede6:	f7f9 fbfb 	bl	80085e0 <memp_free>
      return;
 800edea:	e009      	b.n	800ee00 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	60fb      	str	r3, [r7, #12]
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	60bb      	str	r3, [r7, #8]
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d1dc      	bne.n	800edb6 <sys_untimeout+0x1e>
    }
  }
  return;
 800edfc:	e000      	b.n	800ee00 <sys_untimeout+0x68>
    return;
 800edfe:	bf00      	nop
}
 800ee00:	3710      	adds	r7, #16
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	2000aac8 	.word	0x2000aac8

0800ee0c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ee12:	f7f8 f977 	bl	8007104 <sys_now>
 800ee16:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ee18:	4b1a      	ldr	r3, [pc, #104]	; (800ee84 <sys_check_timeouts+0x78>)
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d001      	beq.n	800ee26 <sys_check_timeouts+0x1a>
 800ee22:	f7f9 ff19 	bl	8008c58 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800ee26:	4b18      	ldr	r3, [pc, #96]	; (800ee88 <sys_check_timeouts+0x7c>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d022      	beq.n	800ee78 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	685b      	ldr	r3, [r3, #4]
 800ee36:	68fa      	ldr	r2, [r7, #12]
 800ee38:	1ad3      	subs	r3, r2, r3
 800ee3a:	0fdb      	lsrs	r3, r3, #31
 800ee3c:	f003 0301 	and.w	r3, r3, #1
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d11a      	bne.n	800ee7c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	4a0f      	ldr	r2, [pc, #60]	; (800ee88 <sys_check_timeouts+0x7c>)
 800ee4c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	689b      	ldr	r3, [r3, #8]
 800ee52:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	685b      	ldr	r3, [r3, #4]
 800ee5e:	4a0b      	ldr	r2, [pc, #44]	; (800ee8c <sys_check_timeouts+0x80>)
 800ee60:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ee62:	68b9      	ldr	r1, [r7, #8]
 800ee64:	2006      	movs	r0, #6
 800ee66:	f7f9 fbbb 	bl	80085e0 <memp_free>
    if (handler != NULL) {
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d0d3      	beq.n	800ee18 <sys_check_timeouts+0xc>
      handler(arg);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6838      	ldr	r0, [r7, #0]
 800ee74:	4798      	blx	r3
  do {
 800ee76:	e7cf      	b.n	800ee18 <sys_check_timeouts+0xc>
      return;
 800ee78:	bf00      	nop
 800ee7a:	e000      	b.n	800ee7e <sys_check_timeouts+0x72>
      return;
 800ee7c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ee7e:	3710      	adds	r7, #16
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	2000aa75 	.word	0x2000aa75
 800ee88:	2000aac8 	.word	0x2000aac8
 800ee8c:	2000aacc 	.word	0x2000aacc

0800ee90 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ee94:	f003 f81a 	bl	8011ecc <rand>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	b29b      	uxth	r3, r3
 800ee9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800eea6:	b29a      	uxth	r2, r3
 800eea8:	4b01      	ldr	r3, [pc, #4]	; (800eeb0 <udp_init+0x20>)
 800eeaa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800eeac:	bf00      	nop
 800eeae:	bd80      	pop	{r7, pc}
 800eeb0:	2000002c 	.word	0x2000002c

0800eeb4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800eeba:	2300      	movs	r3, #0
 800eebc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800eebe:	4b17      	ldr	r3, [pc, #92]	; (800ef1c <udp_new_port+0x68>)
 800eec0:	881b      	ldrh	r3, [r3, #0]
 800eec2:	1c5a      	adds	r2, r3, #1
 800eec4:	b291      	uxth	r1, r2
 800eec6:	4a15      	ldr	r2, [pc, #84]	; (800ef1c <udp_new_port+0x68>)
 800eec8:	8011      	strh	r1, [r2, #0]
 800eeca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eece:	4293      	cmp	r3, r2
 800eed0:	d103      	bne.n	800eeda <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800eed2:	4b12      	ldr	r3, [pc, #72]	; (800ef1c <udp_new_port+0x68>)
 800eed4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800eed8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eeda:	4b11      	ldr	r3, [pc, #68]	; (800ef20 <udp_new_port+0x6c>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	603b      	str	r3, [r7, #0]
 800eee0:	e011      	b.n	800ef06 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	8a5a      	ldrh	r2, [r3, #18]
 800eee6:	4b0d      	ldr	r3, [pc, #52]	; (800ef1c <udp_new_port+0x68>)
 800eee8:	881b      	ldrh	r3, [r3, #0]
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d108      	bne.n	800ef00 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800eeee:	88fb      	ldrh	r3, [r7, #6]
 800eef0:	3301      	adds	r3, #1
 800eef2:	80fb      	strh	r3, [r7, #6]
 800eef4:	88fb      	ldrh	r3, [r7, #6]
 800eef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eefa:	d3e0      	bcc.n	800eebe <udp_new_port+0xa>
        return 0;
 800eefc:	2300      	movs	r3, #0
 800eefe:	e007      	b.n	800ef10 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	603b      	str	r3, [r7, #0]
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d1ea      	bne.n	800eee2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ef0c:	4b03      	ldr	r3, [pc, #12]	; (800ef1c <udp_new_port+0x68>)
 800ef0e:	881b      	ldrh	r3, [r3, #0]
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	370c      	adds	r7, #12
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr
 800ef1c:	2000002c 	.word	0x2000002c
 800ef20:	2000aad4 	.word	0x2000aad4

0800ef24 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b084      	sub	sp, #16
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	60b9      	str	r1, [r7, #8]
 800ef2e:	4613      	mov	r3, r2
 800ef30:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d105      	bne.n	800ef44 <udp_input_local_match+0x20>
 800ef38:	4b27      	ldr	r3, [pc, #156]	; (800efd8 <udp_input_local_match+0xb4>)
 800ef3a:	2287      	movs	r2, #135	; 0x87
 800ef3c:	4927      	ldr	r1, [pc, #156]	; (800efdc <udp_input_local_match+0xb8>)
 800ef3e:	4828      	ldr	r0, [pc, #160]	; (800efe0 <udp_input_local_match+0xbc>)
 800ef40:	f003 f948 	bl	80121d4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d105      	bne.n	800ef56 <udp_input_local_match+0x32>
 800ef4a:	4b23      	ldr	r3, [pc, #140]	; (800efd8 <udp_input_local_match+0xb4>)
 800ef4c:	2288      	movs	r2, #136	; 0x88
 800ef4e:	4925      	ldr	r1, [pc, #148]	; (800efe4 <udp_input_local_match+0xc0>)
 800ef50:	4823      	ldr	r0, [pc, #140]	; (800efe0 <udp_input_local_match+0xbc>)
 800ef52:	f003 f93f 	bl	80121d4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	7a1b      	ldrb	r3, [r3, #8]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d00b      	beq.n	800ef76 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	7a1a      	ldrb	r2, [r3, #8]
 800ef62:	4b21      	ldr	r3, [pc, #132]	; (800efe8 <udp_input_local_match+0xc4>)
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d001      	beq.n	800ef76 <udp_input_local_match+0x52>
    return 0;
 800ef72:	2300      	movs	r3, #0
 800ef74:	e02b      	b.n	800efce <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ef76:	79fb      	ldrb	r3, [r7, #7]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d018      	beq.n	800efae <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d013      	beq.n	800efaa <udp_input_local_match+0x86>
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00f      	beq.n	800efaa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ef8a:	4b17      	ldr	r3, [pc, #92]	; (800efe8 <udp_input_local_match+0xc4>)
 800ef8c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ef8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef92:	d00a      	beq.n	800efaa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	681a      	ldr	r2, [r3, #0]
 800ef98:	4b13      	ldr	r3, [pc, #76]	; (800efe8 <udp_input_local_match+0xc4>)
 800ef9a:	695b      	ldr	r3, [r3, #20]
 800ef9c:	405a      	eors	r2, r3
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	3308      	adds	r3, #8
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d110      	bne.n	800efcc <udp_input_local_match+0xa8>
          return 1;
 800efaa:	2301      	movs	r3, #1
 800efac:	e00f      	b.n	800efce <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d009      	beq.n	800efc8 <udp_input_local_match+0xa4>
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d005      	beq.n	800efc8 <udp_input_local_match+0xa4>
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	4b09      	ldr	r3, [pc, #36]	; (800efe8 <udp_input_local_match+0xc4>)
 800efc2:	695b      	ldr	r3, [r3, #20]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d101      	bne.n	800efcc <udp_input_local_match+0xa8>
        return 1;
 800efc8:	2301      	movs	r3, #1
 800efca:	e000      	b.n	800efce <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800efcc:	2300      	movs	r3, #0
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3710      	adds	r7, #16
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
 800efd6:	bf00      	nop
 800efd8:	080166ec 	.word	0x080166ec
 800efdc:	0801671c 	.word	0x0801671c
 800efe0:	08016740 	.word	0x08016740
 800efe4:	08016768 	.word	0x08016768
 800efe8:	20005348 	.word	0x20005348

0800efec <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800efec:	b590      	push	{r4, r7, lr}
 800efee:	b08d      	sub	sp, #52	; 0x34
 800eff0:	af02      	add	r7, sp, #8
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800eff6:	2300      	movs	r3, #0
 800eff8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d105      	bne.n	800f00c <udp_input+0x20>
 800f000:	4b7c      	ldr	r3, [pc, #496]	; (800f1f4 <udp_input+0x208>)
 800f002:	22cf      	movs	r2, #207	; 0xcf
 800f004:	497c      	ldr	r1, [pc, #496]	; (800f1f8 <udp_input+0x20c>)
 800f006:	487d      	ldr	r0, [pc, #500]	; (800f1fc <udp_input+0x210>)
 800f008:	f003 f8e4 	bl	80121d4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d105      	bne.n	800f01e <udp_input+0x32>
 800f012:	4b78      	ldr	r3, [pc, #480]	; (800f1f4 <udp_input+0x208>)
 800f014:	22d0      	movs	r2, #208	; 0xd0
 800f016:	497a      	ldr	r1, [pc, #488]	; (800f200 <udp_input+0x214>)
 800f018:	4878      	ldr	r0, [pc, #480]	; (800f1fc <udp_input+0x210>)
 800f01a:	f003 f8db 	bl	80121d4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	895b      	ldrh	r3, [r3, #10]
 800f022:	2b07      	cmp	r3, #7
 800f024:	d803      	bhi.n	800f02e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f7fa f950 	bl	80092cc <pbuf_free>
    goto end;
 800f02c:	e0de      	b.n	800f1ec <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f034:	4b73      	ldr	r3, [pc, #460]	; (800f204 <udp_input+0x218>)
 800f036:	695b      	ldr	r3, [r3, #20]
 800f038:	4a72      	ldr	r2, [pc, #456]	; (800f204 <udp_input+0x218>)
 800f03a:	6812      	ldr	r2, [r2, #0]
 800f03c:	4611      	mov	r1, r2
 800f03e:	4618      	mov	r0, r3
 800f040:	f001 ffee 	bl	8011020 <ip4_addr_isbroadcast_u32>
 800f044:	4603      	mov	r3, r0
 800f046:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	881b      	ldrh	r3, [r3, #0]
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	4618      	mov	r0, r3
 800f050:	f7f8 fdde 	bl	8007c10 <lwip_htons>
 800f054:	4603      	mov	r3, r0
 800f056:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	885b      	ldrh	r3, [r3, #2]
 800f05c:	b29b      	uxth	r3, r3
 800f05e:	4618      	mov	r0, r3
 800f060:	f7f8 fdd6 	bl	8007c10 <lwip_htons>
 800f064:	4603      	mov	r3, r0
 800f066:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f068:	2300      	movs	r3, #0
 800f06a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f06c:	2300      	movs	r3, #0
 800f06e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f070:	2300      	movs	r3, #0
 800f072:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f074:	4b64      	ldr	r3, [pc, #400]	; (800f208 <udp_input+0x21c>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	627b      	str	r3, [r7, #36]	; 0x24
 800f07a:	e054      	b.n	800f126 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07e:	8a5b      	ldrh	r3, [r3, #18]
 800f080:	89fa      	ldrh	r2, [r7, #14]
 800f082:	429a      	cmp	r2, r3
 800f084:	d14a      	bne.n	800f11c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f086:	7cfb      	ldrb	r3, [r7, #19]
 800f088:	461a      	mov	r2, r3
 800f08a:	6839      	ldr	r1, [r7, #0]
 800f08c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f08e:	f7ff ff49 	bl	800ef24 <udp_input_local_match>
 800f092:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f094:	2b00      	cmp	r3, #0
 800f096:	d041      	beq.n	800f11c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09a:	7c1b      	ldrb	r3, [r3, #16]
 800f09c:	f003 0304 	and.w	r3, r3, #4
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d11d      	bne.n	800f0e0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f0a4:	69fb      	ldr	r3, [r7, #28]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d102      	bne.n	800f0b0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ac:	61fb      	str	r3, [r7, #28]
 800f0ae:	e017      	b.n	800f0e0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f0b0:	7cfb      	ldrb	r3, [r7, #19]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d014      	beq.n	800f0e0 <udp_input+0xf4>
 800f0b6:	4b53      	ldr	r3, [pc, #332]	; (800f204 <udp_input+0x218>)
 800f0b8:	695b      	ldr	r3, [r3, #20]
 800f0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0be:	d10f      	bne.n	800f0e0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f0c0:	69fb      	ldr	r3, [r7, #28]
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	3304      	adds	r3, #4
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d008      	beq.n	800f0e0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d0:	681a      	ldr	r2, [r3, #0]
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	3304      	adds	r3, #4
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d101      	bne.n	800f0e0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0de:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e2:	8a9b      	ldrh	r3, [r3, #20]
 800f0e4:	8a3a      	ldrh	r2, [r7, #16]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d118      	bne.n	800f11c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ec:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d005      	beq.n	800f0fe <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f4:	685a      	ldr	r2, [r3, #4]
 800f0f6:	4b43      	ldr	r3, [pc, #268]	; (800f204 <udp_input+0x218>)
 800f0f8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d10e      	bne.n	800f11c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f0fe:	6a3b      	ldr	r3, [r7, #32]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d014      	beq.n	800f12e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f106:	68da      	ldr	r2, [r3, #12]
 800f108:	6a3b      	ldr	r3, [r7, #32]
 800f10a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f10c:	4b3e      	ldr	r3, [pc, #248]	; (800f208 <udp_input+0x21c>)
 800f10e:	681a      	ldr	r2, [r3, #0]
 800f110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f112:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f114:	4a3c      	ldr	r2, [pc, #240]	; (800f208 <udp_input+0x21c>)
 800f116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f118:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f11a:	e008      	b.n	800f12e <udp_input+0x142>
      }
    }

    prev = pcb;
 800f11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f122:	68db      	ldr	r3, [r3, #12]
 800f124:	627b      	str	r3, [r7, #36]	; 0x24
 800f126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1a7      	bne.n	800f07c <udp_input+0x90>
 800f12c:	e000      	b.n	800f130 <udp_input+0x144>
        break;
 800f12e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f132:	2b00      	cmp	r3, #0
 800f134:	d101      	bne.n	800f13a <udp_input+0x14e>
    pcb = uncon_pcb;
 800f136:	69fb      	ldr	r3, [r7, #28]
 800f138:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d002      	beq.n	800f146 <udp_input+0x15a>
    for_us = 1;
 800f140:	2301      	movs	r3, #1
 800f142:	76fb      	strb	r3, [r7, #27]
 800f144:	e00a      	b.n	800f15c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	3304      	adds	r3, #4
 800f14a:	681a      	ldr	r2, [r3, #0]
 800f14c:	4b2d      	ldr	r3, [pc, #180]	; (800f204 <udp_input+0x218>)
 800f14e:	695b      	ldr	r3, [r3, #20]
 800f150:	429a      	cmp	r2, r3
 800f152:	bf0c      	ite	eq
 800f154:	2301      	moveq	r3, #1
 800f156:	2300      	movne	r3, #0
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f15c:	7efb      	ldrb	r3, [r7, #27]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d041      	beq.n	800f1e6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f162:	2108      	movs	r1, #8
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f7fa f82b 	bl	80091c0 <pbuf_remove_header>
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d00a      	beq.n	800f186 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f170:	4b20      	ldr	r3, [pc, #128]	; (800f1f4 <udp_input+0x208>)
 800f172:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f176:	4925      	ldr	r1, [pc, #148]	; (800f20c <udp_input+0x220>)
 800f178:	4820      	ldr	r0, [pc, #128]	; (800f1fc <udp_input+0x210>)
 800f17a:	f003 f82b 	bl	80121d4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f7fa f8a4 	bl	80092cc <pbuf_free>
      goto end;
 800f184:	e032      	b.n	800f1ec <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d012      	beq.n	800f1b2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18e:	699b      	ldr	r3, [r3, #24]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d00a      	beq.n	800f1aa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f196:	699c      	ldr	r4, [r3, #24]
 800f198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19a:	69d8      	ldr	r0, [r3, #28]
 800f19c:	8a3b      	ldrh	r3, [r7, #16]
 800f19e:	9300      	str	r3, [sp, #0]
 800f1a0:	4b1b      	ldr	r3, [pc, #108]	; (800f210 <udp_input+0x224>)
 800f1a2:	687a      	ldr	r2, [r7, #4]
 800f1a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f1a6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f1a8:	e021      	b.n	800f1ee <udp_input+0x202>
        pbuf_free(p);
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f7fa f88e 	bl	80092cc <pbuf_free>
        goto end;
 800f1b0:	e01c      	b.n	800f1ec <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f1b2:	7cfb      	ldrb	r3, [r7, #19]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d112      	bne.n	800f1de <udp_input+0x1f2>
 800f1b8:	4b12      	ldr	r3, [pc, #72]	; (800f204 <udp_input+0x218>)
 800f1ba:	695b      	ldr	r3, [r3, #20]
 800f1bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1c0:	2be0      	cmp	r3, #224	; 0xe0
 800f1c2:	d00c      	beq.n	800f1de <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f1c4:	4b0f      	ldr	r3, [pc, #60]	; (800f204 <udp_input+0x218>)
 800f1c6:	899b      	ldrh	r3, [r3, #12]
 800f1c8:	3308      	adds	r3, #8
 800f1ca:	b29b      	uxth	r3, r3
 800f1cc:	b21b      	sxth	r3, r3
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f7fa f868 	bl	80092a6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f1d6:	2103      	movs	r1, #3
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f001 fc01 	bl	80109e0 <icmp_dest_unreach>
      pbuf_free(p);
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f7fa f874 	bl	80092cc <pbuf_free>
  return;
 800f1e4:	e003      	b.n	800f1ee <udp_input+0x202>
    pbuf_free(p);
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f7fa f870 	bl	80092cc <pbuf_free>
  return;
 800f1ec:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f1ee:	372c      	adds	r7, #44	; 0x2c
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd90      	pop	{r4, r7, pc}
 800f1f4:	080166ec 	.word	0x080166ec
 800f1f8:	08016790 	.word	0x08016790
 800f1fc:	08016740 	.word	0x08016740
 800f200:	080167a8 	.word	0x080167a8
 800f204:	20005348 	.word	0x20005348
 800f208:	2000aad4 	.word	0x2000aad4
 800f20c:	080167c4 	.word	0x080167c4
 800f210:	20005358 	.word	0x20005358

0800f214 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d109      	bne.n	800f238 <udp_send+0x24>
 800f224:	4b11      	ldr	r3, [pc, #68]	; (800f26c <udp_send+0x58>)
 800f226:	f240 12d5 	movw	r2, #469	; 0x1d5
 800f22a:	4911      	ldr	r1, [pc, #68]	; (800f270 <udp_send+0x5c>)
 800f22c:	4811      	ldr	r0, [pc, #68]	; (800f274 <udp_send+0x60>)
 800f22e:	f002 ffd1 	bl	80121d4 <iprintf>
 800f232:	f06f 030f 	mvn.w	r3, #15
 800f236:	e015      	b.n	800f264 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d109      	bne.n	800f252 <udp_send+0x3e>
 800f23e:	4b0b      	ldr	r3, [pc, #44]	; (800f26c <udp_send+0x58>)
 800f240:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800f244:	490c      	ldr	r1, [pc, #48]	; (800f278 <udp_send+0x64>)
 800f246:	480b      	ldr	r0, [pc, #44]	; (800f274 <udp_send+0x60>)
 800f248:	f002 ffc4 	bl	80121d4 <iprintf>
 800f24c:	f06f 030f 	mvn.w	r3, #15
 800f250:	e008      	b.n	800f264 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	1d1a      	adds	r2, r3, #4
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	8a9b      	ldrh	r3, [r3, #20]
 800f25a:	6839      	ldr	r1, [r7, #0]
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f000 f80d 	bl	800f27c <udp_sendto>
 800f262:	4603      	mov	r3, r0
}
 800f264:	4618      	mov	r0, r3
 800f266:	3708      	adds	r7, #8
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	080166ec 	.word	0x080166ec
 800f270:	080167e0 	.word	0x080167e0
 800f274:	08016740 	.word	0x08016740
 800f278:	080167f8 	.word	0x080167f8

0800f27c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b088      	sub	sp, #32
 800f280:	af02      	add	r7, sp, #8
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	607a      	str	r2, [r7, #4]
 800f288:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d109      	bne.n	800f2a4 <udp_sendto+0x28>
 800f290:	4b23      	ldr	r3, [pc, #140]	; (800f320 <udp_sendto+0xa4>)
 800f292:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f296:	4923      	ldr	r1, [pc, #140]	; (800f324 <udp_sendto+0xa8>)
 800f298:	4823      	ldr	r0, [pc, #140]	; (800f328 <udp_sendto+0xac>)
 800f29a:	f002 ff9b 	bl	80121d4 <iprintf>
 800f29e:	f06f 030f 	mvn.w	r3, #15
 800f2a2:	e038      	b.n	800f316 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d109      	bne.n	800f2be <udp_sendto+0x42>
 800f2aa:	4b1d      	ldr	r3, [pc, #116]	; (800f320 <udp_sendto+0xa4>)
 800f2ac:	f240 2219 	movw	r2, #537	; 0x219
 800f2b0:	491e      	ldr	r1, [pc, #120]	; (800f32c <udp_sendto+0xb0>)
 800f2b2:	481d      	ldr	r0, [pc, #116]	; (800f328 <udp_sendto+0xac>)
 800f2b4:	f002 ff8e 	bl	80121d4 <iprintf>
 800f2b8:	f06f 030f 	mvn.w	r3, #15
 800f2bc:	e02b      	b.n	800f316 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d109      	bne.n	800f2d8 <udp_sendto+0x5c>
 800f2c4:	4b16      	ldr	r3, [pc, #88]	; (800f320 <udp_sendto+0xa4>)
 800f2c6:	f240 221a 	movw	r2, #538	; 0x21a
 800f2ca:	4919      	ldr	r1, [pc, #100]	; (800f330 <udp_sendto+0xb4>)
 800f2cc:	4816      	ldr	r0, [pc, #88]	; (800f328 <udp_sendto+0xac>)
 800f2ce:	f002 ff81 	bl	80121d4 <iprintf>
 800f2d2:	f06f 030f 	mvn.w	r3, #15
 800f2d6:	e01e      	b.n	800f316 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	7a1b      	ldrb	r3, [r3, #8]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d006      	beq.n	800f2ee <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	7a1b      	ldrb	r3, [r3, #8]
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7f9 fc91 	bl	8008c0c <netif_get_by_index>
 800f2ea:	6178      	str	r0, [r7, #20]
 800f2ec:	e003      	b.n	800f2f6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f001 fc00 	bl	8010af4 <ip4_route>
 800f2f4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d102      	bne.n	800f302 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800f2fc:	f06f 0303 	mvn.w	r3, #3
 800f300:	e009      	b.n	800f316 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800f302:	887a      	ldrh	r2, [r7, #2]
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	9300      	str	r3, [sp, #0]
 800f308:	4613      	mov	r3, r2
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	68b9      	ldr	r1, [r7, #8]
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	f000 f810 	bl	800f334 <udp_sendto_if>
 800f314:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f316:	4618      	mov	r0, r3
 800f318:	3718      	adds	r7, #24
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}
 800f31e:	bf00      	nop
 800f320:	080166ec 	.word	0x080166ec
 800f324:	08016810 	.word	0x08016810
 800f328:	08016740 	.word	0x08016740
 800f32c:	08016828 	.word	0x08016828
 800f330:	08016844 	.word	0x08016844

0800f334 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b088      	sub	sp, #32
 800f338:	af02      	add	r7, sp, #8
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]
 800f340:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d109      	bne.n	800f35c <udp_sendto_if+0x28>
 800f348:	4b2e      	ldr	r3, [pc, #184]	; (800f404 <udp_sendto_if+0xd0>)
 800f34a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f34e:	492e      	ldr	r1, [pc, #184]	; (800f408 <udp_sendto_if+0xd4>)
 800f350:	482e      	ldr	r0, [pc, #184]	; (800f40c <udp_sendto_if+0xd8>)
 800f352:	f002 ff3f 	bl	80121d4 <iprintf>
 800f356:	f06f 030f 	mvn.w	r3, #15
 800f35a:	e04f      	b.n	800f3fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d109      	bne.n	800f376 <udp_sendto_if+0x42>
 800f362:	4b28      	ldr	r3, [pc, #160]	; (800f404 <udp_sendto_if+0xd0>)
 800f364:	f240 2281 	movw	r2, #641	; 0x281
 800f368:	4929      	ldr	r1, [pc, #164]	; (800f410 <udp_sendto_if+0xdc>)
 800f36a:	4828      	ldr	r0, [pc, #160]	; (800f40c <udp_sendto_if+0xd8>)
 800f36c:	f002 ff32 	bl	80121d4 <iprintf>
 800f370:	f06f 030f 	mvn.w	r3, #15
 800f374:	e042      	b.n	800f3fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d109      	bne.n	800f390 <udp_sendto_if+0x5c>
 800f37c:	4b21      	ldr	r3, [pc, #132]	; (800f404 <udp_sendto_if+0xd0>)
 800f37e:	f240 2282 	movw	r2, #642	; 0x282
 800f382:	4924      	ldr	r1, [pc, #144]	; (800f414 <udp_sendto_if+0xe0>)
 800f384:	4821      	ldr	r0, [pc, #132]	; (800f40c <udp_sendto_if+0xd8>)
 800f386:	f002 ff25 	bl	80121d4 <iprintf>
 800f38a:	f06f 030f 	mvn.w	r3, #15
 800f38e:	e035      	b.n	800f3fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f390:	6a3b      	ldr	r3, [r7, #32]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d109      	bne.n	800f3aa <udp_sendto_if+0x76>
 800f396:	4b1b      	ldr	r3, [pc, #108]	; (800f404 <udp_sendto_if+0xd0>)
 800f398:	f240 2283 	movw	r2, #643	; 0x283
 800f39c:	491e      	ldr	r1, [pc, #120]	; (800f418 <udp_sendto_if+0xe4>)
 800f39e:	481b      	ldr	r0, [pc, #108]	; (800f40c <udp_sendto_if+0xd8>)
 800f3a0:	f002 ff18 	bl	80121d4 <iprintf>
 800f3a4:	f06f 030f 	mvn.w	r3, #15
 800f3a8:	e028      	b.n	800f3fc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d009      	beq.n	800f3c4 <udp_sendto_if+0x90>
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d005      	beq.n	800f3c4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f3c0:	2be0      	cmp	r3, #224	; 0xe0
 800f3c2:	d103      	bne.n	800f3cc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f3c4:	6a3b      	ldr	r3, [r7, #32]
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	617b      	str	r3, [r7, #20]
 800f3ca:	e00b      	b.n	800f3e4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	6a3b      	ldr	r3, [r7, #32]
 800f3d2:	3304      	adds	r3, #4
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d002      	beq.n	800f3e0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f3da:	f06f 0303 	mvn.w	r3, #3
 800f3de:	e00d      	b.n	800f3fc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f3e4:	887a      	ldrh	r2, [r7, #2]
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	9301      	str	r3, [sp, #4]
 800f3ea:	6a3b      	ldr	r3, [r7, #32]
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	4613      	mov	r3, r2
 800f3f0:	687a      	ldr	r2, [r7, #4]
 800f3f2:	68b9      	ldr	r1, [r7, #8]
 800f3f4:	68f8      	ldr	r0, [r7, #12]
 800f3f6:	f000 f811 	bl	800f41c <udp_sendto_if_src>
 800f3fa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3718      	adds	r7, #24
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}
 800f404:	080166ec 	.word	0x080166ec
 800f408:	08016860 	.word	0x08016860
 800f40c:	08016740 	.word	0x08016740
 800f410:	0801687c 	.word	0x0801687c
 800f414:	08016898 	.word	0x08016898
 800f418:	080168b8 	.word	0x080168b8

0800f41c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b08c      	sub	sp, #48	; 0x30
 800f420:	af04      	add	r7, sp, #16
 800f422:	60f8      	str	r0, [r7, #12]
 800f424:	60b9      	str	r1, [r7, #8]
 800f426:	607a      	str	r2, [r7, #4]
 800f428:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d109      	bne.n	800f444 <udp_sendto_if_src+0x28>
 800f430:	4b65      	ldr	r3, [pc, #404]	; (800f5c8 <udp_sendto_if_src+0x1ac>)
 800f432:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f436:	4965      	ldr	r1, [pc, #404]	; (800f5cc <udp_sendto_if_src+0x1b0>)
 800f438:	4865      	ldr	r0, [pc, #404]	; (800f5d0 <udp_sendto_if_src+0x1b4>)
 800f43a:	f002 fecb 	bl	80121d4 <iprintf>
 800f43e:	f06f 030f 	mvn.w	r3, #15
 800f442:	e0bc      	b.n	800f5be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d109      	bne.n	800f45e <udp_sendto_if_src+0x42>
 800f44a:	4b5f      	ldr	r3, [pc, #380]	; (800f5c8 <udp_sendto_if_src+0x1ac>)
 800f44c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f450:	4960      	ldr	r1, [pc, #384]	; (800f5d4 <udp_sendto_if_src+0x1b8>)
 800f452:	485f      	ldr	r0, [pc, #380]	; (800f5d0 <udp_sendto_if_src+0x1b4>)
 800f454:	f002 febe 	bl	80121d4 <iprintf>
 800f458:	f06f 030f 	mvn.w	r3, #15
 800f45c:	e0af      	b.n	800f5be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d109      	bne.n	800f478 <udp_sendto_if_src+0x5c>
 800f464:	4b58      	ldr	r3, [pc, #352]	; (800f5c8 <udp_sendto_if_src+0x1ac>)
 800f466:	f240 22d3 	movw	r2, #723	; 0x2d3
 800f46a:	495b      	ldr	r1, [pc, #364]	; (800f5d8 <udp_sendto_if_src+0x1bc>)
 800f46c:	4858      	ldr	r0, [pc, #352]	; (800f5d0 <udp_sendto_if_src+0x1b4>)
 800f46e:	f002 feb1 	bl	80121d4 <iprintf>
 800f472:	f06f 030f 	mvn.w	r3, #15
 800f476:	e0a2      	b.n	800f5be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d109      	bne.n	800f492 <udp_sendto_if_src+0x76>
 800f47e:	4b52      	ldr	r3, [pc, #328]	; (800f5c8 <udp_sendto_if_src+0x1ac>)
 800f480:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f484:	4955      	ldr	r1, [pc, #340]	; (800f5dc <udp_sendto_if_src+0x1c0>)
 800f486:	4852      	ldr	r0, [pc, #328]	; (800f5d0 <udp_sendto_if_src+0x1b4>)
 800f488:	f002 fea4 	bl	80121d4 <iprintf>
 800f48c:	f06f 030f 	mvn.w	r3, #15
 800f490:	e095      	b.n	800f5be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f494:	2b00      	cmp	r3, #0
 800f496:	d109      	bne.n	800f4ac <udp_sendto_if_src+0x90>
 800f498:	4b4b      	ldr	r3, [pc, #300]	; (800f5c8 <udp_sendto_if_src+0x1ac>)
 800f49a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800f49e:	4950      	ldr	r1, [pc, #320]	; (800f5e0 <udp_sendto_if_src+0x1c4>)
 800f4a0:	484b      	ldr	r0, [pc, #300]	; (800f5d0 <udp_sendto_if_src+0x1b4>)
 800f4a2:	f002 fe97 	bl	80121d4 <iprintf>
 800f4a6:	f06f 030f 	mvn.w	r3, #15
 800f4aa:	e088      	b.n	800f5be <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	8a5b      	ldrh	r3, [r3, #18]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d10f      	bne.n	800f4d4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f4b4:	68f9      	ldr	r1, [r7, #12]
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	8a5b      	ldrh	r3, [r3, #18]
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	68f8      	ldr	r0, [r7, #12]
 800f4be:	f000 f893 	bl	800f5e8 <udp_bind>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f4c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d002      	beq.n	800f4d4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f4ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f4d2:	e074      	b.n	800f5be <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	891b      	ldrh	r3, [r3, #8]
 800f4d8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d902      	bls.n	800f4e6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f4e4:	e06b      	b.n	800f5be <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f4e6:	2108      	movs	r1, #8
 800f4e8:	68b8      	ldr	r0, [r7, #8]
 800f4ea:	f7f9 fe59 	bl	80091a0 <pbuf_add_header>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d015      	beq.n	800f520 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f4f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f4f8:	2108      	movs	r1, #8
 800f4fa:	2022      	movs	r0, #34	; 0x22
 800f4fc:	f7f9 fc02 	bl	8008d04 <pbuf_alloc>
 800f500:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d102      	bne.n	800f50e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f508:	f04f 33ff 	mov.w	r3, #4294967295
 800f50c:	e057      	b.n	800f5be <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	891b      	ldrh	r3, [r3, #8]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d006      	beq.n	800f524 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f516:	68b9      	ldr	r1, [r7, #8]
 800f518:	69f8      	ldr	r0, [r7, #28]
 800f51a:	f7f9 ffef 	bl	80094fc <pbuf_chain>
 800f51e:	e001      	b.n	800f524 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f524:	69fb      	ldr	r3, [r7, #28]
 800f526:	895b      	ldrh	r3, [r3, #10]
 800f528:	2b07      	cmp	r3, #7
 800f52a:	d806      	bhi.n	800f53a <udp_sendto_if_src+0x11e>
 800f52c:	4b26      	ldr	r3, [pc, #152]	; (800f5c8 <udp_sendto_if_src+0x1ac>)
 800f52e:	f240 320d 	movw	r2, #781	; 0x30d
 800f532:	492c      	ldr	r1, [pc, #176]	; (800f5e4 <udp_sendto_if_src+0x1c8>)
 800f534:	4826      	ldr	r0, [pc, #152]	; (800f5d0 <udp_sendto_if_src+0x1b4>)
 800f536:	f002 fe4d 	bl	80121d4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	8a5b      	ldrh	r3, [r3, #18]
 800f544:	4618      	mov	r0, r3
 800f546:	f7f8 fb63 	bl	8007c10 <lwip_htons>
 800f54a:	4603      	mov	r3, r0
 800f54c:	461a      	mov	r2, r3
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f552:	887b      	ldrh	r3, [r7, #2]
 800f554:	4618      	mov	r0, r3
 800f556:	f7f8 fb5b 	bl	8007c10 <lwip_htons>
 800f55a:	4603      	mov	r3, r0
 800f55c:	461a      	mov	r2, r3
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	2200      	movs	r2, #0
 800f566:	719a      	strb	r2, [r3, #6]
 800f568:	2200      	movs	r2, #0
 800f56a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	891b      	ldrh	r3, [r3, #8]
 800f570:	4618      	mov	r0, r3
 800f572:	f7f8 fb4d 	bl	8007c10 <lwip_htons>
 800f576:	4603      	mov	r3, r0
 800f578:	461a      	mov	r2, r3
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f57e:	2311      	movs	r3, #17
 800f580:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	7adb      	ldrb	r3, [r3, #11]
 800f586:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	7a9b      	ldrb	r3, [r3, #10]
 800f58c:	7cb9      	ldrb	r1, [r7, #18]
 800f58e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f590:	9202      	str	r2, [sp, #8]
 800f592:	7cfa      	ldrb	r2, [r7, #19]
 800f594:	9201      	str	r2, [sp, #4]
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	460b      	mov	r3, r1
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f59e:	69f8      	ldr	r0, [r7, #28]
 800f5a0:	f001 fc90 	bl	8010ec4 <ip4_output_if_src>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f5a8:	69fa      	ldr	r2, [r7, #28]
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	d004      	beq.n	800f5ba <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800f5b0:	69f8      	ldr	r0, [r7, #28]
 800f5b2:	f7f9 fe8b 	bl	80092cc <pbuf_free>
    q = NULL;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f5ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3720      	adds	r7, #32
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	080166ec 	.word	0x080166ec
 800f5cc:	080168d8 	.word	0x080168d8
 800f5d0:	08016740 	.word	0x08016740
 800f5d4:	080168f8 	.word	0x080168f8
 800f5d8:	08016918 	.word	0x08016918
 800f5dc:	0801693c 	.word	0x0801693c
 800f5e0:	08016960 	.word	0x08016960
 800f5e4:	08016984 	.word	0x08016984

0800f5e8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b086      	sub	sp, #24
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	60b9      	str	r1, [r7, #8]
 800f5f2:	4613      	mov	r3, r2
 800f5f4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d101      	bne.n	800f600 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f5fc:	4b39      	ldr	r3, [pc, #228]	; (800f6e4 <udp_bind+0xfc>)
 800f5fe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d109      	bne.n	800f61a <udp_bind+0x32>
 800f606:	4b38      	ldr	r3, [pc, #224]	; (800f6e8 <udp_bind+0x100>)
 800f608:	f240 32b7 	movw	r2, #951	; 0x3b7
 800f60c:	4937      	ldr	r1, [pc, #220]	; (800f6ec <udp_bind+0x104>)
 800f60e:	4838      	ldr	r0, [pc, #224]	; (800f6f0 <udp_bind+0x108>)
 800f610:	f002 fde0 	bl	80121d4 <iprintf>
 800f614:	f06f 030f 	mvn.w	r3, #15
 800f618:	e060      	b.n	800f6dc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f61a:	2300      	movs	r3, #0
 800f61c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f61e:	4b35      	ldr	r3, [pc, #212]	; (800f6f4 <udp_bind+0x10c>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	617b      	str	r3, [r7, #20]
 800f624:	e009      	b.n	800f63a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f626:	68fa      	ldr	r2, [r7, #12]
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d102      	bne.n	800f634 <udp_bind+0x4c>
      rebind = 1;
 800f62e:	2301      	movs	r3, #1
 800f630:	74fb      	strb	r3, [r7, #19]
      break;
 800f632:	e005      	b.n	800f640 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	617b      	str	r3, [r7, #20]
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d1f2      	bne.n	800f626 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f640:	88fb      	ldrh	r3, [r7, #6]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d109      	bne.n	800f65a <udp_bind+0x72>
    port = udp_new_port();
 800f646:	f7ff fc35 	bl	800eeb4 <udp_new_port>
 800f64a:	4603      	mov	r3, r0
 800f64c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f64e:	88fb      	ldrh	r3, [r7, #6]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d12c      	bne.n	800f6ae <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f654:	f06f 0307 	mvn.w	r3, #7
 800f658:	e040      	b.n	800f6dc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f65a:	4b26      	ldr	r3, [pc, #152]	; (800f6f4 <udp_bind+0x10c>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	617b      	str	r3, [r7, #20]
 800f660:	e022      	b.n	800f6a8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800f662:	68fa      	ldr	r2, [r7, #12]
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	429a      	cmp	r2, r3
 800f668:	d01b      	beq.n	800f6a2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	8a5b      	ldrh	r3, [r3, #18]
 800f66e:	88fa      	ldrh	r2, [r7, #6]
 800f670:	429a      	cmp	r2, r3
 800f672:	d116      	bne.n	800f6a2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f67c:	429a      	cmp	r2, r3
 800f67e:	d00d      	beq.n	800f69c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d00a      	beq.n	800f69c <udp_bind+0xb4>
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d006      	beq.n	800f69c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f68e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f690:	2b00      	cmp	r3, #0
 800f692:	d003      	beq.n	800f69c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d102      	bne.n	800f6a2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f69c:	f06f 0307 	mvn.w	r3, #7
 800f6a0:	e01c      	b.n	800f6dc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	68db      	ldr	r3, [r3, #12]
 800f6a6:	617b      	str	r3, [r7, #20]
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d1d9      	bne.n	800f662 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d002      	beq.n	800f6ba <udp_bind+0xd2>
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	e000      	b.n	800f6bc <udp_bind+0xd4>
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	68fa      	ldr	r2, [r7, #12]
 800f6be:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	88fa      	ldrh	r2, [r7, #6]
 800f6c4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f6c6:	7cfb      	ldrb	r3, [r7, #19]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d106      	bne.n	800f6da <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f6cc:	4b09      	ldr	r3, [pc, #36]	; (800f6f4 <udp_bind+0x10c>)
 800f6ce:	681a      	ldr	r2, [r3, #0]
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f6d4:	4a07      	ldr	r2, [pc, #28]	; (800f6f4 <udp_bind+0x10c>)
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f6da:	2300      	movs	r3, #0
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3718      	adds	r7, #24
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	08017214 	.word	0x08017214
 800f6e8:	080166ec 	.word	0x080166ec
 800f6ec:	080169b4 	.word	0x080169b4
 800f6f0:	08016740 	.word	0x08016740
 800f6f4:	2000aad4 	.word	0x2000aad4

0800f6f8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b086      	sub	sp, #24
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	4613      	mov	r3, r2
 800f704:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d109      	bne.n	800f720 <udp_connect+0x28>
 800f70c:	4b2c      	ldr	r3, [pc, #176]	; (800f7c0 <udp_connect+0xc8>)
 800f70e:	f240 4235 	movw	r2, #1077	; 0x435
 800f712:	492c      	ldr	r1, [pc, #176]	; (800f7c4 <udp_connect+0xcc>)
 800f714:	482c      	ldr	r0, [pc, #176]	; (800f7c8 <udp_connect+0xd0>)
 800f716:	f002 fd5d 	bl	80121d4 <iprintf>
 800f71a:	f06f 030f 	mvn.w	r3, #15
 800f71e:	e04b      	b.n	800f7b8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d109      	bne.n	800f73a <udp_connect+0x42>
 800f726:	4b26      	ldr	r3, [pc, #152]	; (800f7c0 <udp_connect+0xc8>)
 800f728:	f240 4236 	movw	r2, #1078	; 0x436
 800f72c:	4927      	ldr	r1, [pc, #156]	; (800f7cc <udp_connect+0xd4>)
 800f72e:	4826      	ldr	r0, [pc, #152]	; (800f7c8 <udp_connect+0xd0>)
 800f730:	f002 fd50 	bl	80121d4 <iprintf>
 800f734:	f06f 030f 	mvn.w	r3, #15
 800f738:	e03e      	b.n	800f7b8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	8a5b      	ldrh	r3, [r3, #18]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d10f      	bne.n	800f762 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f742:	68f9      	ldr	r1, [r7, #12]
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	8a5b      	ldrh	r3, [r3, #18]
 800f748:	461a      	mov	r2, r3
 800f74a:	68f8      	ldr	r0, [r7, #12]
 800f74c:	f7ff ff4c 	bl	800f5e8 <udp_bind>
 800f750:	4603      	mov	r3, r0
 800f752:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f754:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d002      	beq.n	800f762 <udp_connect+0x6a>
      return err;
 800f75c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f760:	e02a      	b.n	800f7b8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d002      	beq.n	800f76e <udp_connect+0x76>
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	e000      	b.n	800f770 <udp_connect+0x78>
 800f76e:	2300      	movs	r3, #0
 800f770:	68fa      	ldr	r2, [r7, #12]
 800f772:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	88fa      	ldrh	r2, [r7, #6]
 800f778:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	7c1b      	ldrb	r3, [r3, #16]
 800f77e:	f043 0304 	orr.w	r3, r3, #4
 800f782:	b2da      	uxtb	r2, r3
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f788:	4b11      	ldr	r3, [pc, #68]	; (800f7d0 <udp_connect+0xd8>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	617b      	str	r3, [r7, #20]
 800f78e:	e008      	b.n	800f7a2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800f790:	68fa      	ldr	r2, [r7, #12]
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	429a      	cmp	r2, r3
 800f796:	d101      	bne.n	800f79c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800f798:	2300      	movs	r3, #0
 800f79a:	e00d      	b.n	800f7b8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	617b      	str	r3, [r7, #20]
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d1f3      	bne.n	800f790 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f7a8:	4b09      	ldr	r3, [pc, #36]	; (800f7d0 <udp_connect+0xd8>)
 800f7aa:	681a      	ldr	r2, [r3, #0]
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f7b0:	4a07      	ldr	r2, [pc, #28]	; (800f7d0 <udp_connect+0xd8>)
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f7b6:	2300      	movs	r3, #0
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3718      	adds	r7, #24
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}
 800f7c0:	080166ec 	.word	0x080166ec
 800f7c4:	080169cc 	.word	0x080169cc
 800f7c8:	08016740 	.word	0x08016740
 800f7cc:	080169e8 	.word	0x080169e8
 800f7d0:	2000aad4 	.word	0x2000aad4

0800f7d4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b084      	sub	sp, #16
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	60b9      	str	r1, [r7, #8]
 800f7de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d107      	bne.n	800f7f6 <udp_recv+0x22>
 800f7e6:	4b08      	ldr	r3, [pc, #32]	; (800f808 <udp_recv+0x34>)
 800f7e8:	f240 428a 	movw	r2, #1162	; 0x48a
 800f7ec:	4907      	ldr	r1, [pc, #28]	; (800f80c <udp_recv+0x38>)
 800f7ee:	4808      	ldr	r0, [pc, #32]	; (800f810 <udp_recv+0x3c>)
 800f7f0:	f002 fcf0 	bl	80121d4 <iprintf>
 800f7f4:	e005      	b.n	800f802 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	68ba      	ldr	r2, [r7, #8]
 800f7fa:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	61da      	str	r2, [r3, #28]
}
 800f802:	3710      	adds	r7, #16
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}
 800f808:	080166ec 	.word	0x080166ec
 800f80c:	08016a20 	.word	0x08016a20
 800f810:	08016740 	.word	0x08016740

0800f814 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b084      	sub	sp, #16
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d107      	bne.n	800f832 <udp_remove+0x1e>
 800f822:	4b19      	ldr	r3, [pc, #100]	; (800f888 <udp_remove+0x74>)
 800f824:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800f828:	4918      	ldr	r1, [pc, #96]	; (800f88c <udp_remove+0x78>)
 800f82a:	4819      	ldr	r0, [pc, #100]	; (800f890 <udp_remove+0x7c>)
 800f82c:	f002 fcd2 	bl	80121d4 <iprintf>
 800f830:	e026      	b.n	800f880 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f832:	4b18      	ldr	r3, [pc, #96]	; (800f894 <udp_remove+0x80>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	687a      	ldr	r2, [r7, #4]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d105      	bne.n	800f848 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f83c:	4b15      	ldr	r3, [pc, #84]	; (800f894 <udp_remove+0x80>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	4a14      	ldr	r2, [pc, #80]	; (800f894 <udp_remove+0x80>)
 800f844:	6013      	str	r3, [r2, #0]
 800f846:	e017      	b.n	800f878 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f848:	4b12      	ldr	r3, [pc, #72]	; (800f894 <udp_remove+0x80>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	60fb      	str	r3, [r7, #12]
 800f84e:	e010      	b.n	800f872 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d009      	beq.n	800f86c <udp_remove+0x58>
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	687a      	ldr	r2, [r7, #4]
 800f85e:	429a      	cmp	r2, r3
 800f860:	d104      	bne.n	800f86c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	68da      	ldr	r2, [r3, #12]
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	60da      	str	r2, [r3, #12]
        break;
 800f86a:	e005      	b.n	800f878 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	68db      	ldr	r3, [r3, #12]
 800f870:	60fb      	str	r3, [r7, #12]
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d1eb      	bne.n	800f850 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f878:	6879      	ldr	r1, [r7, #4]
 800f87a:	2000      	movs	r0, #0
 800f87c:	f7f8 feb0 	bl	80085e0 <memp_free>
}
 800f880:	3710      	adds	r7, #16
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	080166ec 	.word	0x080166ec
 800f88c:	08016a38 	.word	0x08016a38
 800f890:	08016740 	.word	0x08016740
 800f894:	2000aad4 	.word	0x2000aad4

0800f898 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f89e:	2000      	movs	r0, #0
 800f8a0:	f7f8 fe2e 	bl	8008500 <memp_malloc>
 800f8a4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d007      	beq.n	800f8bc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f8ac:	2220      	movs	r2, #32
 800f8ae:	2100      	movs	r1, #0
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f002 fcf6 	bl	80122a2 <memset>
    pcb->ttl = UDP_TTL;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	22ff      	movs	r2, #255	; 0xff
 800f8ba:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f8bc:	687b      	ldr	r3, [r7, #4]
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3708      	adds	r7, #8
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}

0800f8c6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800f8c6:	b580      	push	{r7, lr}
 800f8c8:	b084      	sub	sp, #16
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800f8d0:	f7ff ffe2 	bl	800f898 <udp_new>
 800f8d4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3710      	adds	r7, #16
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b085      	sub	sp, #20
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d01e      	beq.n	800f92e <udp_netif_ip_addr_changed+0x4e>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d01a      	beq.n	800f92e <udp_netif_ip_addr_changed+0x4e>
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d017      	beq.n	800f92e <udp_netif_ip_addr_changed+0x4e>
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d013      	beq.n	800f92e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f906:	4b0d      	ldr	r3, [pc, #52]	; (800f93c <udp_netif_ip_addr_changed+0x5c>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	60fb      	str	r3, [r7, #12]
 800f90c:	e00c      	b.n	800f928 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681a      	ldr	r2, [r3, #0]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	429a      	cmp	r2, r3
 800f918:	d103      	bne.n	800f922 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	68db      	ldr	r3, [r3, #12]
 800f926:	60fb      	str	r3, [r7, #12]
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d1ef      	bne.n	800f90e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f92e:	bf00      	nop
 800f930:	3714      	adds	r7, #20
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr
 800f93a:	bf00      	nop
 800f93c:	2000aad4 	.word	0x2000aad4

0800f940 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f948:	4915      	ldr	r1, [pc, #84]	; (800f9a0 <etharp_free_entry+0x60>)
 800f94a:	687a      	ldr	r2, [r7, #4]
 800f94c:	4613      	mov	r3, r2
 800f94e:	005b      	lsls	r3, r3, #1
 800f950:	4413      	add	r3, r2
 800f952:	00db      	lsls	r3, r3, #3
 800f954:	440b      	add	r3, r1
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d013      	beq.n	800f984 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f95c:	4910      	ldr	r1, [pc, #64]	; (800f9a0 <etharp_free_entry+0x60>)
 800f95e:	687a      	ldr	r2, [r7, #4]
 800f960:	4613      	mov	r3, r2
 800f962:	005b      	lsls	r3, r3, #1
 800f964:	4413      	add	r3, r2
 800f966:	00db      	lsls	r3, r3, #3
 800f968:	440b      	add	r3, r1
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7f9 fcad 	bl	80092cc <pbuf_free>
    arp_table[i].q = NULL;
 800f972:	490b      	ldr	r1, [pc, #44]	; (800f9a0 <etharp_free_entry+0x60>)
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	4613      	mov	r3, r2
 800f978:	005b      	lsls	r3, r3, #1
 800f97a:	4413      	add	r3, r2
 800f97c:	00db      	lsls	r3, r3, #3
 800f97e:	440b      	add	r3, r1
 800f980:	2200      	movs	r2, #0
 800f982:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f984:	4906      	ldr	r1, [pc, #24]	; (800f9a0 <etharp_free_entry+0x60>)
 800f986:	687a      	ldr	r2, [r7, #4]
 800f988:	4613      	mov	r3, r2
 800f98a:	005b      	lsls	r3, r3, #1
 800f98c:	4413      	add	r3, r2
 800f98e:	00db      	lsls	r3, r3, #3
 800f990:	440b      	add	r3, r1
 800f992:	3314      	adds	r3, #20
 800f994:	2200      	movs	r2, #0
 800f996:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f998:	bf00      	nop
 800f99a:	3708      	adds	r7, #8
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	2000aad8 	.word	0x2000aad8

0800f9a4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b082      	sub	sp, #8
 800f9a8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	607b      	str	r3, [r7, #4]
 800f9ae:	e096      	b.n	800fade <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f9b0:	494f      	ldr	r1, [pc, #316]	; (800faf0 <etharp_tmr+0x14c>)
 800f9b2:	687a      	ldr	r2, [r7, #4]
 800f9b4:	4613      	mov	r3, r2
 800f9b6:	005b      	lsls	r3, r3, #1
 800f9b8:	4413      	add	r3, r2
 800f9ba:	00db      	lsls	r3, r3, #3
 800f9bc:	440b      	add	r3, r1
 800f9be:	3314      	adds	r3, #20
 800f9c0:	781b      	ldrb	r3, [r3, #0]
 800f9c2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f9c4:	78fb      	ldrb	r3, [r7, #3]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	f000 8086 	beq.w	800fad8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f9cc:	4948      	ldr	r1, [pc, #288]	; (800faf0 <etharp_tmr+0x14c>)
 800f9ce:	687a      	ldr	r2, [r7, #4]
 800f9d0:	4613      	mov	r3, r2
 800f9d2:	005b      	lsls	r3, r3, #1
 800f9d4:	4413      	add	r3, r2
 800f9d6:	00db      	lsls	r3, r3, #3
 800f9d8:	440b      	add	r3, r1
 800f9da:	3312      	adds	r3, #18
 800f9dc:	881b      	ldrh	r3, [r3, #0]
 800f9de:	3301      	adds	r3, #1
 800f9e0:	b298      	uxth	r0, r3
 800f9e2:	4943      	ldr	r1, [pc, #268]	; (800faf0 <etharp_tmr+0x14c>)
 800f9e4:	687a      	ldr	r2, [r7, #4]
 800f9e6:	4613      	mov	r3, r2
 800f9e8:	005b      	lsls	r3, r3, #1
 800f9ea:	4413      	add	r3, r2
 800f9ec:	00db      	lsls	r3, r3, #3
 800f9ee:	440b      	add	r3, r1
 800f9f0:	3312      	adds	r3, #18
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f9f6:	493e      	ldr	r1, [pc, #248]	; (800faf0 <etharp_tmr+0x14c>)
 800f9f8:	687a      	ldr	r2, [r7, #4]
 800f9fa:	4613      	mov	r3, r2
 800f9fc:	005b      	lsls	r3, r3, #1
 800f9fe:	4413      	add	r3, r2
 800fa00:	00db      	lsls	r3, r3, #3
 800fa02:	440b      	add	r3, r1
 800fa04:	3312      	adds	r3, #18
 800fa06:	881b      	ldrh	r3, [r3, #0]
 800fa08:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800fa0c:	d215      	bcs.n	800fa3a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fa0e:	4938      	ldr	r1, [pc, #224]	; (800faf0 <etharp_tmr+0x14c>)
 800fa10:	687a      	ldr	r2, [r7, #4]
 800fa12:	4613      	mov	r3, r2
 800fa14:	005b      	lsls	r3, r3, #1
 800fa16:	4413      	add	r3, r2
 800fa18:	00db      	lsls	r3, r3, #3
 800fa1a:	440b      	add	r3, r1
 800fa1c:	3314      	adds	r3, #20
 800fa1e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d10e      	bne.n	800fa42 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800fa24:	4932      	ldr	r1, [pc, #200]	; (800faf0 <etharp_tmr+0x14c>)
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	4613      	mov	r3, r2
 800fa2a:	005b      	lsls	r3, r3, #1
 800fa2c:	4413      	add	r3, r2
 800fa2e:	00db      	lsls	r3, r3, #3
 800fa30:	440b      	add	r3, r1
 800fa32:	3312      	adds	r3, #18
 800fa34:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fa36:	2b04      	cmp	r3, #4
 800fa38:	d903      	bls.n	800fa42 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f7ff ff80 	bl	800f940 <etharp_free_entry>
 800fa40:	e04a      	b.n	800fad8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800fa42:	492b      	ldr	r1, [pc, #172]	; (800faf0 <etharp_tmr+0x14c>)
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	4613      	mov	r3, r2
 800fa48:	005b      	lsls	r3, r3, #1
 800fa4a:	4413      	add	r3, r2
 800fa4c:	00db      	lsls	r3, r3, #3
 800fa4e:	440b      	add	r3, r1
 800fa50:	3314      	adds	r3, #20
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	2b03      	cmp	r3, #3
 800fa56:	d10a      	bne.n	800fa6e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800fa58:	4925      	ldr	r1, [pc, #148]	; (800faf0 <etharp_tmr+0x14c>)
 800fa5a:	687a      	ldr	r2, [r7, #4]
 800fa5c:	4613      	mov	r3, r2
 800fa5e:	005b      	lsls	r3, r3, #1
 800fa60:	4413      	add	r3, r2
 800fa62:	00db      	lsls	r3, r3, #3
 800fa64:	440b      	add	r3, r1
 800fa66:	3314      	adds	r3, #20
 800fa68:	2204      	movs	r2, #4
 800fa6a:	701a      	strb	r2, [r3, #0]
 800fa6c:	e034      	b.n	800fad8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800fa6e:	4920      	ldr	r1, [pc, #128]	; (800faf0 <etharp_tmr+0x14c>)
 800fa70:	687a      	ldr	r2, [r7, #4]
 800fa72:	4613      	mov	r3, r2
 800fa74:	005b      	lsls	r3, r3, #1
 800fa76:	4413      	add	r3, r2
 800fa78:	00db      	lsls	r3, r3, #3
 800fa7a:	440b      	add	r3, r1
 800fa7c:	3314      	adds	r3, #20
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	2b04      	cmp	r3, #4
 800fa82:	d10a      	bne.n	800fa9a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800fa84:	491a      	ldr	r1, [pc, #104]	; (800faf0 <etharp_tmr+0x14c>)
 800fa86:	687a      	ldr	r2, [r7, #4]
 800fa88:	4613      	mov	r3, r2
 800fa8a:	005b      	lsls	r3, r3, #1
 800fa8c:	4413      	add	r3, r2
 800fa8e:	00db      	lsls	r3, r3, #3
 800fa90:	440b      	add	r3, r1
 800fa92:	3314      	adds	r3, #20
 800fa94:	2202      	movs	r2, #2
 800fa96:	701a      	strb	r2, [r3, #0]
 800fa98:	e01e      	b.n	800fad8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fa9a:	4915      	ldr	r1, [pc, #84]	; (800faf0 <etharp_tmr+0x14c>)
 800fa9c:	687a      	ldr	r2, [r7, #4]
 800fa9e:	4613      	mov	r3, r2
 800faa0:	005b      	lsls	r3, r3, #1
 800faa2:	4413      	add	r3, r2
 800faa4:	00db      	lsls	r3, r3, #3
 800faa6:	440b      	add	r3, r1
 800faa8:	3314      	adds	r3, #20
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	2b01      	cmp	r3, #1
 800faae:	d113      	bne.n	800fad8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800fab0:	490f      	ldr	r1, [pc, #60]	; (800faf0 <etharp_tmr+0x14c>)
 800fab2:	687a      	ldr	r2, [r7, #4]
 800fab4:	4613      	mov	r3, r2
 800fab6:	005b      	lsls	r3, r3, #1
 800fab8:	4413      	add	r3, r2
 800faba:	00db      	lsls	r3, r3, #3
 800fabc:	440b      	add	r3, r1
 800fabe:	3308      	adds	r3, #8
 800fac0:	6818      	ldr	r0, [r3, #0]
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	4613      	mov	r3, r2
 800fac6:	005b      	lsls	r3, r3, #1
 800fac8:	4413      	add	r3, r2
 800faca:	00db      	lsls	r3, r3, #3
 800facc:	4a08      	ldr	r2, [pc, #32]	; (800faf0 <etharp_tmr+0x14c>)
 800face:	4413      	add	r3, r2
 800fad0:	3304      	adds	r3, #4
 800fad2:	4619      	mov	r1, r3
 800fad4:	f000 fe6e 	bl	80107b4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	3301      	adds	r3, #1
 800fadc:	607b      	str	r3, [r7, #4]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2b09      	cmp	r3, #9
 800fae2:	f77f af65 	ble.w	800f9b0 <etharp_tmr+0xc>
      }
    }
  }
}
 800fae6:	bf00      	nop
 800fae8:	bf00      	nop
 800faea:	3708      	adds	r7, #8
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}
 800faf0:	2000aad8 	.word	0x2000aad8

0800faf4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b08a      	sub	sp, #40	; 0x28
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	460b      	mov	r3, r1
 800fafe:	607a      	str	r2, [r7, #4]
 800fb00:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800fb02:	230a      	movs	r3, #10
 800fb04:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb06:	230a      	movs	r3, #10
 800fb08:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800fb0a:	230a      	movs	r3, #10
 800fb0c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800fb12:	230a      	movs	r3, #10
 800fb14:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800fb16:	2300      	movs	r3, #0
 800fb18:	83bb      	strh	r3, [r7, #28]
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	837b      	strh	r3, [r7, #26]
 800fb1e:	2300      	movs	r3, #0
 800fb20:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fb22:	2300      	movs	r3, #0
 800fb24:	843b      	strh	r3, [r7, #32]
 800fb26:	e0ae      	b.n	800fc86 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800fb28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb2c:	49a6      	ldr	r1, [pc, #664]	; (800fdc8 <etharp_find_entry+0x2d4>)
 800fb2e:	4613      	mov	r3, r2
 800fb30:	005b      	lsls	r3, r3, #1
 800fb32:	4413      	add	r3, r2
 800fb34:	00db      	lsls	r3, r3, #3
 800fb36:	440b      	add	r3, r1
 800fb38:	3314      	adds	r3, #20
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800fb3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fb42:	2b0a      	cmp	r3, #10
 800fb44:	d105      	bne.n	800fb52 <etharp_find_entry+0x5e>
 800fb46:	7dfb      	ldrb	r3, [r7, #23]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d102      	bne.n	800fb52 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800fb4c:	8c3b      	ldrh	r3, [r7, #32]
 800fb4e:	847b      	strh	r3, [r7, #34]	; 0x22
 800fb50:	e095      	b.n	800fc7e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800fb52:	7dfb      	ldrb	r3, [r7, #23]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	f000 8092 	beq.w	800fc7e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800fb5a:	7dfb      	ldrb	r3, [r7, #23]
 800fb5c:	2b01      	cmp	r3, #1
 800fb5e:	d009      	beq.n	800fb74 <etharp_find_entry+0x80>
 800fb60:	7dfb      	ldrb	r3, [r7, #23]
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	d806      	bhi.n	800fb74 <etharp_find_entry+0x80>
 800fb66:	4b99      	ldr	r3, [pc, #612]	; (800fdcc <etharp_find_entry+0x2d8>)
 800fb68:	f240 1223 	movw	r2, #291	; 0x123
 800fb6c:	4998      	ldr	r1, [pc, #608]	; (800fdd0 <etharp_find_entry+0x2dc>)
 800fb6e:	4899      	ldr	r0, [pc, #612]	; (800fdd4 <etharp_find_entry+0x2e0>)
 800fb70:	f002 fb30 	bl	80121d4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d020      	beq.n	800fbbc <etharp_find_entry+0xc8>
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	6819      	ldr	r1, [r3, #0]
 800fb7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb82:	4891      	ldr	r0, [pc, #580]	; (800fdc8 <etharp_find_entry+0x2d4>)
 800fb84:	4613      	mov	r3, r2
 800fb86:	005b      	lsls	r3, r3, #1
 800fb88:	4413      	add	r3, r2
 800fb8a:	00db      	lsls	r3, r3, #3
 800fb8c:	4403      	add	r3, r0
 800fb8e:	3304      	adds	r3, #4
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	4299      	cmp	r1, r3
 800fb94:	d112      	bne.n	800fbbc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d00c      	beq.n	800fbb6 <etharp_find_entry+0xc2>
 800fb9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fba0:	4989      	ldr	r1, [pc, #548]	; (800fdc8 <etharp_find_entry+0x2d4>)
 800fba2:	4613      	mov	r3, r2
 800fba4:	005b      	lsls	r3, r3, #1
 800fba6:	4413      	add	r3, r2
 800fba8:	00db      	lsls	r3, r3, #3
 800fbaa:	440b      	add	r3, r1
 800fbac:	3308      	adds	r3, #8
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	687a      	ldr	r2, [r7, #4]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d102      	bne.n	800fbbc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800fbb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fbba:	e100      	b.n	800fdbe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800fbbc:	7dfb      	ldrb	r3, [r7, #23]
 800fbbe:	2b01      	cmp	r3, #1
 800fbc0:	d140      	bne.n	800fc44 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800fbc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fbc6:	4980      	ldr	r1, [pc, #512]	; (800fdc8 <etharp_find_entry+0x2d4>)
 800fbc8:	4613      	mov	r3, r2
 800fbca:	005b      	lsls	r3, r3, #1
 800fbcc:	4413      	add	r3, r2
 800fbce:	00db      	lsls	r3, r3, #3
 800fbd0:	440b      	add	r3, r1
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d01a      	beq.n	800fc0e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800fbd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fbdc:	497a      	ldr	r1, [pc, #488]	; (800fdc8 <etharp_find_entry+0x2d4>)
 800fbde:	4613      	mov	r3, r2
 800fbe0:	005b      	lsls	r3, r3, #1
 800fbe2:	4413      	add	r3, r2
 800fbe4:	00db      	lsls	r3, r3, #3
 800fbe6:	440b      	add	r3, r1
 800fbe8:	3312      	adds	r3, #18
 800fbea:	881b      	ldrh	r3, [r3, #0]
 800fbec:	8bba      	ldrh	r2, [r7, #28]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d845      	bhi.n	800fc7e <etharp_find_entry+0x18a>
            old_queue = i;
 800fbf2:	8c3b      	ldrh	r3, [r7, #32]
 800fbf4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800fbf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fbfa:	4973      	ldr	r1, [pc, #460]	; (800fdc8 <etharp_find_entry+0x2d4>)
 800fbfc:	4613      	mov	r3, r2
 800fbfe:	005b      	lsls	r3, r3, #1
 800fc00:	4413      	add	r3, r2
 800fc02:	00db      	lsls	r3, r3, #3
 800fc04:	440b      	add	r3, r1
 800fc06:	3312      	adds	r3, #18
 800fc08:	881b      	ldrh	r3, [r3, #0]
 800fc0a:	83bb      	strh	r3, [r7, #28]
 800fc0c:	e037      	b.n	800fc7e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800fc0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc12:	496d      	ldr	r1, [pc, #436]	; (800fdc8 <etharp_find_entry+0x2d4>)
 800fc14:	4613      	mov	r3, r2
 800fc16:	005b      	lsls	r3, r3, #1
 800fc18:	4413      	add	r3, r2
 800fc1a:	00db      	lsls	r3, r3, #3
 800fc1c:	440b      	add	r3, r1
 800fc1e:	3312      	adds	r3, #18
 800fc20:	881b      	ldrh	r3, [r3, #0]
 800fc22:	8b7a      	ldrh	r2, [r7, #26]
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d82a      	bhi.n	800fc7e <etharp_find_entry+0x18a>
            old_pending = i;
 800fc28:	8c3b      	ldrh	r3, [r7, #32]
 800fc2a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800fc2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc30:	4965      	ldr	r1, [pc, #404]	; (800fdc8 <etharp_find_entry+0x2d4>)
 800fc32:	4613      	mov	r3, r2
 800fc34:	005b      	lsls	r3, r3, #1
 800fc36:	4413      	add	r3, r2
 800fc38:	00db      	lsls	r3, r3, #3
 800fc3a:	440b      	add	r3, r1
 800fc3c:	3312      	adds	r3, #18
 800fc3e:	881b      	ldrh	r3, [r3, #0]
 800fc40:	837b      	strh	r3, [r7, #26]
 800fc42:	e01c      	b.n	800fc7e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800fc44:	7dfb      	ldrb	r3, [r7, #23]
 800fc46:	2b01      	cmp	r3, #1
 800fc48:	d919      	bls.n	800fc7e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800fc4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc4e:	495e      	ldr	r1, [pc, #376]	; (800fdc8 <etharp_find_entry+0x2d4>)
 800fc50:	4613      	mov	r3, r2
 800fc52:	005b      	lsls	r3, r3, #1
 800fc54:	4413      	add	r3, r2
 800fc56:	00db      	lsls	r3, r3, #3
 800fc58:	440b      	add	r3, r1
 800fc5a:	3312      	adds	r3, #18
 800fc5c:	881b      	ldrh	r3, [r3, #0]
 800fc5e:	8b3a      	ldrh	r2, [r7, #24]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d80c      	bhi.n	800fc7e <etharp_find_entry+0x18a>
            old_stable = i;
 800fc64:	8c3b      	ldrh	r3, [r7, #32]
 800fc66:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800fc68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc6c:	4956      	ldr	r1, [pc, #344]	; (800fdc8 <etharp_find_entry+0x2d4>)
 800fc6e:	4613      	mov	r3, r2
 800fc70:	005b      	lsls	r3, r3, #1
 800fc72:	4413      	add	r3, r2
 800fc74:	00db      	lsls	r3, r3, #3
 800fc76:	440b      	add	r3, r1
 800fc78:	3312      	adds	r3, #18
 800fc7a:	881b      	ldrh	r3, [r3, #0]
 800fc7c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fc7e:	8c3b      	ldrh	r3, [r7, #32]
 800fc80:	3301      	adds	r3, #1
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	843b      	strh	r3, [r7, #32]
 800fc86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fc8a:	2b09      	cmp	r3, #9
 800fc8c:	f77f af4c 	ble.w	800fb28 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800fc90:	7afb      	ldrb	r3, [r7, #11]
 800fc92:	f003 0302 	and.w	r3, r3, #2
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d108      	bne.n	800fcac <etharp_find_entry+0x1b8>
 800fc9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fc9e:	2b0a      	cmp	r3, #10
 800fca0:	d107      	bne.n	800fcb2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800fca2:	7afb      	ldrb	r3, [r7, #11]
 800fca4:	f003 0301 	and.w	r3, r3, #1
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d102      	bne.n	800fcb2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800fcac:	f04f 33ff 	mov.w	r3, #4294967295
 800fcb0:	e085      	b.n	800fdbe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800fcb2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fcb6:	2b09      	cmp	r3, #9
 800fcb8:	dc02      	bgt.n	800fcc0 <etharp_find_entry+0x1cc>
    i = empty;
 800fcba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fcbc:	843b      	strh	r3, [r7, #32]
 800fcbe:	e039      	b.n	800fd34 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800fcc0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fcc4:	2b09      	cmp	r3, #9
 800fcc6:	dc14      	bgt.n	800fcf2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800fcc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcca:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800fccc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fcd0:	493d      	ldr	r1, [pc, #244]	; (800fdc8 <etharp_find_entry+0x2d4>)
 800fcd2:	4613      	mov	r3, r2
 800fcd4:	005b      	lsls	r3, r3, #1
 800fcd6:	4413      	add	r3, r2
 800fcd8:	00db      	lsls	r3, r3, #3
 800fcda:	440b      	add	r3, r1
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d018      	beq.n	800fd14 <etharp_find_entry+0x220>
 800fce2:	4b3a      	ldr	r3, [pc, #232]	; (800fdcc <etharp_find_entry+0x2d8>)
 800fce4:	f240 126d 	movw	r2, #365	; 0x16d
 800fce8:	493b      	ldr	r1, [pc, #236]	; (800fdd8 <etharp_find_entry+0x2e4>)
 800fcea:	483a      	ldr	r0, [pc, #232]	; (800fdd4 <etharp_find_entry+0x2e0>)
 800fcec:	f002 fa72 	bl	80121d4 <iprintf>
 800fcf0:	e010      	b.n	800fd14 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800fcf2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fcf6:	2b09      	cmp	r3, #9
 800fcf8:	dc02      	bgt.n	800fd00 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800fcfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fcfc:	843b      	strh	r3, [r7, #32]
 800fcfe:	e009      	b.n	800fd14 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800fd00:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fd04:	2b09      	cmp	r3, #9
 800fd06:	dc02      	bgt.n	800fd0e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800fd08:	8bfb      	ldrh	r3, [r7, #30]
 800fd0a:	843b      	strh	r3, [r7, #32]
 800fd0c:	e002      	b.n	800fd14 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800fd0e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd12:	e054      	b.n	800fdbe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fd14:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fd18:	2b09      	cmp	r3, #9
 800fd1a:	dd06      	ble.n	800fd2a <etharp_find_entry+0x236>
 800fd1c:	4b2b      	ldr	r3, [pc, #172]	; (800fdcc <etharp_find_entry+0x2d8>)
 800fd1e:	f240 127f 	movw	r2, #383	; 0x17f
 800fd22:	492e      	ldr	r1, [pc, #184]	; (800fddc <etharp_find_entry+0x2e8>)
 800fd24:	482b      	ldr	r0, [pc, #172]	; (800fdd4 <etharp_find_entry+0x2e0>)
 800fd26:	f002 fa55 	bl	80121d4 <iprintf>
    etharp_free_entry(i);
 800fd2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7ff fe06 	bl	800f940 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fd34:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fd38:	2b09      	cmp	r3, #9
 800fd3a:	dd06      	ble.n	800fd4a <etharp_find_entry+0x256>
 800fd3c:	4b23      	ldr	r3, [pc, #140]	; (800fdcc <etharp_find_entry+0x2d8>)
 800fd3e:	f240 1283 	movw	r2, #387	; 0x183
 800fd42:	4926      	ldr	r1, [pc, #152]	; (800fddc <etharp_find_entry+0x2e8>)
 800fd44:	4823      	ldr	r0, [pc, #140]	; (800fdd4 <etharp_find_entry+0x2e0>)
 800fd46:	f002 fa45 	bl	80121d4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800fd4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd4e:	491e      	ldr	r1, [pc, #120]	; (800fdc8 <etharp_find_entry+0x2d4>)
 800fd50:	4613      	mov	r3, r2
 800fd52:	005b      	lsls	r3, r3, #1
 800fd54:	4413      	add	r3, r2
 800fd56:	00db      	lsls	r3, r3, #3
 800fd58:	440b      	add	r3, r1
 800fd5a:	3314      	adds	r3, #20
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d006      	beq.n	800fd70 <etharp_find_entry+0x27c>
 800fd62:	4b1a      	ldr	r3, [pc, #104]	; (800fdcc <etharp_find_entry+0x2d8>)
 800fd64:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800fd68:	491d      	ldr	r1, [pc, #116]	; (800fde0 <etharp_find_entry+0x2ec>)
 800fd6a:	481a      	ldr	r0, [pc, #104]	; (800fdd4 <etharp_find_entry+0x2e0>)
 800fd6c:	f002 fa32 	bl	80121d4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d00b      	beq.n	800fd8e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800fd76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	6819      	ldr	r1, [r3, #0]
 800fd7e:	4812      	ldr	r0, [pc, #72]	; (800fdc8 <etharp_find_entry+0x2d4>)
 800fd80:	4613      	mov	r3, r2
 800fd82:	005b      	lsls	r3, r3, #1
 800fd84:	4413      	add	r3, r2
 800fd86:	00db      	lsls	r3, r3, #3
 800fd88:	4403      	add	r3, r0
 800fd8a:	3304      	adds	r3, #4
 800fd8c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800fd8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd92:	490d      	ldr	r1, [pc, #52]	; (800fdc8 <etharp_find_entry+0x2d4>)
 800fd94:	4613      	mov	r3, r2
 800fd96:	005b      	lsls	r3, r3, #1
 800fd98:	4413      	add	r3, r2
 800fd9a:	00db      	lsls	r3, r3, #3
 800fd9c:	440b      	add	r3, r1
 800fd9e:	3312      	adds	r3, #18
 800fda0:	2200      	movs	r2, #0
 800fda2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800fda4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fda8:	4907      	ldr	r1, [pc, #28]	; (800fdc8 <etharp_find_entry+0x2d4>)
 800fdaa:	4613      	mov	r3, r2
 800fdac:	005b      	lsls	r3, r3, #1
 800fdae:	4413      	add	r3, r2
 800fdb0:	00db      	lsls	r3, r3, #3
 800fdb2:	440b      	add	r3, r1
 800fdb4:	3308      	adds	r3, #8
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800fdba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3728      	adds	r7, #40	; 0x28
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop
 800fdc8:	2000aad8 	.word	0x2000aad8
 800fdcc:	08016a50 	.word	0x08016a50
 800fdd0:	08016a88 	.word	0x08016a88
 800fdd4:	08016ac8 	.word	0x08016ac8
 800fdd8:	08016af0 	.word	0x08016af0
 800fddc:	08016b08 	.word	0x08016b08
 800fde0:	08016b1c 	.word	0x08016b1c

0800fde4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b088      	sub	sp, #32
 800fde8:	af02      	add	r7, sp, #8
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	607a      	str	r2, [r7, #4]
 800fdf0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fdf8:	2b06      	cmp	r3, #6
 800fdfa:	d006      	beq.n	800fe0a <etharp_update_arp_entry+0x26>
 800fdfc:	4b48      	ldr	r3, [pc, #288]	; (800ff20 <etharp_update_arp_entry+0x13c>)
 800fdfe:	f240 12a9 	movw	r2, #425	; 0x1a9
 800fe02:	4948      	ldr	r1, [pc, #288]	; (800ff24 <etharp_update_arp_entry+0x140>)
 800fe04:	4848      	ldr	r0, [pc, #288]	; (800ff28 <etharp_update_arp_entry+0x144>)
 800fe06:	f002 f9e5 	bl	80121d4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d012      	beq.n	800fe36 <etharp_update_arp_entry+0x52>
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d00e      	beq.n	800fe36 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	68f9      	ldr	r1, [r7, #12]
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f001 f8fe 	bl	8011020 <ip4_addr_isbroadcast_u32>
 800fe24:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d105      	bne.n	800fe36 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fe32:	2be0      	cmp	r3, #224	; 0xe0
 800fe34:	d102      	bne.n	800fe3c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fe36:	f06f 030f 	mvn.w	r3, #15
 800fe3a:	e06c      	b.n	800ff16 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800fe3c:	78fb      	ldrb	r3, [r7, #3]
 800fe3e:	68fa      	ldr	r2, [r7, #12]
 800fe40:	4619      	mov	r1, r3
 800fe42:	68b8      	ldr	r0, [r7, #8]
 800fe44:	f7ff fe56 	bl	800faf4 <etharp_find_entry>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800fe4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	da02      	bge.n	800fe5a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800fe54:	8afb      	ldrh	r3, [r7, #22]
 800fe56:	b25b      	sxtb	r3, r3
 800fe58:	e05d      	b.n	800ff16 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800fe5a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fe5e:	4933      	ldr	r1, [pc, #204]	; (800ff2c <etharp_update_arp_entry+0x148>)
 800fe60:	4613      	mov	r3, r2
 800fe62:	005b      	lsls	r3, r3, #1
 800fe64:	4413      	add	r3, r2
 800fe66:	00db      	lsls	r3, r3, #3
 800fe68:	440b      	add	r3, r1
 800fe6a:	3314      	adds	r3, #20
 800fe6c:	2202      	movs	r2, #2
 800fe6e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800fe70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fe74:	492d      	ldr	r1, [pc, #180]	; (800ff2c <etharp_update_arp_entry+0x148>)
 800fe76:	4613      	mov	r3, r2
 800fe78:	005b      	lsls	r3, r3, #1
 800fe7a:	4413      	add	r3, r2
 800fe7c:	00db      	lsls	r3, r3, #3
 800fe7e:	440b      	add	r3, r1
 800fe80:	3308      	adds	r3, #8
 800fe82:	68fa      	ldr	r2, [r7, #12]
 800fe84:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800fe86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fe8a:	4613      	mov	r3, r2
 800fe8c:	005b      	lsls	r3, r3, #1
 800fe8e:	4413      	add	r3, r2
 800fe90:	00db      	lsls	r3, r3, #3
 800fe92:	3308      	adds	r3, #8
 800fe94:	4a25      	ldr	r2, [pc, #148]	; (800ff2c <etharp_update_arp_entry+0x148>)
 800fe96:	4413      	add	r3, r2
 800fe98:	3304      	adds	r3, #4
 800fe9a:	2206      	movs	r2, #6
 800fe9c:	6879      	ldr	r1, [r7, #4]
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f003 f887 	bl	8012fb2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800fea4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fea8:	4920      	ldr	r1, [pc, #128]	; (800ff2c <etharp_update_arp_entry+0x148>)
 800feaa:	4613      	mov	r3, r2
 800feac:	005b      	lsls	r3, r3, #1
 800feae:	4413      	add	r3, r2
 800feb0:	00db      	lsls	r3, r3, #3
 800feb2:	440b      	add	r3, r1
 800feb4:	3312      	adds	r3, #18
 800feb6:	2200      	movs	r2, #0
 800feb8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800feba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800febe:	491b      	ldr	r1, [pc, #108]	; (800ff2c <etharp_update_arp_entry+0x148>)
 800fec0:	4613      	mov	r3, r2
 800fec2:	005b      	lsls	r3, r3, #1
 800fec4:	4413      	add	r3, r2
 800fec6:	00db      	lsls	r3, r3, #3
 800fec8:	440b      	add	r3, r1
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d021      	beq.n	800ff14 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800fed0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fed4:	4915      	ldr	r1, [pc, #84]	; (800ff2c <etharp_update_arp_entry+0x148>)
 800fed6:	4613      	mov	r3, r2
 800fed8:	005b      	lsls	r3, r3, #1
 800feda:	4413      	add	r3, r2
 800fedc:	00db      	lsls	r3, r3, #3
 800fede:	440b      	add	r3, r1
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800fee4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fee8:	4910      	ldr	r1, [pc, #64]	; (800ff2c <etharp_update_arp_entry+0x148>)
 800feea:	4613      	mov	r3, r2
 800feec:	005b      	lsls	r3, r3, #1
 800feee:	4413      	add	r3, r2
 800fef0:	00db      	lsls	r3, r3, #3
 800fef2:	440b      	add	r3, r1
 800fef4:	2200      	movs	r2, #0
 800fef6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800fefe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ff02:	9300      	str	r3, [sp, #0]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6939      	ldr	r1, [r7, #16]
 800ff08:	68f8      	ldr	r0, [r7, #12]
 800ff0a:	f001 ff97 	bl	8011e3c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ff0e:	6938      	ldr	r0, [r7, #16]
 800ff10:	f7f9 f9dc 	bl	80092cc <pbuf_free>
  }
  return ERR_OK;
 800ff14:	2300      	movs	r3, #0
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3718      	adds	r7, #24
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	08016a50 	.word	0x08016a50
 800ff24:	08016b48 	.word	0x08016b48
 800ff28:	08016ac8 	.word	0x08016ac8
 800ff2c:	2000aad8 	.word	0x2000aad8

0800ff30 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ff38:	2300      	movs	r3, #0
 800ff3a:	60fb      	str	r3, [r7, #12]
 800ff3c:	e01e      	b.n	800ff7c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ff3e:	4913      	ldr	r1, [pc, #76]	; (800ff8c <etharp_cleanup_netif+0x5c>)
 800ff40:	68fa      	ldr	r2, [r7, #12]
 800ff42:	4613      	mov	r3, r2
 800ff44:	005b      	lsls	r3, r3, #1
 800ff46:	4413      	add	r3, r2
 800ff48:	00db      	lsls	r3, r3, #3
 800ff4a:	440b      	add	r3, r1
 800ff4c:	3314      	adds	r3, #20
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ff52:	7afb      	ldrb	r3, [r7, #11]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d00e      	beq.n	800ff76 <etharp_cleanup_netif+0x46>
 800ff58:	490c      	ldr	r1, [pc, #48]	; (800ff8c <etharp_cleanup_netif+0x5c>)
 800ff5a:	68fa      	ldr	r2, [r7, #12]
 800ff5c:	4613      	mov	r3, r2
 800ff5e:	005b      	lsls	r3, r3, #1
 800ff60:	4413      	add	r3, r2
 800ff62:	00db      	lsls	r3, r3, #3
 800ff64:	440b      	add	r3, r1
 800ff66:	3308      	adds	r3, #8
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	687a      	ldr	r2, [r7, #4]
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d102      	bne.n	800ff76 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ff70:	68f8      	ldr	r0, [r7, #12]
 800ff72:	f7ff fce5 	bl	800f940 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	3301      	adds	r3, #1
 800ff7a:	60fb      	str	r3, [r7, #12]
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2b09      	cmp	r3, #9
 800ff80:	dddd      	ble.n	800ff3e <etharp_cleanup_netif+0xe>
    }
  }
}
 800ff82:	bf00      	nop
 800ff84:	bf00      	nop
 800ff86:	3710      	adds	r7, #16
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}
 800ff8c:	2000aad8 	.word	0x2000aad8

0800ff90 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ff90:	b5b0      	push	{r4, r5, r7, lr}
 800ff92:	b08a      	sub	sp, #40	; 0x28
 800ff94:	af04      	add	r7, sp, #16
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d107      	bne.n	800ffb0 <etharp_input+0x20>
 800ffa0:	4b3d      	ldr	r3, [pc, #244]	; (8010098 <etharp_input+0x108>)
 800ffa2:	f240 228a 	movw	r2, #650	; 0x28a
 800ffa6:	493d      	ldr	r1, [pc, #244]	; (801009c <etharp_input+0x10c>)
 800ffa8:	483d      	ldr	r0, [pc, #244]	; (80100a0 <etharp_input+0x110>)
 800ffaa:	f002 f913 	bl	80121d4 <iprintf>
 800ffae:	e06f      	b.n	8010090 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	881b      	ldrh	r3, [r3, #0]
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ffc0:	d10c      	bne.n	800ffdc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ffc6:	2b06      	cmp	r3, #6
 800ffc8:	d108      	bne.n	800ffdc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ffce:	2b04      	cmp	r3, #4
 800ffd0:	d104      	bne.n	800ffdc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	885b      	ldrh	r3, [r3, #2]
 800ffd6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ffd8:	2b08      	cmp	r3, #8
 800ffda:	d003      	beq.n	800ffe4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f7f9 f975 	bl	80092cc <pbuf_free>
    return;
 800ffe2:	e055      	b.n	8010090 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	330e      	adds	r3, #14
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	3318      	adds	r3, #24
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	3304      	adds	r3, #4
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d102      	bne.n	8010004 <etharp_input+0x74>
    for_us = 0;
 800fffe:	2300      	movs	r3, #0
 8010000:	75fb      	strb	r3, [r7, #23]
 8010002:	e009      	b.n	8010018 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010004:	68ba      	ldr	r2, [r7, #8]
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	3304      	adds	r3, #4
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	429a      	cmp	r2, r3
 801000e:	bf0c      	ite	eq
 8010010:	2301      	moveq	r3, #1
 8010012:	2300      	movne	r3, #0
 8010014:	b2db      	uxtb	r3, r3
 8010016:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	f103 0208 	add.w	r2, r3, #8
 801001e:	7dfb      	ldrb	r3, [r7, #23]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d001      	beq.n	8010028 <etharp_input+0x98>
 8010024:	2301      	movs	r3, #1
 8010026:	e000      	b.n	801002a <etharp_input+0x9a>
 8010028:	2302      	movs	r3, #2
 801002a:	f107 010c 	add.w	r1, r7, #12
 801002e:	6838      	ldr	r0, [r7, #0]
 8010030:	f7ff fed8 	bl	800fde4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	88db      	ldrh	r3, [r3, #6]
 8010038:	b29b      	uxth	r3, r3
 801003a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801003e:	d003      	beq.n	8010048 <etharp_input+0xb8>
 8010040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010044:	d01e      	beq.n	8010084 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010046:	e020      	b.n	801008a <etharp_input+0xfa>
      if (for_us) {
 8010048:	7dfb      	ldrb	r3, [r7, #23]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d01c      	beq.n	8010088 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010064:	693a      	ldr	r2, [r7, #16]
 8010066:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010068:	2102      	movs	r1, #2
 801006a:	9103      	str	r1, [sp, #12]
 801006c:	f107 010c 	add.w	r1, r7, #12
 8010070:	9102      	str	r1, [sp, #8]
 8010072:	9201      	str	r2, [sp, #4]
 8010074:	9300      	str	r3, [sp, #0]
 8010076:	462b      	mov	r3, r5
 8010078:	4622      	mov	r2, r4
 801007a:	4601      	mov	r1, r0
 801007c:	6838      	ldr	r0, [r7, #0]
 801007e:	f000 faeb 	bl	8010658 <etharp_raw>
      break;
 8010082:	e001      	b.n	8010088 <etharp_input+0xf8>
      break;
 8010084:	bf00      	nop
 8010086:	e000      	b.n	801008a <etharp_input+0xfa>
      break;
 8010088:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f7f9 f91e 	bl	80092cc <pbuf_free>
}
 8010090:	3718      	adds	r7, #24
 8010092:	46bd      	mov	sp, r7
 8010094:	bdb0      	pop	{r4, r5, r7, pc}
 8010096:	bf00      	nop
 8010098:	08016a50 	.word	0x08016a50
 801009c:	08016ba0 	.word	0x08016ba0
 80100a0:	08016ac8 	.word	0x08016ac8

080100a4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b086      	sub	sp, #24
 80100a8:	af02      	add	r7, sp, #8
 80100aa:	60f8      	str	r0, [r7, #12]
 80100ac:	60b9      	str	r1, [r7, #8]
 80100ae:	4613      	mov	r3, r2
 80100b0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80100b2:	79fa      	ldrb	r2, [r7, #7]
 80100b4:	4944      	ldr	r1, [pc, #272]	; (80101c8 <etharp_output_to_arp_index+0x124>)
 80100b6:	4613      	mov	r3, r2
 80100b8:	005b      	lsls	r3, r3, #1
 80100ba:	4413      	add	r3, r2
 80100bc:	00db      	lsls	r3, r3, #3
 80100be:	440b      	add	r3, r1
 80100c0:	3314      	adds	r3, #20
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d806      	bhi.n	80100d6 <etharp_output_to_arp_index+0x32>
 80100c8:	4b40      	ldr	r3, [pc, #256]	; (80101cc <etharp_output_to_arp_index+0x128>)
 80100ca:	f240 22ee 	movw	r2, #750	; 0x2ee
 80100ce:	4940      	ldr	r1, [pc, #256]	; (80101d0 <etharp_output_to_arp_index+0x12c>)
 80100d0:	4840      	ldr	r0, [pc, #256]	; (80101d4 <etharp_output_to_arp_index+0x130>)
 80100d2:	f002 f87f 	bl	80121d4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80100d6:	79fa      	ldrb	r2, [r7, #7]
 80100d8:	493b      	ldr	r1, [pc, #236]	; (80101c8 <etharp_output_to_arp_index+0x124>)
 80100da:	4613      	mov	r3, r2
 80100dc:	005b      	lsls	r3, r3, #1
 80100de:	4413      	add	r3, r2
 80100e0:	00db      	lsls	r3, r3, #3
 80100e2:	440b      	add	r3, r1
 80100e4:	3314      	adds	r3, #20
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	2b02      	cmp	r3, #2
 80100ea:	d153      	bne.n	8010194 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80100ec:	79fa      	ldrb	r2, [r7, #7]
 80100ee:	4936      	ldr	r1, [pc, #216]	; (80101c8 <etharp_output_to_arp_index+0x124>)
 80100f0:	4613      	mov	r3, r2
 80100f2:	005b      	lsls	r3, r3, #1
 80100f4:	4413      	add	r3, r2
 80100f6:	00db      	lsls	r3, r3, #3
 80100f8:	440b      	add	r3, r1
 80100fa:	3312      	adds	r3, #18
 80100fc:	881b      	ldrh	r3, [r3, #0]
 80100fe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010102:	d919      	bls.n	8010138 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010104:	79fa      	ldrb	r2, [r7, #7]
 8010106:	4613      	mov	r3, r2
 8010108:	005b      	lsls	r3, r3, #1
 801010a:	4413      	add	r3, r2
 801010c:	00db      	lsls	r3, r3, #3
 801010e:	4a2e      	ldr	r2, [pc, #184]	; (80101c8 <etharp_output_to_arp_index+0x124>)
 8010110:	4413      	add	r3, r2
 8010112:	3304      	adds	r3, #4
 8010114:	4619      	mov	r1, r3
 8010116:	68f8      	ldr	r0, [r7, #12]
 8010118:	f000 fb4c 	bl	80107b4 <etharp_request>
 801011c:	4603      	mov	r3, r0
 801011e:	2b00      	cmp	r3, #0
 8010120:	d138      	bne.n	8010194 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010122:	79fa      	ldrb	r2, [r7, #7]
 8010124:	4928      	ldr	r1, [pc, #160]	; (80101c8 <etharp_output_to_arp_index+0x124>)
 8010126:	4613      	mov	r3, r2
 8010128:	005b      	lsls	r3, r3, #1
 801012a:	4413      	add	r3, r2
 801012c:	00db      	lsls	r3, r3, #3
 801012e:	440b      	add	r3, r1
 8010130:	3314      	adds	r3, #20
 8010132:	2203      	movs	r2, #3
 8010134:	701a      	strb	r2, [r3, #0]
 8010136:	e02d      	b.n	8010194 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010138:	79fa      	ldrb	r2, [r7, #7]
 801013a:	4923      	ldr	r1, [pc, #140]	; (80101c8 <etharp_output_to_arp_index+0x124>)
 801013c:	4613      	mov	r3, r2
 801013e:	005b      	lsls	r3, r3, #1
 8010140:	4413      	add	r3, r2
 8010142:	00db      	lsls	r3, r3, #3
 8010144:	440b      	add	r3, r1
 8010146:	3312      	adds	r3, #18
 8010148:	881b      	ldrh	r3, [r3, #0]
 801014a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801014e:	d321      	bcc.n	8010194 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010150:	79fa      	ldrb	r2, [r7, #7]
 8010152:	4613      	mov	r3, r2
 8010154:	005b      	lsls	r3, r3, #1
 8010156:	4413      	add	r3, r2
 8010158:	00db      	lsls	r3, r3, #3
 801015a:	4a1b      	ldr	r2, [pc, #108]	; (80101c8 <etharp_output_to_arp_index+0x124>)
 801015c:	4413      	add	r3, r2
 801015e:	1d19      	adds	r1, r3, #4
 8010160:	79fa      	ldrb	r2, [r7, #7]
 8010162:	4613      	mov	r3, r2
 8010164:	005b      	lsls	r3, r3, #1
 8010166:	4413      	add	r3, r2
 8010168:	00db      	lsls	r3, r3, #3
 801016a:	3308      	adds	r3, #8
 801016c:	4a16      	ldr	r2, [pc, #88]	; (80101c8 <etharp_output_to_arp_index+0x124>)
 801016e:	4413      	add	r3, r2
 8010170:	3304      	adds	r3, #4
 8010172:	461a      	mov	r2, r3
 8010174:	68f8      	ldr	r0, [r7, #12]
 8010176:	f000 fafb 	bl	8010770 <etharp_request_dst>
 801017a:	4603      	mov	r3, r0
 801017c:	2b00      	cmp	r3, #0
 801017e:	d109      	bne.n	8010194 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010180:	79fa      	ldrb	r2, [r7, #7]
 8010182:	4911      	ldr	r1, [pc, #68]	; (80101c8 <etharp_output_to_arp_index+0x124>)
 8010184:	4613      	mov	r3, r2
 8010186:	005b      	lsls	r3, r3, #1
 8010188:	4413      	add	r3, r2
 801018a:	00db      	lsls	r3, r3, #3
 801018c:	440b      	add	r3, r1
 801018e:	3314      	adds	r3, #20
 8010190:	2203      	movs	r2, #3
 8010192:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801019a:	79fa      	ldrb	r2, [r7, #7]
 801019c:	4613      	mov	r3, r2
 801019e:	005b      	lsls	r3, r3, #1
 80101a0:	4413      	add	r3, r2
 80101a2:	00db      	lsls	r3, r3, #3
 80101a4:	3308      	adds	r3, #8
 80101a6:	4a08      	ldr	r2, [pc, #32]	; (80101c8 <etharp_output_to_arp_index+0x124>)
 80101a8:	4413      	add	r3, r2
 80101aa:	3304      	adds	r3, #4
 80101ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80101b0:	9200      	str	r2, [sp, #0]
 80101b2:	460a      	mov	r2, r1
 80101b4:	68b9      	ldr	r1, [r7, #8]
 80101b6:	68f8      	ldr	r0, [r7, #12]
 80101b8:	f001 fe40 	bl	8011e3c <ethernet_output>
 80101bc:	4603      	mov	r3, r0
}
 80101be:	4618      	mov	r0, r3
 80101c0:	3710      	adds	r7, #16
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}
 80101c6:	bf00      	nop
 80101c8:	2000aad8 	.word	0x2000aad8
 80101cc:	08016a50 	.word	0x08016a50
 80101d0:	08016bc0 	.word	0x08016bc0
 80101d4:	08016ac8 	.word	0x08016ac8

080101d8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b08a      	sub	sp, #40	; 0x28
 80101dc:	af02      	add	r7, sp, #8
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d106      	bne.n	80101fc <etharp_output+0x24>
 80101ee:	4b73      	ldr	r3, [pc, #460]	; (80103bc <etharp_output+0x1e4>)
 80101f0:	f240 321e 	movw	r2, #798	; 0x31e
 80101f4:	4972      	ldr	r1, [pc, #456]	; (80103c0 <etharp_output+0x1e8>)
 80101f6:	4873      	ldr	r0, [pc, #460]	; (80103c4 <etharp_output+0x1ec>)
 80101f8:	f001 ffec 	bl	80121d4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d106      	bne.n	8010210 <etharp_output+0x38>
 8010202:	4b6e      	ldr	r3, [pc, #440]	; (80103bc <etharp_output+0x1e4>)
 8010204:	f240 321f 	movw	r2, #799	; 0x31f
 8010208:	496f      	ldr	r1, [pc, #444]	; (80103c8 <etharp_output+0x1f0>)
 801020a:	486e      	ldr	r0, [pc, #440]	; (80103c4 <etharp_output+0x1ec>)
 801020c:	f001 ffe2 	bl	80121d4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d106      	bne.n	8010224 <etharp_output+0x4c>
 8010216:	4b69      	ldr	r3, [pc, #420]	; (80103bc <etharp_output+0x1e4>)
 8010218:	f44f 7248 	mov.w	r2, #800	; 0x320
 801021c:	496b      	ldr	r1, [pc, #428]	; (80103cc <etharp_output+0x1f4>)
 801021e:	4869      	ldr	r0, [pc, #420]	; (80103c4 <etharp_output+0x1ec>)
 8010220:	f001 ffd8 	bl	80121d4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	68f9      	ldr	r1, [r7, #12]
 801022a:	4618      	mov	r0, r3
 801022c:	f000 fef8 	bl	8011020 <ip4_addr_isbroadcast_u32>
 8010230:	4603      	mov	r3, r0
 8010232:	2b00      	cmp	r3, #0
 8010234:	d002      	beq.n	801023c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010236:	4b66      	ldr	r3, [pc, #408]	; (80103d0 <etharp_output+0x1f8>)
 8010238:	61fb      	str	r3, [r7, #28]
 801023a:	e0af      	b.n	801039c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010244:	2be0      	cmp	r3, #224	; 0xe0
 8010246:	d118      	bne.n	801027a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010248:	2301      	movs	r3, #1
 801024a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801024c:	2300      	movs	r3, #0
 801024e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010250:	235e      	movs	r3, #94	; 0x5e
 8010252:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	3301      	adds	r3, #1
 8010258:	781b      	ldrb	r3, [r3, #0]
 801025a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801025e:	b2db      	uxtb	r3, r3
 8010260:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	3302      	adds	r3, #2
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	3303      	adds	r3, #3
 801026e:	781b      	ldrb	r3, [r3, #0]
 8010270:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010272:	f107 0310 	add.w	r3, r7, #16
 8010276:	61fb      	str	r3, [r7, #28]
 8010278:	e090      	b.n	801039c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681a      	ldr	r2, [r3, #0]
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	3304      	adds	r3, #4
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	405a      	eors	r2, r3
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	3308      	adds	r3, #8
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	4013      	ands	r3, r2
 801028e:	2b00      	cmp	r3, #0
 8010290:	d012      	beq.n	80102b8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010298:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801029c:	4293      	cmp	r3, r2
 801029e:	d00b      	beq.n	80102b8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	330c      	adds	r3, #12
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d003      	beq.n	80102b2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	330c      	adds	r3, #12
 80102ae:	61bb      	str	r3, [r7, #24]
 80102b0:	e002      	b.n	80102b8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80102b2:	f06f 0303 	mvn.w	r3, #3
 80102b6:	e07d      	b.n	80103b4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80102b8:	4b46      	ldr	r3, [pc, #280]	; (80103d4 <etharp_output+0x1fc>)
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	4619      	mov	r1, r3
 80102be:	4a46      	ldr	r2, [pc, #280]	; (80103d8 <etharp_output+0x200>)
 80102c0:	460b      	mov	r3, r1
 80102c2:	005b      	lsls	r3, r3, #1
 80102c4:	440b      	add	r3, r1
 80102c6:	00db      	lsls	r3, r3, #3
 80102c8:	4413      	add	r3, r2
 80102ca:	3314      	adds	r3, #20
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	2b01      	cmp	r3, #1
 80102d0:	d925      	bls.n	801031e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80102d2:	4b40      	ldr	r3, [pc, #256]	; (80103d4 <etharp_output+0x1fc>)
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	4619      	mov	r1, r3
 80102d8:	4a3f      	ldr	r2, [pc, #252]	; (80103d8 <etharp_output+0x200>)
 80102da:	460b      	mov	r3, r1
 80102dc:	005b      	lsls	r3, r3, #1
 80102de:	440b      	add	r3, r1
 80102e0:	00db      	lsls	r3, r3, #3
 80102e2:	4413      	add	r3, r2
 80102e4:	3308      	adds	r3, #8
 80102e6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80102e8:	68fa      	ldr	r2, [r7, #12]
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d117      	bne.n	801031e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	4b38      	ldr	r3, [pc, #224]	; (80103d4 <etharp_output+0x1fc>)
 80102f4:	781b      	ldrb	r3, [r3, #0]
 80102f6:	4618      	mov	r0, r3
 80102f8:	4937      	ldr	r1, [pc, #220]	; (80103d8 <etharp_output+0x200>)
 80102fa:	4603      	mov	r3, r0
 80102fc:	005b      	lsls	r3, r3, #1
 80102fe:	4403      	add	r3, r0
 8010300:	00db      	lsls	r3, r3, #3
 8010302:	440b      	add	r3, r1
 8010304:	3304      	adds	r3, #4
 8010306:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010308:	429a      	cmp	r2, r3
 801030a:	d108      	bne.n	801031e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801030c:	4b31      	ldr	r3, [pc, #196]	; (80103d4 <etharp_output+0x1fc>)
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	461a      	mov	r2, r3
 8010312:	68b9      	ldr	r1, [r7, #8]
 8010314:	68f8      	ldr	r0, [r7, #12]
 8010316:	f7ff fec5 	bl	80100a4 <etharp_output_to_arp_index>
 801031a:	4603      	mov	r3, r0
 801031c:	e04a      	b.n	80103b4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801031e:	2300      	movs	r3, #0
 8010320:	75fb      	strb	r3, [r7, #23]
 8010322:	e031      	b.n	8010388 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010324:	7dfa      	ldrb	r2, [r7, #23]
 8010326:	492c      	ldr	r1, [pc, #176]	; (80103d8 <etharp_output+0x200>)
 8010328:	4613      	mov	r3, r2
 801032a:	005b      	lsls	r3, r3, #1
 801032c:	4413      	add	r3, r2
 801032e:	00db      	lsls	r3, r3, #3
 8010330:	440b      	add	r3, r1
 8010332:	3314      	adds	r3, #20
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	2b01      	cmp	r3, #1
 8010338:	d923      	bls.n	8010382 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801033a:	7dfa      	ldrb	r2, [r7, #23]
 801033c:	4926      	ldr	r1, [pc, #152]	; (80103d8 <etharp_output+0x200>)
 801033e:	4613      	mov	r3, r2
 8010340:	005b      	lsls	r3, r3, #1
 8010342:	4413      	add	r3, r2
 8010344:	00db      	lsls	r3, r3, #3
 8010346:	440b      	add	r3, r1
 8010348:	3308      	adds	r3, #8
 801034a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801034c:	68fa      	ldr	r2, [r7, #12]
 801034e:	429a      	cmp	r2, r3
 8010350:	d117      	bne.n	8010382 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010352:	69bb      	ldr	r3, [r7, #24]
 8010354:	6819      	ldr	r1, [r3, #0]
 8010356:	7dfa      	ldrb	r2, [r7, #23]
 8010358:	481f      	ldr	r0, [pc, #124]	; (80103d8 <etharp_output+0x200>)
 801035a:	4613      	mov	r3, r2
 801035c:	005b      	lsls	r3, r3, #1
 801035e:	4413      	add	r3, r2
 8010360:	00db      	lsls	r3, r3, #3
 8010362:	4403      	add	r3, r0
 8010364:	3304      	adds	r3, #4
 8010366:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010368:	4299      	cmp	r1, r3
 801036a:	d10a      	bne.n	8010382 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801036c:	4a19      	ldr	r2, [pc, #100]	; (80103d4 <etharp_output+0x1fc>)
 801036e:	7dfb      	ldrb	r3, [r7, #23]
 8010370:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010372:	7dfb      	ldrb	r3, [r7, #23]
 8010374:	461a      	mov	r2, r3
 8010376:	68b9      	ldr	r1, [r7, #8]
 8010378:	68f8      	ldr	r0, [r7, #12]
 801037a:	f7ff fe93 	bl	80100a4 <etharp_output_to_arp_index>
 801037e:	4603      	mov	r3, r0
 8010380:	e018      	b.n	80103b4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010382:	7dfb      	ldrb	r3, [r7, #23]
 8010384:	3301      	adds	r3, #1
 8010386:	75fb      	strb	r3, [r7, #23]
 8010388:	7dfb      	ldrb	r3, [r7, #23]
 801038a:	2b09      	cmp	r3, #9
 801038c:	d9ca      	bls.n	8010324 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801038e:	68ba      	ldr	r2, [r7, #8]
 8010390:	69b9      	ldr	r1, [r7, #24]
 8010392:	68f8      	ldr	r0, [r7, #12]
 8010394:	f000 f822 	bl	80103dc <etharp_query>
 8010398:	4603      	mov	r3, r0
 801039a:	e00b      	b.n	80103b4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80103a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80103a6:	9300      	str	r3, [sp, #0]
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	68b9      	ldr	r1, [r7, #8]
 80103ac:	68f8      	ldr	r0, [r7, #12]
 80103ae:	f001 fd45 	bl	8011e3c <ethernet_output>
 80103b2:	4603      	mov	r3, r0
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3720      	adds	r7, #32
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	08016a50 	.word	0x08016a50
 80103c0:	08016ba0 	.word	0x08016ba0
 80103c4:	08016ac8 	.word	0x08016ac8
 80103c8:	08016bf0 	.word	0x08016bf0
 80103cc:	08016b90 	.word	0x08016b90
 80103d0:	08017218 	.word	0x08017218
 80103d4:	2000abc8 	.word	0x2000abc8
 80103d8:	2000aad8 	.word	0x2000aad8

080103dc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b08c      	sub	sp, #48	; 0x30
 80103e0:	af02      	add	r7, sp, #8
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	60b9      	str	r1, [r7, #8]
 80103e6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	3326      	adds	r3, #38	; 0x26
 80103ec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80103ee:	23ff      	movs	r3, #255	; 0xff
 80103f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80103f4:	2300      	movs	r3, #0
 80103f6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	68f9      	ldr	r1, [r7, #12]
 80103fe:	4618      	mov	r0, r3
 8010400:	f000 fe0e 	bl	8011020 <ip4_addr_isbroadcast_u32>
 8010404:	4603      	mov	r3, r0
 8010406:	2b00      	cmp	r3, #0
 8010408:	d10c      	bne.n	8010424 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010412:	2be0      	cmp	r3, #224	; 0xe0
 8010414:	d006      	beq.n	8010424 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d003      	beq.n	8010424 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d102      	bne.n	801042a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010424:	f06f 030f 	mvn.w	r3, #15
 8010428:	e101      	b.n	801062e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801042a:	68fa      	ldr	r2, [r7, #12]
 801042c:	2101      	movs	r1, #1
 801042e:	68b8      	ldr	r0, [r7, #8]
 8010430:	f7ff fb60 	bl	800faf4 <etharp_find_entry>
 8010434:	4603      	mov	r3, r0
 8010436:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010438:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801043c:	2b00      	cmp	r3, #0
 801043e:	da02      	bge.n	8010446 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010440:	8a7b      	ldrh	r3, [r7, #18]
 8010442:	b25b      	sxtb	r3, r3
 8010444:	e0f3      	b.n	801062e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010446:	8a7b      	ldrh	r3, [r7, #18]
 8010448:	2b7e      	cmp	r3, #126	; 0x7e
 801044a:	d906      	bls.n	801045a <etharp_query+0x7e>
 801044c:	4b7a      	ldr	r3, [pc, #488]	; (8010638 <etharp_query+0x25c>)
 801044e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010452:	497a      	ldr	r1, [pc, #488]	; (801063c <etharp_query+0x260>)
 8010454:	487a      	ldr	r0, [pc, #488]	; (8010640 <etharp_query+0x264>)
 8010456:	f001 febd 	bl	80121d4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801045a:	8a7b      	ldrh	r3, [r7, #18]
 801045c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801045e:	7c7a      	ldrb	r2, [r7, #17]
 8010460:	4978      	ldr	r1, [pc, #480]	; (8010644 <etharp_query+0x268>)
 8010462:	4613      	mov	r3, r2
 8010464:	005b      	lsls	r3, r3, #1
 8010466:	4413      	add	r3, r2
 8010468:	00db      	lsls	r3, r3, #3
 801046a:	440b      	add	r3, r1
 801046c:	3314      	adds	r3, #20
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d115      	bne.n	80104a0 <etharp_query+0xc4>
    is_new_entry = 1;
 8010474:	2301      	movs	r3, #1
 8010476:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010478:	7c7a      	ldrb	r2, [r7, #17]
 801047a:	4972      	ldr	r1, [pc, #456]	; (8010644 <etharp_query+0x268>)
 801047c:	4613      	mov	r3, r2
 801047e:	005b      	lsls	r3, r3, #1
 8010480:	4413      	add	r3, r2
 8010482:	00db      	lsls	r3, r3, #3
 8010484:	440b      	add	r3, r1
 8010486:	3314      	adds	r3, #20
 8010488:	2201      	movs	r2, #1
 801048a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801048c:	7c7a      	ldrb	r2, [r7, #17]
 801048e:	496d      	ldr	r1, [pc, #436]	; (8010644 <etharp_query+0x268>)
 8010490:	4613      	mov	r3, r2
 8010492:	005b      	lsls	r3, r3, #1
 8010494:	4413      	add	r3, r2
 8010496:	00db      	lsls	r3, r3, #3
 8010498:	440b      	add	r3, r1
 801049a:	3308      	adds	r3, #8
 801049c:	68fa      	ldr	r2, [r7, #12]
 801049e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80104a0:	7c7a      	ldrb	r2, [r7, #17]
 80104a2:	4968      	ldr	r1, [pc, #416]	; (8010644 <etharp_query+0x268>)
 80104a4:	4613      	mov	r3, r2
 80104a6:	005b      	lsls	r3, r3, #1
 80104a8:	4413      	add	r3, r2
 80104aa:	00db      	lsls	r3, r3, #3
 80104ac:	440b      	add	r3, r1
 80104ae:	3314      	adds	r3, #20
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	2b01      	cmp	r3, #1
 80104b4:	d011      	beq.n	80104da <etharp_query+0xfe>
 80104b6:	7c7a      	ldrb	r2, [r7, #17]
 80104b8:	4962      	ldr	r1, [pc, #392]	; (8010644 <etharp_query+0x268>)
 80104ba:	4613      	mov	r3, r2
 80104bc:	005b      	lsls	r3, r3, #1
 80104be:	4413      	add	r3, r2
 80104c0:	00db      	lsls	r3, r3, #3
 80104c2:	440b      	add	r3, r1
 80104c4:	3314      	adds	r3, #20
 80104c6:	781b      	ldrb	r3, [r3, #0]
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	d806      	bhi.n	80104da <etharp_query+0xfe>
 80104cc:	4b5a      	ldr	r3, [pc, #360]	; (8010638 <etharp_query+0x25c>)
 80104ce:	f240 32cd 	movw	r2, #973	; 0x3cd
 80104d2:	495d      	ldr	r1, [pc, #372]	; (8010648 <etharp_query+0x26c>)
 80104d4:	485a      	ldr	r0, [pc, #360]	; (8010640 <etharp_query+0x264>)
 80104d6:	f001 fe7d 	bl	80121d4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80104da:	6a3b      	ldr	r3, [r7, #32]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d102      	bne.n	80104e6 <etharp_query+0x10a>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d10c      	bne.n	8010500 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80104e6:	68b9      	ldr	r1, [r7, #8]
 80104e8:	68f8      	ldr	r0, [r7, #12]
 80104ea:	f000 f963 	bl	80107b4 <etharp_request>
 80104ee:	4603      	mov	r3, r0
 80104f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d102      	bne.n	8010500 <etharp_query+0x124>
      return result;
 80104fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80104fe:	e096      	b.n	801062e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d106      	bne.n	8010514 <etharp_query+0x138>
 8010506:	4b4c      	ldr	r3, [pc, #304]	; (8010638 <etharp_query+0x25c>)
 8010508:	f240 32e1 	movw	r2, #993	; 0x3e1
 801050c:	494f      	ldr	r1, [pc, #316]	; (801064c <etharp_query+0x270>)
 801050e:	484c      	ldr	r0, [pc, #304]	; (8010640 <etharp_query+0x264>)
 8010510:	f001 fe60 	bl	80121d4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010514:	7c7a      	ldrb	r2, [r7, #17]
 8010516:	494b      	ldr	r1, [pc, #300]	; (8010644 <etharp_query+0x268>)
 8010518:	4613      	mov	r3, r2
 801051a:	005b      	lsls	r3, r3, #1
 801051c:	4413      	add	r3, r2
 801051e:	00db      	lsls	r3, r3, #3
 8010520:	440b      	add	r3, r1
 8010522:	3314      	adds	r3, #20
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	2b01      	cmp	r3, #1
 8010528:	d917      	bls.n	801055a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801052a:	4a49      	ldr	r2, [pc, #292]	; (8010650 <etharp_query+0x274>)
 801052c:	7c7b      	ldrb	r3, [r7, #17]
 801052e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010530:	7c7a      	ldrb	r2, [r7, #17]
 8010532:	4613      	mov	r3, r2
 8010534:	005b      	lsls	r3, r3, #1
 8010536:	4413      	add	r3, r2
 8010538:	00db      	lsls	r3, r3, #3
 801053a:	3308      	adds	r3, #8
 801053c:	4a41      	ldr	r2, [pc, #260]	; (8010644 <etharp_query+0x268>)
 801053e:	4413      	add	r3, r2
 8010540:	3304      	adds	r3, #4
 8010542:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010546:	9200      	str	r2, [sp, #0]
 8010548:	697a      	ldr	r2, [r7, #20]
 801054a:	6879      	ldr	r1, [r7, #4]
 801054c:	68f8      	ldr	r0, [r7, #12]
 801054e:	f001 fc75 	bl	8011e3c <ethernet_output>
 8010552:	4603      	mov	r3, r0
 8010554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010558:	e067      	b.n	801062a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801055a:	7c7a      	ldrb	r2, [r7, #17]
 801055c:	4939      	ldr	r1, [pc, #228]	; (8010644 <etharp_query+0x268>)
 801055e:	4613      	mov	r3, r2
 8010560:	005b      	lsls	r3, r3, #1
 8010562:	4413      	add	r3, r2
 8010564:	00db      	lsls	r3, r3, #3
 8010566:	440b      	add	r3, r1
 8010568:	3314      	adds	r3, #20
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	2b01      	cmp	r3, #1
 801056e:	d15c      	bne.n	801062a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010570:	2300      	movs	r3, #0
 8010572:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010578:	e01c      	b.n	80105b4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801057a:	69fb      	ldr	r3, [r7, #28]
 801057c:	895a      	ldrh	r2, [r3, #10]
 801057e:	69fb      	ldr	r3, [r7, #28]
 8010580:	891b      	ldrh	r3, [r3, #8]
 8010582:	429a      	cmp	r2, r3
 8010584:	d10a      	bne.n	801059c <etharp_query+0x1c0>
 8010586:	69fb      	ldr	r3, [r7, #28]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d006      	beq.n	801059c <etharp_query+0x1c0>
 801058e:	4b2a      	ldr	r3, [pc, #168]	; (8010638 <etharp_query+0x25c>)
 8010590:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010594:	492f      	ldr	r1, [pc, #188]	; (8010654 <etharp_query+0x278>)
 8010596:	482a      	ldr	r0, [pc, #168]	; (8010640 <etharp_query+0x264>)
 8010598:	f001 fe1c 	bl	80121d4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801059c:	69fb      	ldr	r3, [r7, #28]
 801059e:	7b1b      	ldrb	r3, [r3, #12]
 80105a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d002      	beq.n	80105ae <etharp_query+0x1d2>
        copy_needed = 1;
 80105a8:	2301      	movs	r3, #1
 80105aa:	61bb      	str	r3, [r7, #24]
        break;
 80105ac:	e005      	b.n	80105ba <etharp_query+0x1de>
      }
      p = p->next;
 80105ae:	69fb      	ldr	r3, [r7, #28]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d1df      	bne.n	801057a <etharp_query+0x19e>
    }
    if (copy_needed) {
 80105ba:	69bb      	ldr	r3, [r7, #24]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d007      	beq.n	80105d0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80105c0:	687a      	ldr	r2, [r7, #4]
 80105c2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80105c6:	200e      	movs	r0, #14
 80105c8:	f7f9 f916 	bl	80097f8 <pbuf_clone>
 80105cc:	61f8      	str	r0, [r7, #28]
 80105ce:	e004      	b.n	80105da <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80105d4:	69f8      	ldr	r0, [r7, #28]
 80105d6:	f7f8 ff19 	bl	800940c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80105da:	69fb      	ldr	r3, [r7, #28]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d021      	beq.n	8010624 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80105e0:	7c7a      	ldrb	r2, [r7, #17]
 80105e2:	4918      	ldr	r1, [pc, #96]	; (8010644 <etharp_query+0x268>)
 80105e4:	4613      	mov	r3, r2
 80105e6:	005b      	lsls	r3, r3, #1
 80105e8:	4413      	add	r3, r2
 80105ea:	00db      	lsls	r3, r3, #3
 80105ec:	440b      	add	r3, r1
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d00a      	beq.n	801060a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80105f4:	7c7a      	ldrb	r2, [r7, #17]
 80105f6:	4913      	ldr	r1, [pc, #76]	; (8010644 <etharp_query+0x268>)
 80105f8:	4613      	mov	r3, r2
 80105fa:	005b      	lsls	r3, r3, #1
 80105fc:	4413      	add	r3, r2
 80105fe:	00db      	lsls	r3, r3, #3
 8010600:	440b      	add	r3, r1
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	4618      	mov	r0, r3
 8010606:	f7f8 fe61 	bl	80092cc <pbuf_free>
      }
      arp_table[i].q = p;
 801060a:	7c7a      	ldrb	r2, [r7, #17]
 801060c:	490d      	ldr	r1, [pc, #52]	; (8010644 <etharp_query+0x268>)
 801060e:	4613      	mov	r3, r2
 8010610:	005b      	lsls	r3, r3, #1
 8010612:	4413      	add	r3, r2
 8010614:	00db      	lsls	r3, r3, #3
 8010616:	440b      	add	r3, r1
 8010618:	69fa      	ldr	r2, [r7, #28]
 801061a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801061c:	2300      	movs	r3, #0
 801061e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010622:	e002      	b.n	801062a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010624:	23ff      	movs	r3, #255	; 0xff
 8010626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801062a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801062e:	4618      	mov	r0, r3
 8010630:	3728      	adds	r7, #40	; 0x28
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}
 8010636:	bf00      	nop
 8010638:	08016a50 	.word	0x08016a50
 801063c:	08016bfc 	.word	0x08016bfc
 8010640:	08016ac8 	.word	0x08016ac8
 8010644:	2000aad8 	.word	0x2000aad8
 8010648:	08016c0c 	.word	0x08016c0c
 801064c:	08016bf0 	.word	0x08016bf0
 8010650:	2000abc8 	.word	0x2000abc8
 8010654:	08016c34 	.word	0x08016c34

08010658 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b08a      	sub	sp, #40	; 0x28
 801065c:	af02      	add	r7, sp, #8
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
 8010664:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010666:	2300      	movs	r3, #0
 8010668:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d106      	bne.n	801067e <etharp_raw+0x26>
 8010670:	4b3a      	ldr	r3, [pc, #232]	; (801075c <etharp_raw+0x104>)
 8010672:	f240 4257 	movw	r2, #1111	; 0x457
 8010676:	493a      	ldr	r1, [pc, #232]	; (8010760 <etharp_raw+0x108>)
 8010678:	483a      	ldr	r0, [pc, #232]	; (8010764 <etharp_raw+0x10c>)
 801067a:	f001 fdab 	bl	80121d4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801067e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010682:	211c      	movs	r1, #28
 8010684:	200e      	movs	r0, #14
 8010686:	f7f8 fb3d 	bl	8008d04 <pbuf_alloc>
 801068a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801068c:	69bb      	ldr	r3, [r7, #24]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d102      	bne.n	8010698 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010692:	f04f 33ff 	mov.w	r3, #4294967295
 8010696:	e05d      	b.n	8010754 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010698:	69bb      	ldr	r3, [r7, #24]
 801069a:	895b      	ldrh	r3, [r3, #10]
 801069c:	2b1b      	cmp	r3, #27
 801069e:	d806      	bhi.n	80106ae <etharp_raw+0x56>
 80106a0:	4b2e      	ldr	r3, [pc, #184]	; (801075c <etharp_raw+0x104>)
 80106a2:	f240 4262 	movw	r2, #1122	; 0x462
 80106a6:	4930      	ldr	r1, [pc, #192]	; (8010768 <etharp_raw+0x110>)
 80106a8:	482e      	ldr	r0, [pc, #184]	; (8010764 <etharp_raw+0x10c>)
 80106aa:	f001 fd93 	bl	80121d4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80106ae:	69bb      	ldr	r3, [r7, #24]
 80106b0:	685b      	ldr	r3, [r3, #4]
 80106b2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80106b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7f7 faaa 	bl	8007c10 <lwip_htons>
 80106bc:	4603      	mov	r3, r0
 80106be:	461a      	mov	r2, r3
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80106ca:	2b06      	cmp	r3, #6
 80106cc:	d006      	beq.n	80106dc <etharp_raw+0x84>
 80106ce:	4b23      	ldr	r3, [pc, #140]	; (801075c <etharp_raw+0x104>)
 80106d0:	f240 4269 	movw	r2, #1129	; 0x469
 80106d4:	4925      	ldr	r1, [pc, #148]	; (801076c <etharp_raw+0x114>)
 80106d6:	4823      	ldr	r0, [pc, #140]	; (8010764 <etharp_raw+0x10c>)
 80106d8:	f001 fd7c 	bl	80121d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	3308      	adds	r3, #8
 80106e0:	2206      	movs	r2, #6
 80106e2:	6839      	ldr	r1, [r7, #0]
 80106e4:	4618      	mov	r0, r3
 80106e6:	f002 fc64 	bl	8012fb2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	3312      	adds	r3, #18
 80106ee:	2206      	movs	r2, #6
 80106f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80106f2:	4618      	mov	r0, r3
 80106f4:	f002 fc5d 	bl	8012fb2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	330e      	adds	r3, #14
 80106fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106fe:	6812      	ldr	r2, [r2, #0]
 8010700:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	3318      	adds	r3, #24
 8010706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010708:	6812      	ldr	r2, [r2, #0]
 801070a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801070c:	697b      	ldr	r3, [r7, #20]
 801070e:	2200      	movs	r2, #0
 8010710:	701a      	strb	r2, [r3, #0]
 8010712:	2200      	movs	r2, #0
 8010714:	f042 0201 	orr.w	r2, r2, #1
 8010718:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	2200      	movs	r2, #0
 801071e:	f042 0208 	orr.w	r2, r2, #8
 8010722:	709a      	strb	r2, [r3, #2]
 8010724:	2200      	movs	r2, #0
 8010726:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	2206      	movs	r2, #6
 801072c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	2204      	movs	r2, #4
 8010732:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010734:	f640 0306 	movw	r3, #2054	; 0x806
 8010738:	9300      	str	r3, [sp, #0]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	68ba      	ldr	r2, [r7, #8]
 801073e:	69b9      	ldr	r1, [r7, #24]
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f001 fb7b 	bl	8011e3c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010746:	69b8      	ldr	r0, [r7, #24]
 8010748:	f7f8 fdc0 	bl	80092cc <pbuf_free>
  p = NULL;
 801074c:	2300      	movs	r3, #0
 801074e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010750:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010754:	4618      	mov	r0, r3
 8010756:	3720      	adds	r7, #32
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}
 801075c:	08016a50 	.word	0x08016a50
 8010760:	08016ba0 	.word	0x08016ba0
 8010764:	08016ac8 	.word	0x08016ac8
 8010768:	08016c50 	.word	0x08016c50
 801076c:	08016c84 	.word	0x08016c84

08010770 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b088      	sub	sp, #32
 8010774:	af04      	add	r7, sp, #16
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	60b9      	str	r1, [r7, #8]
 801077a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801078c:	2201      	movs	r2, #1
 801078e:	9203      	str	r2, [sp, #12]
 8010790:	68ba      	ldr	r2, [r7, #8]
 8010792:	9202      	str	r2, [sp, #8]
 8010794:	4a06      	ldr	r2, [pc, #24]	; (80107b0 <etharp_request_dst+0x40>)
 8010796:	9201      	str	r2, [sp, #4]
 8010798:	9300      	str	r3, [sp, #0]
 801079a:	4603      	mov	r3, r0
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	68f8      	ldr	r0, [r7, #12]
 80107a0:	f7ff ff5a 	bl	8010658 <etharp_raw>
 80107a4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	3710      	adds	r7, #16
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}
 80107ae:	bf00      	nop
 80107b0:	08017220 	.word	0x08017220

080107b4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80107be:	4a05      	ldr	r2, [pc, #20]	; (80107d4 <etharp_request+0x20>)
 80107c0:	6839      	ldr	r1, [r7, #0]
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f7ff ffd4 	bl	8010770 <etharp_request_dst>
 80107c8:	4603      	mov	r3, r0
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3708      	adds	r7, #8
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}
 80107d2:	bf00      	nop
 80107d4:	08017218 	.word	0x08017218

080107d8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b08e      	sub	sp, #56	; 0x38
 80107dc:	af04      	add	r7, sp, #16
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80107e2:	4b79      	ldr	r3, [pc, #484]	; (80109c8 <icmp_input+0x1f0>)
 80107e4:	689b      	ldr	r3, [r3, #8]
 80107e6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80107e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	f003 030f 	and.w	r3, r3, #15
 80107f0:	b2db      	uxtb	r3, r3
 80107f2:	009b      	lsls	r3, r3, #2
 80107f4:	b2db      	uxtb	r3, r3
 80107f6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80107f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80107fa:	2b13      	cmp	r3, #19
 80107fc:	f240 80cd 	bls.w	801099a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	895b      	ldrh	r3, [r3, #10]
 8010804:	2b03      	cmp	r3, #3
 8010806:	f240 80ca 	bls.w	801099e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	781b      	ldrb	r3, [r3, #0]
 8010810:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010814:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010818:	2b00      	cmp	r3, #0
 801081a:	f000 80b7 	beq.w	801098c <icmp_input+0x1b4>
 801081e:	2b08      	cmp	r3, #8
 8010820:	f040 80b7 	bne.w	8010992 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010824:	4b69      	ldr	r3, [pc, #420]	; (80109cc <icmp_input+0x1f4>)
 8010826:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010828:	4b67      	ldr	r3, [pc, #412]	; (80109c8 <icmp_input+0x1f0>)
 801082a:	695b      	ldr	r3, [r3, #20]
 801082c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010830:	2be0      	cmp	r3, #224	; 0xe0
 8010832:	f000 80bb 	beq.w	80109ac <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010836:	4b64      	ldr	r3, [pc, #400]	; (80109c8 <icmp_input+0x1f0>)
 8010838:	695b      	ldr	r3, [r3, #20]
 801083a:	4a63      	ldr	r2, [pc, #396]	; (80109c8 <icmp_input+0x1f0>)
 801083c:	6812      	ldr	r2, [r2, #0]
 801083e:	4611      	mov	r1, r2
 8010840:	4618      	mov	r0, r3
 8010842:	f000 fbed 	bl	8011020 <ip4_addr_isbroadcast_u32>
 8010846:	4603      	mov	r3, r0
 8010848:	2b00      	cmp	r3, #0
 801084a:	f040 80b1 	bne.w	80109b0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	891b      	ldrh	r3, [r3, #8]
 8010852:	2b07      	cmp	r3, #7
 8010854:	f240 80a5 	bls.w	80109a2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010858:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801085a:	330e      	adds	r3, #14
 801085c:	4619      	mov	r1, r3
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f7f8 fc9e 	bl	80091a0 <pbuf_add_header>
 8010864:	4603      	mov	r3, r0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d04b      	beq.n	8010902 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	891a      	ldrh	r2, [r3, #8]
 801086e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010870:	4413      	add	r3, r2
 8010872:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	891b      	ldrh	r3, [r3, #8]
 8010878:	8b7a      	ldrh	r2, [r7, #26]
 801087a:	429a      	cmp	r2, r3
 801087c:	f0c0 809a 	bcc.w	80109b4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010880:	8b7b      	ldrh	r3, [r7, #26]
 8010882:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010886:	4619      	mov	r1, r3
 8010888:	200e      	movs	r0, #14
 801088a:	f7f8 fa3b 	bl	8008d04 <pbuf_alloc>
 801088e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	2b00      	cmp	r3, #0
 8010894:	f000 8090 	beq.w	80109b8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	895b      	ldrh	r3, [r3, #10]
 801089c:	461a      	mov	r2, r3
 801089e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80108a0:	3308      	adds	r3, #8
 80108a2:	429a      	cmp	r2, r3
 80108a4:	d203      	bcs.n	80108ae <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80108a6:	6978      	ldr	r0, [r7, #20]
 80108a8:	f7f8 fd10 	bl	80092cc <pbuf_free>
          goto icmperr;
 80108ac:	e085      	b.n	80109ba <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	685b      	ldr	r3, [r3, #4]
 80108b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80108b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80108b6:	4618      	mov	r0, r3
 80108b8:	f002 fb7b 	bl	8012fb2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80108bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80108be:	4619      	mov	r1, r3
 80108c0:	6978      	ldr	r0, [r7, #20]
 80108c2:	f7f8 fc7d 	bl	80091c0 <pbuf_remove_header>
 80108c6:	4603      	mov	r3, r0
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d009      	beq.n	80108e0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80108cc:	4b40      	ldr	r3, [pc, #256]	; (80109d0 <icmp_input+0x1f8>)
 80108ce:	22b6      	movs	r2, #182	; 0xb6
 80108d0:	4940      	ldr	r1, [pc, #256]	; (80109d4 <icmp_input+0x1fc>)
 80108d2:	4841      	ldr	r0, [pc, #260]	; (80109d8 <icmp_input+0x200>)
 80108d4:	f001 fc7e 	bl	80121d4 <iprintf>
          pbuf_free(r);
 80108d8:	6978      	ldr	r0, [r7, #20]
 80108da:	f7f8 fcf7 	bl	80092cc <pbuf_free>
          goto icmperr;
 80108de:	e06c      	b.n	80109ba <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80108e0:	6879      	ldr	r1, [r7, #4]
 80108e2:	6978      	ldr	r0, [r7, #20]
 80108e4:	f7f8 fe1a 	bl	800951c <pbuf_copy>
 80108e8:	4603      	mov	r3, r0
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d003      	beq.n	80108f6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80108ee:	6978      	ldr	r0, [r7, #20]
 80108f0:	f7f8 fcec 	bl	80092cc <pbuf_free>
          goto icmperr;
 80108f4:	e061      	b.n	80109ba <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f7f8 fce8 	bl	80092cc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	607b      	str	r3, [r7, #4]
 8010900:	e00f      	b.n	8010922 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010902:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010904:	330e      	adds	r3, #14
 8010906:	4619      	mov	r1, r3
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f7f8 fc59 	bl	80091c0 <pbuf_remove_header>
 801090e:	4603      	mov	r3, r0
 8010910:	2b00      	cmp	r3, #0
 8010912:	d006      	beq.n	8010922 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010914:	4b2e      	ldr	r3, [pc, #184]	; (80109d0 <icmp_input+0x1f8>)
 8010916:	22c7      	movs	r2, #199	; 0xc7
 8010918:	4930      	ldr	r1, [pc, #192]	; (80109dc <icmp_input+0x204>)
 801091a:	482f      	ldr	r0, [pc, #188]	; (80109d8 <icmp_input+0x200>)
 801091c:	f001 fc5a 	bl	80121d4 <iprintf>
          goto icmperr;
 8010920:	e04b      	b.n	80109ba <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010928:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801092a:	4619      	mov	r1, r3
 801092c:	6878      	ldr	r0, [r7, #4]
 801092e:	f7f8 fc37 	bl	80091a0 <pbuf_add_header>
 8010932:	4603      	mov	r3, r0
 8010934:	2b00      	cmp	r3, #0
 8010936:	d12b      	bne.n	8010990 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	685b      	ldr	r3, [r3, #4]
 801093c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801093e:	69fb      	ldr	r3, [r7, #28]
 8010940:	681a      	ldr	r2, [r3, #0]
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010946:	4b20      	ldr	r3, [pc, #128]	; (80109c8 <icmp_input+0x1f0>)
 8010948:	691a      	ldr	r2, [r3, #16]
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	2200      	movs	r2, #0
 8010952:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	2200      	movs	r2, #0
 8010958:	709a      	strb	r2, [r3, #2]
 801095a:	2200      	movs	r2, #0
 801095c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	22ff      	movs	r2, #255	; 0xff
 8010962:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	2200      	movs	r2, #0
 8010968:	729a      	strb	r2, [r3, #10]
 801096a:	2200      	movs	r2, #0
 801096c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	9302      	str	r3, [sp, #8]
 8010972:	2301      	movs	r3, #1
 8010974:	9301      	str	r3, [sp, #4]
 8010976:	2300      	movs	r3, #0
 8010978:	9300      	str	r3, [sp, #0]
 801097a:	23ff      	movs	r3, #255	; 0xff
 801097c:	2200      	movs	r2, #0
 801097e:	69f9      	ldr	r1, [r7, #28]
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f000 fa75 	bl	8010e70 <ip4_output_if>
 8010986:	4603      	mov	r3, r0
 8010988:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801098a:	e001      	b.n	8010990 <icmp_input+0x1b8>
      break;
 801098c:	bf00      	nop
 801098e:	e000      	b.n	8010992 <icmp_input+0x1ba>
      break;
 8010990:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f7f8 fc9a 	bl	80092cc <pbuf_free>
  return;
 8010998:	e013      	b.n	80109c2 <icmp_input+0x1ea>
    goto lenerr;
 801099a:	bf00      	nop
 801099c:	e002      	b.n	80109a4 <icmp_input+0x1cc>
    goto lenerr;
 801099e:	bf00      	nop
 80109a0:	e000      	b.n	80109a4 <icmp_input+0x1cc>
        goto lenerr;
 80109a2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f7f8 fc91 	bl	80092cc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80109aa:	e00a      	b.n	80109c2 <icmp_input+0x1ea>
        goto icmperr;
 80109ac:	bf00      	nop
 80109ae:	e004      	b.n	80109ba <icmp_input+0x1e2>
        goto icmperr;
 80109b0:	bf00      	nop
 80109b2:	e002      	b.n	80109ba <icmp_input+0x1e2>
          goto icmperr;
 80109b4:	bf00      	nop
 80109b6:	e000      	b.n	80109ba <icmp_input+0x1e2>
          goto icmperr;
 80109b8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f7f8 fc86 	bl	80092cc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80109c0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80109c2:	3728      	adds	r7, #40	; 0x28
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}
 80109c8:	20005348 	.word	0x20005348
 80109cc:	2000535c 	.word	0x2000535c
 80109d0:	08016cc8 	.word	0x08016cc8
 80109d4:	08016d00 	.word	0x08016d00
 80109d8:	08016d38 	.word	0x08016d38
 80109dc:	08016d60 	.word	0x08016d60

080109e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	460b      	mov	r3, r1
 80109ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80109ec:	78fb      	ldrb	r3, [r7, #3]
 80109ee:	461a      	mov	r2, r3
 80109f0:	2103      	movs	r1, #3
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 f814 	bl	8010a20 <icmp_send_response>
}
 80109f8:	bf00      	nop
 80109fa:	3708      	adds	r7, #8
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}

08010a00 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b082      	sub	sp, #8
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	460b      	mov	r3, r1
 8010a0a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010a0c:	78fb      	ldrb	r3, [r7, #3]
 8010a0e:	461a      	mov	r2, r3
 8010a10:	210b      	movs	r1, #11
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f000 f804 	bl	8010a20 <icmp_send_response>
}
 8010a18:	bf00      	nop
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}

08010a20 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b08c      	sub	sp, #48	; 0x30
 8010a24:	af04      	add	r7, sp, #16
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	460b      	mov	r3, r1
 8010a2a:	70fb      	strb	r3, [r7, #3]
 8010a2c:	4613      	mov	r3, r2
 8010a2e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010a30:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a34:	2124      	movs	r1, #36	; 0x24
 8010a36:	2022      	movs	r0, #34	; 0x22
 8010a38:	f7f8 f964 	bl	8008d04 <pbuf_alloc>
 8010a3c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010a3e:	69fb      	ldr	r3, [r7, #28]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d04c      	beq.n	8010ade <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010a44:	69fb      	ldr	r3, [r7, #28]
 8010a46:	895b      	ldrh	r3, [r3, #10]
 8010a48:	2b23      	cmp	r3, #35	; 0x23
 8010a4a:	d806      	bhi.n	8010a5a <icmp_send_response+0x3a>
 8010a4c:	4b26      	ldr	r3, [pc, #152]	; (8010ae8 <icmp_send_response+0xc8>)
 8010a4e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010a52:	4926      	ldr	r1, [pc, #152]	; (8010aec <icmp_send_response+0xcc>)
 8010a54:	4826      	ldr	r0, [pc, #152]	; (8010af0 <icmp_send_response+0xd0>)
 8010a56:	f001 fbbd 	bl	80121d4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	685b      	ldr	r3, [r3, #4]
 8010a5e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010a60:	69fb      	ldr	r3, [r7, #28]
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010a66:	697b      	ldr	r3, [r7, #20]
 8010a68:	78fa      	ldrb	r2, [r7, #3]
 8010a6a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	78ba      	ldrb	r2, [r7, #2]
 8010a70:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	2200      	movs	r2, #0
 8010a76:	711a      	strb	r2, [r3, #4]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	2200      	movs	r2, #0
 8010a80:	719a      	strb	r2, [r3, #6]
 8010a82:	2200      	movs	r2, #0
 8010a84:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010a86:	69fb      	ldr	r3, [r7, #28]
 8010a88:	685b      	ldr	r3, [r3, #4]
 8010a8a:	f103 0008 	add.w	r0, r3, #8
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	685b      	ldr	r3, [r3, #4]
 8010a92:	221c      	movs	r2, #28
 8010a94:	4619      	mov	r1, r3
 8010a96:	f002 fa8c 	bl	8012fb2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010a9a:	69bb      	ldr	r3, [r7, #24]
 8010a9c:	68db      	ldr	r3, [r3, #12]
 8010a9e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010aa0:	f107 030c 	add.w	r3, r7, #12
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f000 f825 	bl	8010af4 <ip4_route>
 8010aaa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d011      	beq.n	8010ad6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	709a      	strb	r2, [r3, #2]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010abc:	f107 020c 	add.w	r2, r7, #12
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	9302      	str	r3, [sp, #8]
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	9301      	str	r3, [sp, #4]
 8010ac8:	2300      	movs	r3, #0
 8010aca:	9300      	str	r3, [sp, #0]
 8010acc:	23ff      	movs	r3, #255	; 0xff
 8010ace:	2100      	movs	r1, #0
 8010ad0:	69f8      	ldr	r0, [r7, #28]
 8010ad2:	f000 f9cd 	bl	8010e70 <ip4_output_if>
  }
  pbuf_free(q);
 8010ad6:	69f8      	ldr	r0, [r7, #28]
 8010ad8:	f7f8 fbf8 	bl	80092cc <pbuf_free>
 8010adc:	e000      	b.n	8010ae0 <icmp_send_response+0xc0>
    return;
 8010ade:	bf00      	nop
}
 8010ae0:	3720      	adds	r7, #32
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
 8010ae6:	bf00      	nop
 8010ae8:	08016cc8 	.word	0x08016cc8
 8010aec:	08016d94 	.word	0x08016d94
 8010af0:	08016d38 	.word	0x08016d38

08010af4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b085      	sub	sp, #20
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010afc:	4b33      	ldr	r3, [pc, #204]	; (8010bcc <ip4_route+0xd8>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	60fb      	str	r3, [r7, #12]
 8010b02:	e036      	b.n	8010b72 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b0a:	f003 0301 	and.w	r3, r3, #1
 8010b0e:	b2db      	uxtb	r3, r3
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d02b      	beq.n	8010b6c <ip4_route+0x78>
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b1a:	089b      	lsrs	r3, r3, #2
 8010b1c:	f003 0301 	and.w	r3, r3, #1
 8010b20:	b2db      	uxtb	r3, r3
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d022      	beq.n	8010b6c <ip4_route+0x78>
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	3304      	adds	r3, #4
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d01d      	beq.n	8010b6c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681a      	ldr	r2, [r3, #0]
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	3304      	adds	r3, #4
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	405a      	eors	r2, r3
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	3308      	adds	r3, #8
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	4013      	ands	r3, r2
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d101      	bne.n	8010b4c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	e038      	b.n	8010bbe <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b52:	f003 0302 	and.w	r3, r3, #2
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d108      	bne.n	8010b6c <ip4_route+0x78>
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681a      	ldr	r2, [r3, #0]
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	330c      	adds	r3, #12
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d101      	bne.n	8010b6c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	e028      	b.n	8010bbe <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	60fb      	str	r3, [r7, #12]
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d1c5      	bne.n	8010b04 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010b78:	4b15      	ldr	r3, [pc, #84]	; (8010bd0 <ip4_route+0xdc>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d01a      	beq.n	8010bb6 <ip4_route+0xc2>
 8010b80:	4b13      	ldr	r3, [pc, #76]	; (8010bd0 <ip4_route+0xdc>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b88:	f003 0301 	and.w	r3, r3, #1
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d012      	beq.n	8010bb6 <ip4_route+0xc2>
 8010b90:	4b0f      	ldr	r3, [pc, #60]	; (8010bd0 <ip4_route+0xdc>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b98:	f003 0304 	and.w	r3, r3, #4
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d00a      	beq.n	8010bb6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010ba0:	4b0b      	ldr	r3, [pc, #44]	; (8010bd0 <ip4_route+0xdc>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	3304      	adds	r3, #4
 8010ba6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d004      	beq.n	8010bb6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	b2db      	uxtb	r3, r3
 8010bb2:	2b7f      	cmp	r3, #127	; 0x7f
 8010bb4:	d101      	bne.n	8010bba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	e001      	b.n	8010bbe <ip4_route+0xca>
  }

  return netif_default;
 8010bba:	4b05      	ldr	r3, [pc, #20]	; (8010bd0 <ip4_route+0xdc>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3714      	adds	r7, #20
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr
 8010bca:	bf00      	nop
 8010bcc:	2000aa6c 	.word	0x2000aa6c
 8010bd0:	2000aa70 	.word	0x2000aa70

08010bd4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b082      	sub	sp, #8
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010be2:	f003 0301 	and.w	r3, r3, #1
 8010be6:	b2db      	uxtb	r3, r3
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d016      	beq.n	8010c1a <ip4_input_accept+0x46>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	3304      	adds	r3, #4
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d011      	beq.n	8010c1a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010bf6:	4b0b      	ldr	r3, [pc, #44]	; (8010c24 <ip4_input_accept+0x50>)
 8010bf8:	695a      	ldr	r2, [r3, #20]
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	3304      	adds	r3, #4
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d008      	beq.n	8010c16 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010c04:	4b07      	ldr	r3, [pc, #28]	; (8010c24 <ip4_input_accept+0x50>)
 8010c06:	695b      	ldr	r3, [r3, #20]
 8010c08:	6879      	ldr	r1, [r7, #4]
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f000 fa08 	bl	8011020 <ip4_addr_isbroadcast_u32>
 8010c10:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d001      	beq.n	8010c1a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010c16:	2301      	movs	r3, #1
 8010c18:	e000      	b.n	8010c1c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010c1a:	2300      	movs	r3, #0
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3708      	adds	r7, #8
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	20005348 	.word	0x20005348

08010c28 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b086      	sub	sp, #24
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	091b      	lsrs	r3, r3, #4
 8010c3e:	b2db      	uxtb	r3, r3
 8010c40:	2b04      	cmp	r3, #4
 8010c42:	d004      	beq.n	8010c4e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f7f8 fb41 	bl	80092cc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	e107      	b.n	8010e5e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	f003 030f 	and.w	r3, r3, #15
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	b2db      	uxtb	r3, r3
 8010c5c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	885b      	ldrh	r3, [r3, #2]
 8010c62:	b29b      	uxth	r3, r3
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7f6 ffd3 	bl	8007c10 <lwip_htons>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	891b      	ldrh	r3, [r3, #8]
 8010c72:	89ba      	ldrh	r2, [r7, #12]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d204      	bcs.n	8010c82 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010c78:	89bb      	ldrh	r3, [r7, #12]
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f7f8 f99f 	bl	8008fc0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	895b      	ldrh	r3, [r3, #10]
 8010c86:	89fa      	ldrh	r2, [r7, #14]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d807      	bhi.n	8010c9c <ip4_input+0x74>
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	891b      	ldrh	r3, [r3, #8]
 8010c90:	89ba      	ldrh	r2, [r7, #12]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d802      	bhi.n	8010c9c <ip4_input+0x74>
 8010c96:	89fb      	ldrh	r3, [r7, #14]
 8010c98:	2b13      	cmp	r3, #19
 8010c9a:	d804      	bhi.n	8010ca6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f7f8 fb15 	bl	80092cc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	e0db      	b.n	8010e5e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	691b      	ldr	r3, [r3, #16]
 8010caa:	4a6f      	ldr	r2, [pc, #444]	; (8010e68 <ip4_input+0x240>)
 8010cac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	68db      	ldr	r3, [r3, #12]
 8010cb2:	4a6d      	ldr	r2, [pc, #436]	; (8010e68 <ip4_input+0x240>)
 8010cb4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010cb6:	4b6c      	ldr	r3, [pc, #432]	; (8010e68 <ip4_input+0x240>)
 8010cb8:	695b      	ldr	r3, [r3, #20]
 8010cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010cbe:	2be0      	cmp	r3, #224	; 0xe0
 8010cc0:	d112      	bne.n	8010ce8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cc8:	f003 0301 	and.w	r3, r3, #1
 8010ccc:	b2db      	uxtb	r3, r3
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d007      	beq.n	8010ce2 <ip4_input+0xba>
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	3304      	adds	r3, #4
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d002      	beq.n	8010ce2 <ip4_input+0xba>
      netif = inp;
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	613b      	str	r3, [r7, #16]
 8010ce0:	e02a      	b.n	8010d38 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	613b      	str	r3, [r7, #16]
 8010ce6:	e027      	b.n	8010d38 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010ce8:	6838      	ldr	r0, [r7, #0]
 8010cea:	f7ff ff73 	bl	8010bd4 <ip4_input_accept>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d002      	beq.n	8010cfa <ip4_input+0xd2>
      netif = inp;
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	613b      	str	r3, [r7, #16]
 8010cf8:	e01e      	b.n	8010d38 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010cfe:	4b5a      	ldr	r3, [pc, #360]	; (8010e68 <ip4_input+0x240>)
 8010d00:	695b      	ldr	r3, [r3, #20]
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	2b7f      	cmp	r3, #127	; 0x7f
 8010d06:	d017      	beq.n	8010d38 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010d08:	4b58      	ldr	r3, [pc, #352]	; (8010e6c <ip4_input+0x244>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	613b      	str	r3, [r7, #16]
 8010d0e:	e00e      	b.n	8010d2e <ip4_input+0x106>
          if (netif == inp) {
 8010d10:	693a      	ldr	r2, [r7, #16]
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	429a      	cmp	r2, r3
 8010d16:	d006      	beq.n	8010d26 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010d18:	6938      	ldr	r0, [r7, #16]
 8010d1a:	f7ff ff5b 	bl	8010bd4 <ip4_input_accept>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d108      	bne.n	8010d36 <ip4_input+0x10e>
 8010d24:	e000      	b.n	8010d28 <ip4_input+0x100>
            continue;
 8010d26:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	613b      	str	r3, [r7, #16]
 8010d2e:	693b      	ldr	r3, [r7, #16]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d1ed      	bne.n	8010d10 <ip4_input+0xe8>
 8010d34:	e000      	b.n	8010d38 <ip4_input+0x110>
            break;
 8010d36:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010d38:	4b4b      	ldr	r3, [pc, #300]	; (8010e68 <ip4_input+0x240>)
 8010d3a:	691b      	ldr	r3, [r3, #16]
 8010d3c:	6839      	ldr	r1, [r7, #0]
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f000 f96e 	bl	8011020 <ip4_addr_isbroadcast_u32>
 8010d44:	4603      	mov	r3, r0
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d105      	bne.n	8010d56 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010d4a:	4b47      	ldr	r3, [pc, #284]	; (8010e68 <ip4_input+0x240>)
 8010d4c:	691b      	ldr	r3, [r3, #16]
 8010d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010d52:	2be0      	cmp	r3, #224	; 0xe0
 8010d54:	d104      	bne.n	8010d60 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f7f8 fab8 	bl	80092cc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	e07e      	b.n	8010e5e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010d60:	693b      	ldr	r3, [r7, #16]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d104      	bne.n	8010d70 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f7f8 fab0 	bl	80092cc <pbuf_free>
    return ERR_OK;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	e076      	b.n	8010e5e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	88db      	ldrh	r3, [r3, #6]
 8010d74:	b29b      	uxth	r3, r3
 8010d76:	461a      	mov	r2, r3
 8010d78:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010d7c:	4013      	ands	r3, r2
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d00b      	beq.n	8010d9a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f000 fc92 	bl	80116ac <ip4_reass>
 8010d88:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d101      	bne.n	8010d94 <ip4_input+0x16c>
      return ERR_OK;
 8010d90:	2300      	movs	r3, #0
 8010d92:	e064      	b.n	8010e5e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	685b      	ldr	r3, [r3, #4]
 8010d98:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010d9a:	4a33      	ldr	r2, [pc, #204]	; (8010e68 <ip4_input+0x240>)
 8010d9c:	693b      	ldr	r3, [r7, #16]
 8010d9e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010da0:	4a31      	ldr	r2, [pc, #196]	; (8010e68 <ip4_input+0x240>)
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010da6:	4a30      	ldr	r2, [pc, #192]	; (8010e68 <ip4_input+0x240>)
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	f003 030f 	and.w	r3, r3, #15
 8010db4:	b2db      	uxtb	r3, r3
 8010db6:	009b      	lsls	r3, r3, #2
 8010db8:	b2db      	uxtb	r3, r3
 8010dba:	b29a      	uxth	r2, r3
 8010dbc:	4b2a      	ldr	r3, [pc, #168]	; (8010e68 <ip4_input+0x240>)
 8010dbe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010dc0:	89fb      	ldrh	r3, [r7, #14]
 8010dc2:	4619      	mov	r1, r3
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f7f8 f9fb 	bl	80091c0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8010dca:	697b      	ldr	r3, [r7, #20]
 8010dcc:	7a5b      	ldrb	r3, [r3, #9]
 8010dce:	2b11      	cmp	r3, #17
 8010dd0:	d006      	beq.n	8010de0 <ip4_input+0x1b8>
 8010dd2:	2b11      	cmp	r3, #17
 8010dd4:	dc13      	bgt.n	8010dfe <ip4_input+0x1d6>
 8010dd6:	2b01      	cmp	r3, #1
 8010dd8:	d00c      	beq.n	8010df4 <ip4_input+0x1cc>
 8010dda:	2b06      	cmp	r3, #6
 8010ddc:	d005      	beq.n	8010dea <ip4_input+0x1c2>
 8010dde:	e00e      	b.n	8010dfe <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010de0:	6839      	ldr	r1, [r7, #0]
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	f7fe f902 	bl	800efec <udp_input>
        break;
 8010de8:	e026      	b.n	8010e38 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8010dea:	6839      	ldr	r1, [r7, #0]
 8010dec:	6878      	ldr	r0, [r7, #4]
 8010dee:	f7fa f909 	bl	800b004 <tcp_input>
        break;
 8010df2:	e021      	b.n	8010e38 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010df4:	6839      	ldr	r1, [r7, #0]
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f7ff fcee 	bl	80107d8 <icmp_input>
        break;
 8010dfc:	e01c      	b.n	8010e38 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010dfe:	4b1a      	ldr	r3, [pc, #104]	; (8010e68 <ip4_input+0x240>)
 8010e00:	695b      	ldr	r3, [r3, #20]
 8010e02:	6939      	ldr	r1, [r7, #16]
 8010e04:	4618      	mov	r0, r3
 8010e06:	f000 f90b 	bl	8011020 <ip4_addr_isbroadcast_u32>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d10f      	bne.n	8010e30 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010e10:	4b15      	ldr	r3, [pc, #84]	; (8010e68 <ip4_input+0x240>)
 8010e12:	695b      	ldr	r3, [r3, #20]
 8010e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010e18:	2be0      	cmp	r3, #224	; 0xe0
 8010e1a:	d009      	beq.n	8010e30 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010e1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010e20:	4619      	mov	r1, r3
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f7f8 fa3f 	bl	80092a6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010e28:	2102      	movs	r1, #2
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f7ff fdd8 	bl	80109e0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f7f8 fa4b 	bl	80092cc <pbuf_free>
        break;
 8010e36:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010e38:	4b0b      	ldr	r3, [pc, #44]	; (8010e68 <ip4_input+0x240>)
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010e3e:	4b0a      	ldr	r3, [pc, #40]	; (8010e68 <ip4_input+0x240>)
 8010e40:	2200      	movs	r2, #0
 8010e42:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010e44:	4b08      	ldr	r3, [pc, #32]	; (8010e68 <ip4_input+0x240>)
 8010e46:	2200      	movs	r2, #0
 8010e48:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010e4a:	4b07      	ldr	r3, [pc, #28]	; (8010e68 <ip4_input+0x240>)
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010e50:	4b05      	ldr	r3, [pc, #20]	; (8010e68 <ip4_input+0x240>)
 8010e52:	2200      	movs	r2, #0
 8010e54:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010e56:	4b04      	ldr	r3, [pc, #16]	; (8010e68 <ip4_input+0x240>)
 8010e58:	2200      	movs	r2, #0
 8010e5a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010e5c:	2300      	movs	r3, #0
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	3718      	adds	r7, #24
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}
 8010e66:	bf00      	nop
 8010e68:	20005348 	.word	0x20005348
 8010e6c:	2000aa6c 	.word	0x2000aa6c

08010e70 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b08a      	sub	sp, #40	; 0x28
 8010e74:	af04      	add	r7, sp, #16
 8010e76:	60f8      	str	r0, [r7, #12]
 8010e78:	60b9      	str	r1, [r7, #8]
 8010e7a:	607a      	str	r2, [r7, #4]
 8010e7c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d009      	beq.n	8010e9c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d003      	beq.n	8010e96 <ip4_output_if+0x26>
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d102      	bne.n	8010e9c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e98:	3304      	adds	r3, #4
 8010e9a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010e9c:	78fa      	ldrb	r2, [r7, #3]
 8010e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ea0:	9302      	str	r3, [sp, #8]
 8010ea2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010ea6:	9301      	str	r3, [sp, #4]
 8010ea8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010eac:	9300      	str	r3, [sp, #0]
 8010eae:	4613      	mov	r3, r2
 8010eb0:	687a      	ldr	r2, [r7, #4]
 8010eb2:	6979      	ldr	r1, [r7, #20]
 8010eb4:	68f8      	ldr	r0, [r7, #12]
 8010eb6:	f000 f805 	bl	8010ec4 <ip4_output_if_src>
 8010eba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3718      	adds	r7, #24
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}

08010ec4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b088      	sub	sp, #32
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	60f8      	str	r0, [r7, #12]
 8010ecc:	60b9      	str	r1, [r7, #8]
 8010ece:	607a      	str	r2, [r7, #4]
 8010ed0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	7b9b      	ldrb	r3, [r3, #14]
 8010ed6:	2b01      	cmp	r3, #1
 8010ed8:	d006      	beq.n	8010ee8 <ip4_output_if_src+0x24>
 8010eda:	4b4b      	ldr	r3, [pc, #300]	; (8011008 <ip4_output_if_src+0x144>)
 8010edc:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010ee0:	494a      	ldr	r1, [pc, #296]	; (801100c <ip4_output_if_src+0x148>)
 8010ee2:	484b      	ldr	r0, [pc, #300]	; (8011010 <ip4_output_if_src+0x14c>)
 8010ee4:	f001 f976 	bl	80121d4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d060      	beq.n	8010fb0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010eee:	2314      	movs	r3, #20
 8010ef0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010ef2:	2114      	movs	r1, #20
 8010ef4:	68f8      	ldr	r0, [r7, #12]
 8010ef6:	f7f8 f953 	bl	80091a0 <pbuf_add_header>
 8010efa:	4603      	mov	r3, r0
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d002      	beq.n	8010f06 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010f00:	f06f 0301 	mvn.w	r3, #1
 8010f04:	e07c      	b.n	8011000 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	685b      	ldr	r3, [r3, #4]
 8010f0a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	895b      	ldrh	r3, [r3, #10]
 8010f10:	2b13      	cmp	r3, #19
 8010f12:	d806      	bhi.n	8010f22 <ip4_output_if_src+0x5e>
 8010f14:	4b3c      	ldr	r3, [pc, #240]	; (8011008 <ip4_output_if_src+0x144>)
 8010f16:	f44f 7262 	mov.w	r2, #904	; 0x388
 8010f1a:	493e      	ldr	r1, [pc, #248]	; (8011014 <ip4_output_if_src+0x150>)
 8010f1c:	483c      	ldr	r0, [pc, #240]	; (8011010 <ip4_output_if_src+0x14c>)
 8010f1e:	f001 f959 	bl	80121d4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010f22:	69fb      	ldr	r3, [r7, #28]
 8010f24:	78fa      	ldrb	r2, [r7, #3]
 8010f26:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010f2e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681a      	ldr	r2, [r3, #0]
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010f38:	8b7b      	ldrh	r3, [r7, #26]
 8010f3a:	089b      	lsrs	r3, r3, #2
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	b2db      	uxtb	r3, r3
 8010f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f44:	b2da      	uxtb	r2, r3
 8010f46:	69fb      	ldr	r3, [r7, #28]
 8010f48:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010f4a:	69fb      	ldr	r3, [r7, #28]
 8010f4c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010f50:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	891b      	ldrh	r3, [r3, #8]
 8010f56:	4618      	mov	r0, r3
 8010f58:	f7f6 fe5a 	bl	8007c10 <lwip_htons>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	461a      	mov	r2, r3
 8010f60:	69fb      	ldr	r3, [r7, #28]
 8010f62:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010f64:	69fb      	ldr	r3, [r7, #28]
 8010f66:	2200      	movs	r2, #0
 8010f68:	719a      	strb	r2, [r3, #6]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010f6e:	4b2a      	ldr	r3, [pc, #168]	; (8011018 <ip4_output_if_src+0x154>)
 8010f70:	881b      	ldrh	r3, [r3, #0]
 8010f72:	4618      	mov	r0, r3
 8010f74:	f7f6 fe4c 	bl	8007c10 <lwip_htons>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	69fb      	ldr	r3, [r7, #28]
 8010f7e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010f80:	4b25      	ldr	r3, [pc, #148]	; (8011018 <ip4_output_if_src+0x154>)
 8010f82:	881b      	ldrh	r3, [r3, #0]
 8010f84:	3301      	adds	r3, #1
 8010f86:	b29a      	uxth	r2, r3
 8010f88:	4b23      	ldr	r3, [pc, #140]	; (8011018 <ip4_output_if_src+0x154>)
 8010f8a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d104      	bne.n	8010f9c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010f92:	4b22      	ldr	r3, [pc, #136]	; (801101c <ip4_output_if_src+0x158>)
 8010f94:	681a      	ldr	r2, [r3, #0]
 8010f96:	69fb      	ldr	r3, [r7, #28]
 8010f98:	60da      	str	r2, [r3, #12]
 8010f9a:	e003      	b.n	8010fa4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	681a      	ldr	r2, [r3, #0]
 8010fa0:	69fb      	ldr	r3, [r7, #28]
 8010fa2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010fa4:	69fb      	ldr	r3, [r7, #28]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	729a      	strb	r2, [r3, #10]
 8010faa:	2200      	movs	r2, #0
 8010fac:	72da      	strb	r2, [r3, #11]
 8010fae:	e00f      	b.n	8010fd0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	895b      	ldrh	r3, [r3, #10]
 8010fb4:	2b13      	cmp	r3, #19
 8010fb6:	d802      	bhi.n	8010fbe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010fb8:	f06f 0301 	mvn.w	r3, #1
 8010fbc:	e020      	b.n	8011000 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	691b      	ldr	r3, [r3, #16]
 8010fc8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010fca:	f107 0314 	add.w	r3, r7, #20
 8010fce:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d00c      	beq.n	8010ff2 <ip4_output_if_src+0x12e>
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	891a      	ldrh	r2, [r3, #8]
 8010fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d906      	bls.n	8010ff2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010fe4:	687a      	ldr	r2, [r7, #4]
 8010fe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010fe8:	68f8      	ldr	r0, [r7, #12]
 8010fea:	f000 fd53 	bl	8011a94 <ip4_frag>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	e006      	b.n	8011000 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff4:	695b      	ldr	r3, [r3, #20]
 8010ff6:	687a      	ldr	r2, [r7, #4]
 8010ff8:	68f9      	ldr	r1, [r7, #12]
 8010ffa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ffc:	4798      	blx	r3
 8010ffe:	4603      	mov	r3, r0
}
 8011000:	4618      	mov	r0, r3
 8011002:	3720      	adds	r7, #32
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}
 8011008:	08016dc0 	.word	0x08016dc0
 801100c:	08016df4 	.word	0x08016df4
 8011010:	08016e00 	.word	0x08016e00
 8011014:	08016e28 	.word	0x08016e28
 8011018:	2000abca 	.word	0x2000abca
 801101c:	08017214 	.word	0x08017214

08011020 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011020:	b480      	push	{r7}
 8011022:	b085      	sub	sp, #20
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
 8011028:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011034:	d002      	beq.n	801103c <ip4_addr_isbroadcast_u32+0x1c>
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d101      	bne.n	8011040 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801103c:	2301      	movs	r3, #1
 801103e:	e02a      	b.n	8011096 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011046:	f003 0302 	and.w	r3, r3, #2
 801104a:	2b00      	cmp	r3, #0
 801104c:	d101      	bne.n	8011052 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801104e:	2300      	movs	r3, #0
 8011050:	e021      	b.n	8011096 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	3304      	adds	r3, #4
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	687a      	ldr	r2, [r7, #4]
 801105a:	429a      	cmp	r2, r3
 801105c:	d101      	bne.n	8011062 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801105e:	2300      	movs	r3, #0
 8011060:	e019      	b.n	8011096 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011062:	68fa      	ldr	r2, [r7, #12]
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	3304      	adds	r3, #4
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	405a      	eors	r2, r3
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	3308      	adds	r3, #8
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	4013      	ands	r3, r2
 8011074:	2b00      	cmp	r3, #0
 8011076:	d10d      	bne.n	8011094 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	3308      	adds	r3, #8
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	43da      	mvns	r2, r3
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	3308      	adds	r3, #8
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801108c:	429a      	cmp	r2, r3
 801108e:	d101      	bne.n	8011094 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011090:	2301      	movs	r3, #1
 8011092:	e000      	b.n	8011096 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011094:	2300      	movs	r3, #0
  }
}
 8011096:	4618      	mov	r0, r3
 8011098:	3714      	adds	r7, #20
 801109a:	46bd      	mov	sp, r7
 801109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a0:	4770      	bx	lr
	...

080110a4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b084      	sub	sp, #16
 80110a8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80110aa:	2300      	movs	r3, #0
 80110ac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80110ae:	4b12      	ldr	r3, [pc, #72]	; (80110f8 <ip_reass_tmr+0x54>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80110b4:	e018      	b.n	80110e8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	7fdb      	ldrb	r3, [r3, #31]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d00b      	beq.n	80110d6 <ip_reass_tmr+0x32>
      r->timer--;
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	7fdb      	ldrb	r3, [r3, #31]
 80110c2:	3b01      	subs	r3, #1
 80110c4:	b2da      	uxtb	r2, r3
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	60fb      	str	r3, [r7, #12]
 80110d4:	e008      	b.n	80110e8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80110e0:	68b9      	ldr	r1, [r7, #8]
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f000 f80a 	bl	80110fc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d1e3      	bne.n	80110b6 <ip_reass_tmr+0x12>
    }
  }
}
 80110ee:	bf00      	nop
 80110f0:	bf00      	nop
 80110f2:	3710      	adds	r7, #16
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}
 80110f8:	2000abcc 	.word	0x2000abcc

080110fc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b088      	sub	sp, #32
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011106:	2300      	movs	r3, #0
 8011108:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801110a:	683a      	ldr	r2, [r7, #0]
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	429a      	cmp	r2, r3
 8011110:	d105      	bne.n	801111e <ip_reass_free_complete_datagram+0x22>
 8011112:	4b45      	ldr	r3, [pc, #276]	; (8011228 <ip_reass_free_complete_datagram+0x12c>)
 8011114:	22ab      	movs	r2, #171	; 0xab
 8011116:	4945      	ldr	r1, [pc, #276]	; (801122c <ip_reass_free_complete_datagram+0x130>)
 8011118:	4845      	ldr	r0, [pc, #276]	; (8011230 <ip_reass_free_complete_datagram+0x134>)
 801111a:	f001 f85b 	bl	80121d4 <iprintf>
  if (prev != NULL) {
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d00a      	beq.n	801113a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	687a      	ldr	r2, [r7, #4]
 801112a:	429a      	cmp	r2, r3
 801112c:	d005      	beq.n	801113a <ip_reass_free_complete_datagram+0x3e>
 801112e:	4b3e      	ldr	r3, [pc, #248]	; (8011228 <ip_reass_free_complete_datagram+0x12c>)
 8011130:	22ad      	movs	r2, #173	; 0xad
 8011132:	4940      	ldr	r1, [pc, #256]	; (8011234 <ip_reass_free_complete_datagram+0x138>)
 8011134:	483e      	ldr	r0, [pc, #248]	; (8011230 <ip_reass_free_complete_datagram+0x134>)
 8011136:	f001 f84d 	bl	80121d4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	685b      	ldr	r3, [r3, #4]
 8011140:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	889b      	ldrh	r3, [r3, #4]
 8011146:	b29b      	uxth	r3, r3
 8011148:	2b00      	cmp	r3, #0
 801114a:	d12a      	bne.n	80111a2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	681a      	ldr	r2, [r3, #0]
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801115a:	69bb      	ldr	r3, [r7, #24]
 801115c:	6858      	ldr	r0, [r3, #4]
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	3308      	adds	r3, #8
 8011162:	2214      	movs	r2, #20
 8011164:	4619      	mov	r1, r3
 8011166:	f001 ff24 	bl	8012fb2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801116a:	2101      	movs	r1, #1
 801116c:	69b8      	ldr	r0, [r7, #24]
 801116e:	f7ff fc47 	bl	8010a00 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011172:	69b8      	ldr	r0, [r7, #24]
 8011174:	f7f8 f932 	bl	80093dc <pbuf_clen>
 8011178:	4603      	mov	r3, r0
 801117a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801117c:	8bfa      	ldrh	r2, [r7, #30]
 801117e:	8a7b      	ldrh	r3, [r7, #18]
 8011180:	4413      	add	r3, r2
 8011182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011186:	db05      	blt.n	8011194 <ip_reass_free_complete_datagram+0x98>
 8011188:	4b27      	ldr	r3, [pc, #156]	; (8011228 <ip_reass_free_complete_datagram+0x12c>)
 801118a:	22bc      	movs	r2, #188	; 0xbc
 801118c:	492a      	ldr	r1, [pc, #168]	; (8011238 <ip_reass_free_complete_datagram+0x13c>)
 801118e:	4828      	ldr	r0, [pc, #160]	; (8011230 <ip_reass_free_complete_datagram+0x134>)
 8011190:	f001 f820 	bl	80121d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011194:	8bfa      	ldrh	r2, [r7, #30]
 8011196:	8a7b      	ldrh	r3, [r7, #18]
 8011198:	4413      	add	r3, r2
 801119a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801119c:	69b8      	ldr	r0, [r7, #24]
 801119e:	f7f8 f895 	bl	80092cc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	685b      	ldr	r3, [r3, #4]
 80111a6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80111a8:	e01f      	b.n	80111ea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80111aa:	69bb      	ldr	r3, [r7, #24]
 80111ac:	685b      	ldr	r3, [r3, #4]
 80111ae:	617b      	str	r3, [r7, #20]
    pcur = p;
 80111b0:	69bb      	ldr	r3, [r7, #24]
 80111b2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80111ba:	68f8      	ldr	r0, [r7, #12]
 80111bc:	f7f8 f90e 	bl	80093dc <pbuf_clen>
 80111c0:	4603      	mov	r3, r0
 80111c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80111c4:	8bfa      	ldrh	r2, [r7, #30]
 80111c6:	8a7b      	ldrh	r3, [r7, #18]
 80111c8:	4413      	add	r3, r2
 80111ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111ce:	db05      	blt.n	80111dc <ip_reass_free_complete_datagram+0xe0>
 80111d0:	4b15      	ldr	r3, [pc, #84]	; (8011228 <ip_reass_free_complete_datagram+0x12c>)
 80111d2:	22cc      	movs	r2, #204	; 0xcc
 80111d4:	4918      	ldr	r1, [pc, #96]	; (8011238 <ip_reass_free_complete_datagram+0x13c>)
 80111d6:	4816      	ldr	r0, [pc, #88]	; (8011230 <ip_reass_free_complete_datagram+0x134>)
 80111d8:	f000 fffc 	bl	80121d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80111dc:	8bfa      	ldrh	r2, [r7, #30]
 80111de:	8a7b      	ldrh	r3, [r7, #18]
 80111e0:	4413      	add	r3, r2
 80111e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80111e4:	68f8      	ldr	r0, [r7, #12]
 80111e6:	f7f8 f871 	bl	80092cc <pbuf_free>
  while (p != NULL) {
 80111ea:	69bb      	ldr	r3, [r7, #24]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d1dc      	bne.n	80111aa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80111f0:	6839      	ldr	r1, [r7, #0]
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f000 f8c2 	bl	801137c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80111f8:	4b10      	ldr	r3, [pc, #64]	; (801123c <ip_reass_free_complete_datagram+0x140>)
 80111fa:	881b      	ldrh	r3, [r3, #0]
 80111fc:	8bfa      	ldrh	r2, [r7, #30]
 80111fe:	429a      	cmp	r2, r3
 8011200:	d905      	bls.n	801120e <ip_reass_free_complete_datagram+0x112>
 8011202:	4b09      	ldr	r3, [pc, #36]	; (8011228 <ip_reass_free_complete_datagram+0x12c>)
 8011204:	22d2      	movs	r2, #210	; 0xd2
 8011206:	490e      	ldr	r1, [pc, #56]	; (8011240 <ip_reass_free_complete_datagram+0x144>)
 8011208:	4809      	ldr	r0, [pc, #36]	; (8011230 <ip_reass_free_complete_datagram+0x134>)
 801120a:	f000 ffe3 	bl	80121d4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801120e:	4b0b      	ldr	r3, [pc, #44]	; (801123c <ip_reass_free_complete_datagram+0x140>)
 8011210:	881a      	ldrh	r2, [r3, #0]
 8011212:	8bfb      	ldrh	r3, [r7, #30]
 8011214:	1ad3      	subs	r3, r2, r3
 8011216:	b29a      	uxth	r2, r3
 8011218:	4b08      	ldr	r3, [pc, #32]	; (801123c <ip_reass_free_complete_datagram+0x140>)
 801121a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801121c:	8bfb      	ldrh	r3, [r7, #30]
}
 801121e:	4618      	mov	r0, r3
 8011220:	3720      	adds	r7, #32
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
 8011226:	bf00      	nop
 8011228:	08016e58 	.word	0x08016e58
 801122c:	08016e94 	.word	0x08016e94
 8011230:	08016ea0 	.word	0x08016ea0
 8011234:	08016ec8 	.word	0x08016ec8
 8011238:	08016edc 	.word	0x08016edc
 801123c:	2000abd0 	.word	0x2000abd0
 8011240:	08016efc 	.word	0x08016efc

08011244 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b08a      	sub	sp, #40	; 0x28
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801124e:	2300      	movs	r3, #0
 8011250:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011252:	2300      	movs	r3, #0
 8011254:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011256:	2300      	movs	r3, #0
 8011258:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801125a:	2300      	movs	r3, #0
 801125c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801125e:	2300      	movs	r3, #0
 8011260:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011262:	4b28      	ldr	r3, [pc, #160]	; (8011304 <ip_reass_remove_oldest_datagram+0xc0>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011268:	e030      	b.n	80112cc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126c:	695a      	ldr	r2, [r3, #20]
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	68db      	ldr	r3, [r3, #12]
 8011272:	429a      	cmp	r2, r3
 8011274:	d10c      	bne.n	8011290 <ip_reass_remove_oldest_datagram+0x4c>
 8011276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011278:	699a      	ldr	r2, [r3, #24]
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	691b      	ldr	r3, [r3, #16]
 801127e:	429a      	cmp	r2, r3
 8011280:	d106      	bne.n	8011290 <ip_reass_remove_oldest_datagram+0x4c>
 8011282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011284:	899a      	ldrh	r2, [r3, #12]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	889b      	ldrh	r3, [r3, #4]
 801128a:	b29b      	uxth	r3, r3
 801128c:	429a      	cmp	r2, r3
 801128e:	d014      	beq.n	80112ba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011290:	693b      	ldr	r3, [r7, #16]
 8011292:	3301      	adds	r3, #1
 8011294:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011296:	6a3b      	ldr	r3, [r7, #32]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d104      	bne.n	80112a6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80112a0:	69fb      	ldr	r3, [r7, #28]
 80112a2:	61bb      	str	r3, [r7, #24]
 80112a4:	e009      	b.n	80112ba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80112a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a8:	7fda      	ldrb	r2, [r3, #31]
 80112aa:	6a3b      	ldr	r3, [r7, #32]
 80112ac:	7fdb      	ldrb	r3, [r3, #31]
 80112ae:	429a      	cmp	r2, r3
 80112b0:	d803      	bhi.n	80112ba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80112b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80112b6:	69fb      	ldr	r3, [r7, #28]
 80112b8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80112ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d001      	beq.n	80112c6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80112c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80112c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80112cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d1cb      	bne.n	801126a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80112d2:	6a3b      	ldr	r3, [r7, #32]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d008      	beq.n	80112ea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80112d8:	69b9      	ldr	r1, [r7, #24]
 80112da:	6a38      	ldr	r0, [r7, #32]
 80112dc:	f7ff ff0e 	bl	80110fc <ip_reass_free_complete_datagram>
 80112e0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80112e2:	697a      	ldr	r2, [r7, #20]
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	4413      	add	r3, r2
 80112e8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80112ea:	697a      	ldr	r2, [r7, #20]
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	da02      	bge.n	80112f8 <ip_reass_remove_oldest_datagram+0xb4>
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	2b01      	cmp	r3, #1
 80112f6:	dcac      	bgt.n	8011252 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80112f8:	697b      	ldr	r3, [r7, #20]
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	3728      	adds	r7, #40	; 0x28
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}
 8011302:	bf00      	nop
 8011304:	2000abcc 	.word	0x2000abcc

08011308 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011312:	2004      	movs	r0, #4
 8011314:	f7f7 f8f4 	bl	8008500 <memp_malloc>
 8011318:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d110      	bne.n	8011342 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011320:	6839      	ldr	r1, [r7, #0]
 8011322:	6878      	ldr	r0, [r7, #4]
 8011324:	f7ff ff8e 	bl	8011244 <ip_reass_remove_oldest_datagram>
 8011328:	4602      	mov	r2, r0
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	4293      	cmp	r3, r2
 801132e:	dc03      	bgt.n	8011338 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011330:	2004      	movs	r0, #4
 8011332:	f7f7 f8e5 	bl	8008500 <memp_malloc>
 8011336:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d101      	bne.n	8011342 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801133e:	2300      	movs	r3, #0
 8011340:	e016      	b.n	8011370 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011342:	2220      	movs	r2, #32
 8011344:	2100      	movs	r1, #0
 8011346:	68f8      	ldr	r0, [r7, #12]
 8011348:	f000 ffab 	bl	80122a2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	220f      	movs	r2, #15
 8011350:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011352:	4b09      	ldr	r3, [pc, #36]	; (8011378 <ip_reass_enqueue_new_datagram+0x70>)
 8011354:	681a      	ldr	r2, [r3, #0]
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801135a:	4a07      	ldr	r2, [pc, #28]	; (8011378 <ip_reass_enqueue_new_datagram+0x70>)
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	3308      	adds	r3, #8
 8011364:	2214      	movs	r2, #20
 8011366:	6879      	ldr	r1, [r7, #4]
 8011368:	4618      	mov	r0, r3
 801136a:	f001 fe22 	bl	8012fb2 <memcpy>
  return ipr;
 801136e:	68fb      	ldr	r3, [r7, #12]
}
 8011370:	4618      	mov	r0, r3
 8011372:	3710      	adds	r7, #16
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}
 8011378:	2000abcc 	.word	0x2000abcc

0801137c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b082      	sub	sp, #8
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011386:	4b10      	ldr	r3, [pc, #64]	; (80113c8 <ip_reass_dequeue_datagram+0x4c>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	687a      	ldr	r2, [r7, #4]
 801138c:	429a      	cmp	r2, r3
 801138e:	d104      	bne.n	801139a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	4a0c      	ldr	r2, [pc, #48]	; (80113c8 <ip_reass_dequeue_datagram+0x4c>)
 8011396:	6013      	str	r3, [r2, #0]
 8011398:	e00d      	b.n	80113b6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801139a:	683b      	ldr	r3, [r7, #0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d106      	bne.n	80113ae <ip_reass_dequeue_datagram+0x32>
 80113a0:	4b0a      	ldr	r3, [pc, #40]	; (80113cc <ip_reass_dequeue_datagram+0x50>)
 80113a2:	f240 1245 	movw	r2, #325	; 0x145
 80113a6:	490a      	ldr	r1, [pc, #40]	; (80113d0 <ip_reass_dequeue_datagram+0x54>)
 80113a8:	480a      	ldr	r0, [pc, #40]	; (80113d4 <ip_reass_dequeue_datagram+0x58>)
 80113aa:	f000 ff13 	bl	80121d4 <iprintf>
    prev->next = ipr->next;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681a      	ldr	r2, [r3, #0]
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80113b6:	6879      	ldr	r1, [r7, #4]
 80113b8:	2004      	movs	r0, #4
 80113ba:	f7f7 f911 	bl	80085e0 <memp_free>
}
 80113be:	bf00      	nop
 80113c0:	3708      	adds	r7, #8
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}
 80113c6:	bf00      	nop
 80113c8:	2000abcc 	.word	0x2000abcc
 80113cc:	08016e58 	.word	0x08016e58
 80113d0:	08016f20 	.word	0x08016f20
 80113d4:	08016ea0 	.word	0x08016ea0

080113d8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b08c      	sub	sp, #48	; 0x30
 80113dc:	af00      	add	r7, sp, #0
 80113de:	60f8      	str	r0, [r7, #12]
 80113e0:	60b9      	str	r1, [r7, #8]
 80113e2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80113e4:	2300      	movs	r3, #0
 80113e6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80113e8:	2301      	movs	r3, #1
 80113ea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	685b      	ldr	r3, [r3, #4]
 80113f0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80113f2:	69fb      	ldr	r3, [r7, #28]
 80113f4:	885b      	ldrh	r3, [r3, #2]
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7f6 fc09 	bl	8007c10 <lwip_htons>
 80113fe:	4603      	mov	r3, r0
 8011400:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011402:	69fb      	ldr	r3, [r7, #28]
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	f003 030f 	and.w	r3, r3, #15
 801140a:	b2db      	uxtb	r3, r3
 801140c:	009b      	lsls	r3, r3, #2
 801140e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011410:	7e7b      	ldrb	r3, [r7, #25]
 8011412:	b29b      	uxth	r3, r3
 8011414:	8b7a      	ldrh	r2, [r7, #26]
 8011416:	429a      	cmp	r2, r3
 8011418:	d202      	bcs.n	8011420 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801141a:	f04f 33ff 	mov.w	r3, #4294967295
 801141e:	e135      	b.n	801168c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011420:	7e7b      	ldrb	r3, [r7, #25]
 8011422:	b29b      	uxth	r3, r3
 8011424:	8b7a      	ldrh	r2, [r7, #26]
 8011426:	1ad3      	subs	r3, r2, r3
 8011428:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801142a:	69fb      	ldr	r3, [r7, #28]
 801142c:	88db      	ldrh	r3, [r3, #6]
 801142e:	b29b      	uxth	r3, r3
 8011430:	4618      	mov	r0, r3
 8011432:	f7f6 fbed 	bl	8007c10 <lwip_htons>
 8011436:	4603      	mov	r3, r0
 8011438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801143c:	b29b      	uxth	r3, r3
 801143e:	00db      	lsls	r3, r3, #3
 8011440:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	685b      	ldr	r3, [r3, #4]
 8011446:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801144a:	2200      	movs	r2, #0
 801144c:	701a      	strb	r2, [r3, #0]
 801144e:	2200      	movs	r2, #0
 8011450:	705a      	strb	r2, [r3, #1]
 8011452:	2200      	movs	r2, #0
 8011454:	709a      	strb	r2, [r3, #2]
 8011456:	2200      	movs	r2, #0
 8011458:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801145c:	8afa      	ldrh	r2, [r7, #22]
 801145e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011460:	8afa      	ldrh	r2, [r7, #22]
 8011462:	8b7b      	ldrh	r3, [r7, #26]
 8011464:	4413      	add	r3, r2
 8011466:	b29a      	uxth	r2, r3
 8011468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801146a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801146c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801146e:	88db      	ldrh	r3, [r3, #6]
 8011470:	b29b      	uxth	r3, r3
 8011472:	8afa      	ldrh	r2, [r7, #22]
 8011474:	429a      	cmp	r2, r3
 8011476:	d902      	bls.n	801147e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011478:	f04f 33ff 	mov.w	r3, #4294967295
 801147c:	e106      	b.n	801168c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	685b      	ldr	r3, [r3, #4]
 8011482:	627b      	str	r3, [r7, #36]	; 0x24
 8011484:	e068      	b.n	8011558 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801148c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148e:	889b      	ldrh	r3, [r3, #4]
 8011490:	b29a      	uxth	r2, r3
 8011492:	693b      	ldr	r3, [r7, #16]
 8011494:	889b      	ldrh	r3, [r3, #4]
 8011496:	b29b      	uxth	r3, r3
 8011498:	429a      	cmp	r2, r3
 801149a:	d235      	bcs.n	8011508 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801149e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80114a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d020      	beq.n	80114ea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80114a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114aa:	889b      	ldrh	r3, [r3, #4]
 80114ac:	b29a      	uxth	r2, r3
 80114ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b0:	88db      	ldrh	r3, [r3, #6]
 80114b2:	b29b      	uxth	r3, r3
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d307      	bcc.n	80114c8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80114b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ba:	88db      	ldrh	r3, [r3, #6]
 80114bc:	b29a      	uxth	r2, r3
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	889b      	ldrh	r3, [r3, #4]
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d902      	bls.n	80114ce <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80114c8:	f04f 33ff 	mov.w	r3, #4294967295
 80114cc:	e0de      	b.n	801168c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80114ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d0:	68ba      	ldr	r2, [r7, #8]
 80114d2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80114d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d6:	88db      	ldrh	r3, [r3, #6]
 80114d8:	b29a      	uxth	r2, r3
 80114da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114dc:	889b      	ldrh	r3, [r3, #4]
 80114de:	b29b      	uxth	r3, r3
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d03d      	beq.n	8011560 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80114e4:	2300      	movs	r3, #0
 80114e6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80114e8:	e03a      	b.n	8011560 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80114ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ec:	88db      	ldrh	r3, [r3, #6]
 80114ee:	b29a      	uxth	r2, r3
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	889b      	ldrh	r3, [r3, #4]
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d902      	bls.n	8011500 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80114fa:	f04f 33ff 	mov.w	r3, #4294967295
 80114fe:	e0c5      	b.n	801168c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	68ba      	ldr	r2, [r7, #8]
 8011504:	605a      	str	r2, [r3, #4]
      break;
 8011506:	e02b      	b.n	8011560 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150a:	889b      	ldrh	r3, [r3, #4]
 801150c:	b29a      	uxth	r2, r3
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	889b      	ldrh	r3, [r3, #4]
 8011512:	b29b      	uxth	r3, r3
 8011514:	429a      	cmp	r2, r3
 8011516:	d102      	bne.n	801151e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011518:	f04f 33ff 	mov.w	r3, #4294967295
 801151c:	e0b6      	b.n	801168c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011520:	889b      	ldrh	r3, [r3, #4]
 8011522:	b29a      	uxth	r2, r3
 8011524:	693b      	ldr	r3, [r7, #16]
 8011526:	88db      	ldrh	r3, [r3, #6]
 8011528:	b29b      	uxth	r3, r3
 801152a:	429a      	cmp	r2, r3
 801152c:	d202      	bcs.n	8011534 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801152e:	f04f 33ff 	mov.w	r3, #4294967295
 8011532:	e0ab      	b.n	801168c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011536:	2b00      	cmp	r3, #0
 8011538:	d009      	beq.n	801154e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801153a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153c:	88db      	ldrh	r3, [r3, #6]
 801153e:	b29a      	uxth	r2, r3
 8011540:	693b      	ldr	r3, [r7, #16]
 8011542:	889b      	ldrh	r3, [r3, #4]
 8011544:	b29b      	uxth	r3, r3
 8011546:	429a      	cmp	r2, r3
 8011548:	d001      	beq.n	801154e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801154a:	2300      	movs	r3, #0
 801154c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801155a:	2b00      	cmp	r3, #0
 801155c:	d193      	bne.n	8011486 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801155e:	e000      	b.n	8011562 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011560:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011564:	2b00      	cmp	r3, #0
 8011566:	d12d      	bne.n	80115c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156a:	2b00      	cmp	r3, #0
 801156c:	d01c      	beq.n	80115a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011570:	88db      	ldrh	r3, [r3, #6]
 8011572:	b29a      	uxth	r2, r3
 8011574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011576:	889b      	ldrh	r3, [r3, #4]
 8011578:	b29b      	uxth	r3, r3
 801157a:	429a      	cmp	r2, r3
 801157c:	d906      	bls.n	801158c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801157e:	4b45      	ldr	r3, [pc, #276]	; (8011694 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011580:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011584:	4944      	ldr	r1, [pc, #272]	; (8011698 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011586:	4845      	ldr	r0, [pc, #276]	; (801169c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011588:	f000 fe24 	bl	80121d4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801158e:	68ba      	ldr	r2, [r7, #8]
 8011590:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011594:	88db      	ldrh	r3, [r3, #6]
 8011596:	b29a      	uxth	r2, r3
 8011598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801159a:	889b      	ldrh	r3, [r3, #4]
 801159c:	b29b      	uxth	r3, r3
 801159e:	429a      	cmp	r2, r3
 80115a0:	d010      	beq.n	80115c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80115a2:	2300      	movs	r3, #0
 80115a4:	623b      	str	r3, [r7, #32]
 80115a6:	e00d      	b.n	80115c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	685b      	ldr	r3, [r3, #4]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d006      	beq.n	80115be <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80115b0:	4b38      	ldr	r3, [pc, #224]	; (8011694 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80115b2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80115b6:	493a      	ldr	r1, [pc, #232]	; (80116a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80115b8:	4838      	ldr	r0, [pc, #224]	; (801169c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80115ba:	f000 fe0b 	bl	80121d4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	68ba      	ldr	r2, [r7, #8]
 80115c2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d105      	bne.n	80115d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	7f9b      	ldrb	r3, [r3, #30]
 80115ce:	f003 0301 	and.w	r3, r3, #1
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d059      	beq.n	801168a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80115d6:	6a3b      	ldr	r3, [r7, #32]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d04f      	beq.n	801167c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	685b      	ldr	r3, [r3, #4]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d006      	beq.n	80115f2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	889b      	ldrh	r3, [r3, #4]
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d002      	beq.n	80115f8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80115f2:	2300      	movs	r3, #0
 80115f4:	623b      	str	r3, [r7, #32]
 80115f6:	e041      	b.n	801167c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80115f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115fa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80115fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011602:	e012      	b.n	801162a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011606:	685b      	ldr	r3, [r3, #4]
 8011608:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801160a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801160c:	88db      	ldrh	r3, [r3, #6]
 801160e:	b29a      	uxth	r2, r3
 8011610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011612:	889b      	ldrh	r3, [r3, #4]
 8011614:	b29b      	uxth	r3, r3
 8011616:	429a      	cmp	r2, r3
 8011618:	d002      	beq.n	8011620 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801161a:	2300      	movs	r3, #0
 801161c:	623b      	str	r3, [r7, #32]
            break;
 801161e:	e007      	b.n	8011630 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011622:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801162c:	2b00      	cmp	r3, #0
 801162e:	d1e9      	bne.n	8011604 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011630:	6a3b      	ldr	r3, [r7, #32]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d022      	beq.n	801167c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	685b      	ldr	r3, [r3, #4]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d106      	bne.n	801164c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801163e:	4b15      	ldr	r3, [pc, #84]	; (8011694 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011640:	f240 12df 	movw	r2, #479	; 0x1df
 8011644:	4917      	ldr	r1, [pc, #92]	; (80116a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011646:	4815      	ldr	r0, [pc, #84]	; (801169c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011648:	f000 fdc4 	bl	80121d4 <iprintf>
          LWIP_ASSERT("sanity check",
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	685b      	ldr	r3, [r3, #4]
 8011650:	685b      	ldr	r3, [r3, #4]
 8011652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011654:	429a      	cmp	r2, r3
 8011656:	d106      	bne.n	8011666 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011658:	4b0e      	ldr	r3, [pc, #56]	; (8011694 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801165a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801165e:	4911      	ldr	r1, [pc, #68]	; (80116a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011660:	480e      	ldr	r0, [pc, #56]	; (801169c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011662:	f000 fdb7 	bl	80121d4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d006      	beq.n	801167c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801166e:	4b09      	ldr	r3, [pc, #36]	; (8011694 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011670:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8011674:	490c      	ldr	r1, [pc, #48]	; (80116a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011676:	4809      	ldr	r0, [pc, #36]	; (801169c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011678:	f000 fdac 	bl	80121d4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801167c:	6a3b      	ldr	r3, [r7, #32]
 801167e:	2b00      	cmp	r3, #0
 8011680:	bf14      	ite	ne
 8011682:	2301      	movne	r3, #1
 8011684:	2300      	moveq	r3, #0
 8011686:	b2db      	uxtb	r3, r3
 8011688:	e000      	b.n	801168c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801168a:	2300      	movs	r3, #0
}
 801168c:	4618      	mov	r0, r3
 801168e:	3730      	adds	r7, #48	; 0x30
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}
 8011694:	08016e58 	.word	0x08016e58
 8011698:	08016f3c 	.word	0x08016f3c
 801169c:	08016ea0 	.word	0x08016ea0
 80116a0:	08016f5c 	.word	0x08016f5c
 80116a4:	08016f94 	.word	0x08016f94
 80116a8:	08016fa4 	.word	0x08016fa4

080116ac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b08e      	sub	sp, #56	; 0x38
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	685b      	ldr	r3, [r3, #4]
 80116b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80116ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	f003 030f 	and.w	r3, r3, #15
 80116c2:	b2db      	uxtb	r3, r3
 80116c4:	009b      	lsls	r3, r3, #2
 80116c6:	b2db      	uxtb	r3, r3
 80116c8:	2b14      	cmp	r3, #20
 80116ca:	f040 8171 	bne.w	80119b0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80116ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d0:	88db      	ldrh	r3, [r3, #6]
 80116d2:	b29b      	uxth	r3, r3
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7f6 fa9b 	bl	8007c10 <lwip_htons>
 80116da:	4603      	mov	r3, r0
 80116dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	00db      	lsls	r3, r3, #3
 80116e4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80116e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116e8:	885b      	ldrh	r3, [r3, #2]
 80116ea:	b29b      	uxth	r3, r3
 80116ec:	4618      	mov	r0, r3
 80116ee:	f7f6 fa8f 	bl	8007c10 <lwip_htons>
 80116f2:	4603      	mov	r3, r0
 80116f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80116f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	f003 030f 	and.w	r3, r3, #15
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	009b      	lsls	r3, r3, #2
 8011702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8011706:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801170a:	b29b      	uxth	r3, r3
 801170c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801170e:	429a      	cmp	r2, r3
 8011710:	f0c0 8150 	bcc.w	80119b4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011714:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011718:	b29b      	uxth	r3, r3
 801171a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801171c:	1ad3      	subs	r3, r2, r3
 801171e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f7f7 fe5b 	bl	80093dc <pbuf_clen>
 8011726:	4603      	mov	r3, r0
 8011728:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801172a:	4b8c      	ldr	r3, [pc, #560]	; (801195c <ip4_reass+0x2b0>)
 801172c:	881b      	ldrh	r3, [r3, #0]
 801172e:	461a      	mov	r2, r3
 8011730:	8c3b      	ldrh	r3, [r7, #32]
 8011732:	4413      	add	r3, r2
 8011734:	2b0a      	cmp	r3, #10
 8011736:	dd10      	ble.n	801175a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011738:	8c3b      	ldrh	r3, [r7, #32]
 801173a:	4619      	mov	r1, r3
 801173c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801173e:	f7ff fd81 	bl	8011244 <ip_reass_remove_oldest_datagram>
 8011742:	4603      	mov	r3, r0
 8011744:	2b00      	cmp	r3, #0
 8011746:	f000 8137 	beq.w	80119b8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801174a:	4b84      	ldr	r3, [pc, #528]	; (801195c <ip4_reass+0x2b0>)
 801174c:	881b      	ldrh	r3, [r3, #0]
 801174e:	461a      	mov	r2, r3
 8011750:	8c3b      	ldrh	r3, [r7, #32]
 8011752:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011754:	2b0a      	cmp	r3, #10
 8011756:	f300 812f 	bgt.w	80119b8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801175a:	4b81      	ldr	r3, [pc, #516]	; (8011960 <ip4_reass+0x2b4>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	633b      	str	r3, [r7, #48]	; 0x30
 8011760:	e015      	b.n	801178e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011764:	695a      	ldr	r2, [r3, #20]
 8011766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011768:	68db      	ldr	r3, [r3, #12]
 801176a:	429a      	cmp	r2, r3
 801176c:	d10c      	bne.n	8011788 <ip4_reass+0xdc>
 801176e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011770:	699a      	ldr	r2, [r3, #24]
 8011772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011774:	691b      	ldr	r3, [r3, #16]
 8011776:	429a      	cmp	r2, r3
 8011778:	d106      	bne.n	8011788 <ip4_reass+0xdc>
 801177a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801177c:	899a      	ldrh	r2, [r3, #12]
 801177e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011780:	889b      	ldrh	r3, [r3, #4]
 8011782:	b29b      	uxth	r3, r3
 8011784:	429a      	cmp	r2, r3
 8011786:	d006      	beq.n	8011796 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	633b      	str	r3, [r7, #48]	; 0x30
 801178e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011790:	2b00      	cmp	r3, #0
 8011792:	d1e6      	bne.n	8011762 <ip4_reass+0xb6>
 8011794:	e000      	b.n	8011798 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011796:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179a:	2b00      	cmp	r3, #0
 801179c:	d109      	bne.n	80117b2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801179e:	8c3b      	ldrh	r3, [r7, #32]
 80117a0:	4619      	mov	r1, r3
 80117a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80117a4:	f7ff fdb0 	bl	8011308 <ip_reass_enqueue_new_datagram>
 80117a8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80117aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d11c      	bne.n	80117ea <ip4_reass+0x13e>
      goto nullreturn;
 80117b0:	e105      	b.n	80119be <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80117b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117b4:	88db      	ldrh	r3, [r3, #6]
 80117b6:	b29b      	uxth	r3, r3
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7f6 fa29 	bl	8007c10 <lwip_htons>
 80117be:	4603      	mov	r3, r0
 80117c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d110      	bne.n	80117ea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80117c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ca:	89db      	ldrh	r3, [r3, #14]
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7f6 fa1f 	bl	8007c10 <lwip_htons>
 80117d2:	4603      	mov	r3, r0
 80117d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d006      	beq.n	80117ea <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80117dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117de:	3308      	adds	r3, #8
 80117e0:	2214      	movs	r2, #20
 80117e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80117e4:	4618      	mov	r0, r3
 80117e6:	f001 fbe4 	bl	8012fb2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80117ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ec:	88db      	ldrh	r3, [r3, #6]
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	f003 0320 	and.w	r3, r3, #32
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	bf0c      	ite	eq
 80117f8:	2301      	moveq	r3, #1
 80117fa:	2300      	movne	r3, #0
 80117fc:	b2db      	uxtb	r3, r3
 80117fe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d00e      	beq.n	8011824 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011806:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801180a:	4413      	add	r3, r2
 801180c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801180e:	8b7a      	ldrh	r2, [r7, #26]
 8011810:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011812:	429a      	cmp	r2, r3
 8011814:	f0c0 80a0 	bcc.w	8011958 <ip4_reass+0x2ac>
 8011818:	8b7b      	ldrh	r3, [r7, #26]
 801181a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801181e:	4293      	cmp	r3, r2
 8011820:	f200 809a 	bhi.w	8011958 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011824:	69fa      	ldr	r2, [r7, #28]
 8011826:	6879      	ldr	r1, [r7, #4]
 8011828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801182a:	f7ff fdd5 	bl	80113d8 <ip_reass_chain_frag_into_datagram_and_validate>
 801182e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011836:	f000 809b 	beq.w	8011970 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801183a:	4b48      	ldr	r3, [pc, #288]	; (801195c <ip4_reass+0x2b0>)
 801183c:	881a      	ldrh	r2, [r3, #0]
 801183e:	8c3b      	ldrh	r3, [r7, #32]
 8011840:	4413      	add	r3, r2
 8011842:	b29a      	uxth	r2, r3
 8011844:	4b45      	ldr	r3, [pc, #276]	; (801195c <ip4_reass+0x2b0>)
 8011846:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011848:	69fb      	ldr	r3, [r7, #28]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d00d      	beq.n	801186a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801184e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011850:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011852:	4413      	add	r3, r2
 8011854:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011858:	8a7a      	ldrh	r2, [r7, #18]
 801185a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801185c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801185e:	7f9b      	ldrb	r3, [r3, #30]
 8011860:	f043 0301 	orr.w	r3, r3, #1
 8011864:	b2da      	uxtb	r2, r3
 8011866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011868:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	2b01      	cmp	r3, #1
 801186e:	d171      	bne.n	8011954 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011872:	8b9b      	ldrh	r3, [r3, #28]
 8011874:	3314      	adds	r3, #20
 8011876:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801187a:	685b      	ldr	r3, [r3, #4]
 801187c:	685b      	ldr	r3, [r3, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011884:	685b      	ldr	r3, [r3, #4]
 8011886:	685b      	ldr	r3, [r3, #4]
 8011888:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801188c:	3308      	adds	r3, #8
 801188e:	2214      	movs	r2, #20
 8011890:	4619      	mov	r1, r3
 8011892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011894:	f001 fb8d 	bl	8012fb2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011898:	8a3b      	ldrh	r3, [r7, #16]
 801189a:	4618      	mov	r0, r3
 801189c:	f7f6 f9b8 	bl	8007c10 <lwip_htons>
 80118a0:	4603      	mov	r3, r0
 80118a2:	461a      	mov	r2, r3
 80118a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118a6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80118a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118aa:	2200      	movs	r2, #0
 80118ac:	719a      	strb	r2, [r3, #6]
 80118ae:	2200      	movs	r2, #0
 80118b0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80118b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118b4:	2200      	movs	r2, #0
 80118b6:	729a      	strb	r2, [r3, #10]
 80118b8:	2200      	movs	r2, #0
 80118ba:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80118bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118be:	685b      	ldr	r3, [r3, #4]
 80118c0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80118c2:	e00d      	b.n	80118e0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80118c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80118ca:	2114      	movs	r1, #20
 80118cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80118ce:	f7f7 fc77 	bl	80091c0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80118d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f7f7 fdbb 	bl	8009450 <pbuf_cat>
      r = iprh->next_pbuf;
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80118e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d1ee      	bne.n	80118c4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80118e6:	4b1e      	ldr	r3, [pc, #120]	; (8011960 <ip4_reass+0x2b4>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d102      	bne.n	80118f6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80118f0:	2300      	movs	r3, #0
 80118f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118f4:	e010      	b.n	8011918 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80118f6:	4b1a      	ldr	r3, [pc, #104]	; (8011960 <ip4_reass+0x2b4>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118fc:	e007      	b.n	801190e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80118fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011904:	429a      	cmp	r2, r3
 8011906:	d006      	beq.n	8011916 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011910:	2b00      	cmp	r3, #0
 8011912:	d1f4      	bne.n	80118fe <ip4_reass+0x252>
 8011914:	e000      	b.n	8011918 <ip4_reass+0x26c>
          break;
 8011916:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801191a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801191c:	f7ff fd2e 	bl	801137c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f7f7 fd5b 	bl	80093dc <pbuf_clen>
 8011926:	4603      	mov	r3, r0
 8011928:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801192a:	4b0c      	ldr	r3, [pc, #48]	; (801195c <ip4_reass+0x2b0>)
 801192c:	881b      	ldrh	r3, [r3, #0]
 801192e:	8c3a      	ldrh	r2, [r7, #32]
 8011930:	429a      	cmp	r2, r3
 8011932:	d906      	bls.n	8011942 <ip4_reass+0x296>
 8011934:	4b0b      	ldr	r3, [pc, #44]	; (8011964 <ip4_reass+0x2b8>)
 8011936:	f240 229b 	movw	r2, #667	; 0x29b
 801193a:	490b      	ldr	r1, [pc, #44]	; (8011968 <ip4_reass+0x2bc>)
 801193c:	480b      	ldr	r0, [pc, #44]	; (801196c <ip4_reass+0x2c0>)
 801193e:	f000 fc49 	bl	80121d4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011942:	4b06      	ldr	r3, [pc, #24]	; (801195c <ip4_reass+0x2b0>)
 8011944:	881a      	ldrh	r2, [r3, #0]
 8011946:	8c3b      	ldrh	r3, [r7, #32]
 8011948:	1ad3      	subs	r3, r2, r3
 801194a:	b29a      	uxth	r2, r3
 801194c:	4b03      	ldr	r3, [pc, #12]	; (801195c <ip4_reass+0x2b0>)
 801194e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	e038      	b.n	80119c6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011954:	2300      	movs	r3, #0
 8011956:	e036      	b.n	80119c6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8011958:	bf00      	nop
 801195a:	e00a      	b.n	8011972 <ip4_reass+0x2c6>
 801195c:	2000abd0 	.word	0x2000abd0
 8011960:	2000abcc 	.word	0x2000abcc
 8011964:	08016e58 	.word	0x08016e58
 8011968:	08016fc8 	.word	0x08016fc8
 801196c:	08016ea0 	.word	0x08016ea0
    goto nullreturn_ipr;
 8011970:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011974:	2b00      	cmp	r3, #0
 8011976:	d106      	bne.n	8011986 <ip4_reass+0x2da>
 8011978:	4b15      	ldr	r3, [pc, #84]	; (80119d0 <ip4_reass+0x324>)
 801197a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801197e:	4915      	ldr	r1, [pc, #84]	; (80119d4 <ip4_reass+0x328>)
 8011980:	4815      	ldr	r0, [pc, #84]	; (80119d8 <ip4_reass+0x32c>)
 8011982:	f000 fc27 	bl	80121d4 <iprintf>
  if (ipr->p == NULL) {
 8011986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011988:	685b      	ldr	r3, [r3, #4]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d116      	bne.n	80119bc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801198e:	4b13      	ldr	r3, [pc, #76]	; (80119dc <ip4_reass+0x330>)
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011994:	429a      	cmp	r2, r3
 8011996:	d006      	beq.n	80119a6 <ip4_reass+0x2fa>
 8011998:	4b0d      	ldr	r3, [pc, #52]	; (80119d0 <ip4_reass+0x324>)
 801199a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801199e:	4910      	ldr	r1, [pc, #64]	; (80119e0 <ip4_reass+0x334>)
 80119a0:	480d      	ldr	r0, [pc, #52]	; (80119d8 <ip4_reass+0x32c>)
 80119a2:	f000 fc17 	bl	80121d4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80119a6:	2100      	movs	r1, #0
 80119a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119aa:	f7ff fce7 	bl	801137c <ip_reass_dequeue_datagram>
 80119ae:	e006      	b.n	80119be <ip4_reass+0x312>
    goto nullreturn;
 80119b0:	bf00      	nop
 80119b2:	e004      	b.n	80119be <ip4_reass+0x312>
    goto nullreturn;
 80119b4:	bf00      	nop
 80119b6:	e002      	b.n	80119be <ip4_reass+0x312>
      goto nullreturn;
 80119b8:	bf00      	nop
 80119ba:	e000      	b.n	80119be <ip4_reass+0x312>
  }

nullreturn:
 80119bc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f7f7 fc84 	bl	80092cc <pbuf_free>
  return NULL;
 80119c4:	2300      	movs	r3, #0
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	3738      	adds	r7, #56	; 0x38
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}
 80119ce:	bf00      	nop
 80119d0:	08016e58 	.word	0x08016e58
 80119d4:	08016fe4 	.word	0x08016fe4
 80119d8:	08016ea0 	.word	0x08016ea0
 80119dc:	2000abcc 	.word	0x2000abcc
 80119e0:	08016ff0 	.word	0x08016ff0

080119e4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80119e8:	2005      	movs	r0, #5
 80119ea:	f7f6 fd89 	bl	8008500 <memp_malloc>
 80119ee:	4603      	mov	r3, r0
}
 80119f0:	4618      	mov	r0, r3
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b082      	sub	sp, #8
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d106      	bne.n	8011a10 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011a02:	4b07      	ldr	r3, [pc, #28]	; (8011a20 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011a04:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8011a08:	4906      	ldr	r1, [pc, #24]	; (8011a24 <ip_frag_free_pbuf_custom_ref+0x30>)
 8011a0a:	4807      	ldr	r0, [pc, #28]	; (8011a28 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011a0c:	f000 fbe2 	bl	80121d4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011a10:	6879      	ldr	r1, [r7, #4]
 8011a12:	2005      	movs	r0, #5
 8011a14:	f7f6 fde4 	bl	80085e0 <memp_free>
}
 8011a18:	bf00      	nop
 8011a1a:	3708      	adds	r7, #8
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	08016e58 	.word	0x08016e58
 8011a24:	08017010 	.word	0x08017010
 8011a28:	08016ea0 	.word	0x08016ea0

08011a2c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b084      	sub	sp, #16
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d106      	bne.n	8011a4c <ipfrag_free_pbuf_custom+0x20>
 8011a3e:	4b11      	ldr	r3, [pc, #68]	; (8011a84 <ipfrag_free_pbuf_custom+0x58>)
 8011a40:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011a44:	4910      	ldr	r1, [pc, #64]	; (8011a88 <ipfrag_free_pbuf_custom+0x5c>)
 8011a46:	4811      	ldr	r0, [pc, #68]	; (8011a8c <ipfrag_free_pbuf_custom+0x60>)
 8011a48:	f000 fbc4 	bl	80121d4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011a4c:	68fa      	ldr	r2, [r7, #12]
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d006      	beq.n	8011a62 <ipfrag_free_pbuf_custom+0x36>
 8011a54:	4b0b      	ldr	r3, [pc, #44]	; (8011a84 <ipfrag_free_pbuf_custom+0x58>)
 8011a56:	f240 22cf 	movw	r2, #719	; 0x2cf
 8011a5a:	490d      	ldr	r1, [pc, #52]	; (8011a90 <ipfrag_free_pbuf_custom+0x64>)
 8011a5c:	480b      	ldr	r0, [pc, #44]	; (8011a8c <ipfrag_free_pbuf_custom+0x60>)
 8011a5e:	f000 fbb9 	bl	80121d4 <iprintf>
  if (pcr->original != NULL) {
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	695b      	ldr	r3, [r3, #20]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d004      	beq.n	8011a74 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	695b      	ldr	r3, [r3, #20]
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7f7 fc2c 	bl	80092cc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011a74:	68f8      	ldr	r0, [r7, #12]
 8011a76:	f7ff ffbd 	bl	80119f4 <ip_frag_free_pbuf_custom_ref>
}
 8011a7a:	bf00      	nop
 8011a7c:	3710      	adds	r7, #16
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
 8011a82:	bf00      	nop
 8011a84:	08016e58 	.word	0x08016e58
 8011a88:	0801701c 	.word	0x0801701c
 8011a8c:	08016ea0 	.word	0x08016ea0
 8011a90:	08017028 	.word	0x08017028

08011a94 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b094      	sub	sp, #80	; 0x50
 8011a98:	af02      	add	r7, sp, #8
 8011a9a:	60f8      	str	r0, [r7, #12]
 8011a9c:	60b9      	str	r1, [r7, #8]
 8011a9e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011aa6:	68bb      	ldr	r3, [r7, #8]
 8011aa8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011aaa:	3b14      	subs	r3, #20
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	da00      	bge.n	8011ab2 <ip4_frag+0x1e>
 8011ab0:	3307      	adds	r3, #7
 8011ab2:	10db      	asrs	r3, r3, #3
 8011ab4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011ab6:	2314      	movs	r3, #20
 8011ab8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	685b      	ldr	r3, [r3, #4]
 8011abe:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ac2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac6:	781b      	ldrb	r3, [r3, #0]
 8011ac8:	f003 030f 	and.w	r3, r3, #15
 8011acc:	b2db      	uxtb	r3, r3
 8011ace:	009b      	lsls	r3, r3, #2
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	2b14      	cmp	r3, #20
 8011ad4:	d002      	beq.n	8011adc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011ad6:	f06f 0305 	mvn.w	r3, #5
 8011ada:	e110      	b.n	8011cfe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	895b      	ldrh	r3, [r3, #10]
 8011ae0:	2b13      	cmp	r3, #19
 8011ae2:	d809      	bhi.n	8011af8 <ip4_frag+0x64>
 8011ae4:	4b88      	ldr	r3, [pc, #544]	; (8011d08 <ip4_frag+0x274>)
 8011ae6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011aea:	4988      	ldr	r1, [pc, #544]	; (8011d0c <ip4_frag+0x278>)
 8011aec:	4888      	ldr	r0, [pc, #544]	; (8011d10 <ip4_frag+0x27c>)
 8011aee:	f000 fb71 	bl	80121d4 <iprintf>
 8011af2:	f06f 0305 	mvn.w	r3, #5
 8011af6:	e102      	b.n	8011cfe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011afa:	88db      	ldrh	r3, [r3, #6]
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	4618      	mov	r0, r3
 8011b00:	f7f6 f886 	bl	8007c10 <lwip_htons>
 8011b04:	4603      	mov	r3, r0
 8011b06:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011b08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011b0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011b12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011b18:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	891b      	ldrh	r3, [r3, #8]
 8011b1e:	3b14      	subs	r3, #20
 8011b20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011b24:	e0e1      	b.n	8011cea <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011b26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011b28:	00db      	lsls	r3, r3, #3
 8011b2a:	b29b      	uxth	r3, r3
 8011b2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b30:	4293      	cmp	r3, r2
 8011b32:	bf28      	it	cs
 8011b34:	4613      	movcs	r3, r2
 8011b36:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011b38:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b3c:	2114      	movs	r1, #20
 8011b3e:	200e      	movs	r0, #14
 8011b40:	f7f7 f8e0 	bl	8008d04 <pbuf_alloc>
 8011b44:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8011b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	f000 80d5 	beq.w	8011cf8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b50:	895b      	ldrh	r3, [r3, #10]
 8011b52:	2b13      	cmp	r3, #19
 8011b54:	d806      	bhi.n	8011b64 <ip4_frag+0xd0>
 8011b56:	4b6c      	ldr	r3, [pc, #432]	; (8011d08 <ip4_frag+0x274>)
 8011b58:	f44f 7249 	mov.w	r2, #804	; 0x324
 8011b5c:	496d      	ldr	r1, [pc, #436]	; (8011d14 <ip4_frag+0x280>)
 8011b5e:	486c      	ldr	r0, [pc, #432]	; (8011d10 <ip4_frag+0x27c>)
 8011b60:	f000 fb38 	bl	80121d4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b66:	685b      	ldr	r3, [r3, #4]
 8011b68:	2214      	movs	r2, #20
 8011b6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f001 fa20 	bl	8012fb2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b74:	685b      	ldr	r3, [r3, #4]
 8011b76:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011b78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011b7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011b7e:	e064      	b.n	8011c4a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	895a      	ldrh	r2, [r3, #10]
 8011b84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011b86:	1ad3      	subs	r3, r2, r3
 8011b88:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	895b      	ldrh	r3, [r3, #10]
 8011b8e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d906      	bls.n	8011ba2 <ip4_frag+0x10e>
 8011b94:	4b5c      	ldr	r3, [pc, #368]	; (8011d08 <ip4_frag+0x274>)
 8011b96:	f240 322d 	movw	r2, #813	; 0x32d
 8011b9a:	495f      	ldr	r1, [pc, #380]	; (8011d18 <ip4_frag+0x284>)
 8011b9c:	485c      	ldr	r0, [pc, #368]	; (8011d10 <ip4_frag+0x27c>)
 8011b9e:	f000 fb19 	bl	80121d4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011ba2:	8bfa      	ldrh	r2, [r7, #30]
 8011ba4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011ba8:	4293      	cmp	r3, r2
 8011baa:	bf28      	it	cs
 8011bac:	4613      	movcs	r3, r2
 8011bae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011bb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d105      	bne.n	8011bc6 <ip4_frag+0x132>
        poff = 0;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	60fb      	str	r3, [r7, #12]
        continue;
 8011bc4:	e041      	b.n	8011c4a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011bc6:	f7ff ff0d 	bl	80119e4 <ip_frag_alloc_pbuf_custom_ref>
 8011bca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011bcc:	69bb      	ldr	r3, [r7, #24]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d103      	bne.n	8011bda <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011bd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011bd4:	f7f7 fb7a 	bl	80092cc <pbuf_free>
        goto memerr;
 8011bd8:	e08f      	b.n	8011cfa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011bda:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011be0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011be2:	4413      	add	r3, r2
 8011be4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011be8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011bec:	9201      	str	r2, [sp, #4]
 8011bee:	9300      	str	r3, [sp, #0]
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	2241      	movs	r2, #65	; 0x41
 8011bf4:	2000      	movs	r0, #0
 8011bf6:	f7f7 f9af 	bl	8008f58 <pbuf_alloced_custom>
 8011bfa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011bfc:	697b      	ldr	r3, [r7, #20]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d106      	bne.n	8011c10 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011c02:	69b8      	ldr	r0, [r7, #24]
 8011c04:	f7ff fef6 	bl	80119f4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c0a:	f7f7 fb5f 	bl	80092cc <pbuf_free>
        goto memerr;
 8011c0e:	e074      	b.n	8011cfa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011c10:	68f8      	ldr	r0, [r7, #12]
 8011c12:	f7f7 fbfb 	bl	800940c <pbuf_ref>
      pcr->original = p;
 8011c16:	69bb      	ldr	r3, [r7, #24]
 8011c18:	68fa      	ldr	r2, [r7, #12]
 8011c1a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011c1c:	69bb      	ldr	r3, [r7, #24]
 8011c1e:	4a3f      	ldr	r2, [pc, #252]	; (8011d1c <ip4_frag+0x288>)
 8011c20:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011c22:	6979      	ldr	r1, [r7, #20]
 8011c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c26:	f7f7 fc13 	bl	8009450 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011c2a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011c2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011c32:	1ad3      	subs	r3, r2, r3
 8011c34:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011c38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d004      	beq.n	8011c4a <ip4_frag+0x1b6>
        poff = 0;
 8011c40:	2300      	movs	r3, #0
 8011c42:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011c4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d196      	bne.n	8011b80 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011c52:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011c54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011c58:	4413      	add	r3, r2
 8011c5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011c60:	f1a3 0213 	sub.w	r2, r3, #19
 8011c64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	bfcc      	ite	gt
 8011c6c:	2301      	movgt	r3, #1
 8011c6e:	2300      	movle	r3, #0
 8011c70:	b2db      	uxtb	r3, r3
 8011c72:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011c74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011c7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011c7e:	6a3b      	ldr	r3, [r7, #32]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d002      	beq.n	8011c8a <ip4_frag+0x1f6>
 8011c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d003      	beq.n	8011c92 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011c8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011c90:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011c92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c94:	4618      	mov	r0, r3
 8011c96:	f7f5 ffbb 	bl	8007c10 <lwip_htons>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ca0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011ca2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011ca4:	3314      	adds	r3, #20
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f7f5 ffb1 	bl	8007c10 <lwip_htons>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	461a      	mov	r2, r3
 8011cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb8:	2200      	movs	r2, #0
 8011cba:	729a      	strb	r2, [r3, #10]
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	695b      	ldr	r3, [r3, #20]
 8011cc4:	687a      	ldr	r2, [r7, #4]
 8011cc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011cc8:	68b8      	ldr	r0, [r7, #8]
 8011cca:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011ccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cce:	f7f7 fafd 	bl	80092cc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011cd2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011cd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011cd8:	1ad3      	subs	r3, r2, r3
 8011cda:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011cde:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011ce2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011ce4:	4413      	add	r3, r2
 8011ce6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8011cea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	f47f af19 	bne.w	8011b26 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	e002      	b.n	8011cfe <ip4_frag+0x26a>
      goto memerr;
 8011cf8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011cfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	3748      	adds	r7, #72	; 0x48
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}
 8011d06:	bf00      	nop
 8011d08:	08016e58 	.word	0x08016e58
 8011d0c:	08017034 	.word	0x08017034
 8011d10:	08016ea0 	.word	0x08016ea0
 8011d14:	08017050 	.word	0x08017050
 8011d18:	08017070 	.word	0x08017070
 8011d1c:	08011a2d 	.word	0x08011a2d

08011d20 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b086      	sub	sp, #24
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011d2a:	230e      	movs	r3, #14
 8011d2c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	895b      	ldrh	r3, [r3, #10]
 8011d32:	2b0e      	cmp	r3, #14
 8011d34:	d96e      	bls.n	8011e14 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	7bdb      	ldrb	r3, [r3, #15]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d106      	bne.n	8011d4c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011d44:	3301      	adds	r3, #1
 8011d46:	b2da      	uxtb	r2, r3
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	685b      	ldr	r3, [r3, #4]
 8011d50:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011d52:	693b      	ldr	r3, [r7, #16]
 8011d54:	7b1a      	ldrb	r2, [r3, #12]
 8011d56:	7b5b      	ldrb	r3, [r3, #13]
 8011d58:	021b      	lsls	r3, r3, #8
 8011d5a:	4313      	orrs	r3, r2
 8011d5c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	781b      	ldrb	r3, [r3, #0]
 8011d62:	f003 0301 	and.w	r3, r3, #1
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d023      	beq.n	8011db2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d10f      	bne.n	8011d92 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	785b      	ldrb	r3, [r3, #1]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d11b      	bne.n	8011db2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011d7a:	693b      	ldr	r3, [r7, #16]
 8011d7c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011d7e:	2b5e      	cmp	r3, #94	; 0x5e
 8011d80:	d117      	bne.n	8011db2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	7b5b      	ldrb	r3, [r3, #13]
 8011d86:	f043 0310 	orr.w	r3, r3, #16
 8011d8a:	b2da      	uxtb	r2, r3
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	735a      	strb	r2, [r3, #13]
 8011d90:	e00f      	b.n	8011db2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011d92:	693b      	ldr	r3, [r7, #16]
 8011d94:	2206      	movs	r2, #6
 8011d96:	4928      	ldr	r1, [pc, #160]	; (8011e38 <ethernet_input+0x118>)
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f000 fa72 	bl	8012282 <memcmp>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d106      	bne.n	8011db2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	7b5b      	ldrb	r3, [r3, #13]
 8011da8:	f043 0308 	orr.w	r3, r3, #8
 8011dac:	b2da      	uxtb	r2, r3
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011db2:	89fb      	ldrh	r3, [r7, #14]
 8011db4:	2b08      	cmp	r3, #8
 8011db6:	d003      	beq.n	8011dc0 <ethernet_input+0xa0>
 8011db8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011dbc:	d014      	beq.n	8011de8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011dbe:	e032      	b.n	8011e26 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011dc6:	f003 0308 	and.w	r3, r3, #8
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d024      	beq.n	8011e18 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011dce:	8afb      	ldrh	r3, [r7, #22]
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f7f7 f9f4 	bl	80091c0 <pbuf_remove_header>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d11e      	bne.n	8011e1c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011dde:	6839      	ldr	r1, [r7, #0]
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f7fe ff21 	bl	8010c28 <ip4_input>
      break;
 8011de6:	e013      	b.n	8011e10 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011dee:	f003 0308 	and.w	r3, r3, #8
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d014      	beq.n	8011e20 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011df6:	8afb      	ldrh	r3, [r7, #22]
 8011df8:	4619      	mov	r1, r3
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f7f7 f9e0 	bl	80091c0 <pbuf_remove_header>
 8011e00:	4603      	mov	r3, r0
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d10e      	bne.n	8011e24 <ethernet_input+0x104>
        etharp_input(p, netif);
 8011e06:	6839      	ldr	r1, [r7, #0]
 8011e08:	6878      	ldr	r0, [r7, #4]
 8011e0a:	f7fe f8c1 	bl	800ff90 <etharp_input>
      break;
 8011e0e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011e10:	2300      	movs	r3, #0
 8011e12:	e00c      	b.n	8011e2e <ethernet_input+0x10e>
    goto free_and_return;
 8011e14:	bf00      	nop
 8011e16:	e006      	b.n	8011e26 <ethernet_input+0x106>
        goto free_and_return;
 8011e18:	bf00      	nop
 8011e1a:	e004      	b.n	8011e26 <ethernet_input+0x106>
        goto free_and_return;
 8011e1c:	bf00      	nop
 8011e1e:	e002      	b.n	8011e26 <ethernet_input+0x106>
        goto free_and_return;
 8011e20:	bf00      	nop
 8011e22:	e000      	b.n	8011e26 <ethernet_input+0x106>
        goto free_and_return;
 8011e24:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f7f7 fa50 	bl	80092cc <pbuf_free>
  return ERR_OK;
 8011e2c:	2300      	movs	r3, #0
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3718      	adds	r7, #24
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}
 8011e36:	bf00      	nop
 8011e38:	08017218 	.word	0x08017218

08011e3c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b086      	sub	sp, #24
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	60b9      	str	r1, [r7, #8]
 8011e46:	607a      	str	r2, [r7, #4]
 8011e48:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011e4a:	8c3b      	ldrh	r3, [r7, #32]
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f7f5 fedf 	bl	8007c10 <lwip_htons>
 8011e52:	4603      	mov	r3, r0
 8011e54:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011e56:	210e      	movs	r1, #14
 8011e58:	68b8      	ldr	r0, [r7, #8]
 8011e5a:	f7f7 f9a1 	bl	80091a0 <pbuf_add_header>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d125      	bne.n	8011eb0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	685b      	ldr	r3, [r3, #4]
 8011e68:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011e6a:	693b      	ldr	r3, [r7, #16]
 8011e6c:	8afa      	ldrh	r2, [r7, #22]
 8011e6e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	2206      	movs	r2, #6
 8011e74:	6839      	ldr	r1, [r7, #0]
 8011e76:	4618      	mov	r0, r3
 8011e78:	f001 f89b 	bl	8012fb2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	3306      	adds	r3, #6
 8011e80:	2206      	movs	r2, #6
 8011e82:	6879      	ldr	r1, [r7, #4]
 8011e84:	4618      	mov	r0, r3
 8011e86:	f001 f894 	bl	8012fb2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011e90:	2b06      	cmp	r3, #6
 8011e92:	d006      	beq.n	8011ea2 <ethernet_output+0x66>
 8011e94:	4b0a      	ldr	r3, [pc, #40]	; (8011ec0 <ethernet_output+0x84>)
 8011e96:	f44f 7299 	mov.w	r2, #306	; 0x132
 8011e9a:	490a      	ldr	r1, [pc, #40]	; (8011ec4 <ethernet_output+0x88>)
 8011e9c:	480a      	ldr	r0, [pc, #40]	; (8011ec8 <ethernet_output+0x8c>)
 8011e9e:	f000 f999 	bl	80121d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	699b      	ldr	r3, [r3, #24]
 8011ea6:	68b9      	ldr	r1, [r7, #8]
 8011ea8:	68f8      	ldr	r0, [r7, #12]
 8011eaa:	4798      	blx	r3
 8011eac:	4603      	mov	r3, r0
 8011eae:	e002      	b.n	8011eb6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011eb0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011eb2:	f06f 0301 	mvn.w	r3, #1
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3718      	adds	r7, #24
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}
 8011ebe:	bf00      	nop
 8011ec0:	08017080 	.word	0x08017080
 8011ec4:	080170b8 	.word	0x080170b8
 8011ec8:	080170ec 	.word	0x080170ec

08011ecc <rand>:
 8011ecc:	4b16      	ldr	r3, [pc, #88]	; (8011f28 <rand+0x5c>)
 8011ece:	b510      	push	{r4, lr}
 8011ed0:	681c      	ldr	r4, [r3, #0]
 8011ed2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011ed4:	b9b3      	cbnz	r3, 8011f04 <rand+0x38>
 8011ed6:	2018      	movs	r0, #24
 8011ed8:	f001 f93c 	bl	8013154 <malloc>
 8011edc:	4602      	mov	r2, r0
 8011ede:	6320      	str	r0, [r4, #48]	; 0x30
 8011ee0:	b920      	cbnz	r0, 8011eec <rand+0x20>
 8011ee2:	4b12      	ldr	r3, [pc, #72]	; (8011f2c <rand+0x60>)
 8011ee4:	4812      	ldr	r0, [pc, #72]	; (8011f30 <rand+0x64>)
 8011ee6:	2152      	movs	r1, #82	; 0x52
 8011ee8:	f001 f872 	bl	8012fd0 <__assert_func>
 8011eec:	4911      	ldr	r1, [pc, #68]	; (8011f34 <rand+0x68>)
 8011eee:	4b12      	ldr	r3, [pc, #72]	; (8011f38 <rand+0x6c>)
 8011ef0:	e9c0 1300 	strd	r1, r3, [r0]
 8011ef4:	4b11      	ldr	r3, [pc, #68]	; (8011f3c <rand+0x70>)
 8011ef6:	6083      	str	r3, [r0, #8]
 8011ef8:	230b      	movs	r3, #11
 8011efa:	8183      	strh	r3, [r0, #12]
 8011efc:	2100      	movs	r1, #0
 8011efe:	2001      	movs	r0, #1
 8011f00:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011f04:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011f06:	480e      	ldr	r0, [pc, #56]	; (8011f40 <rand+0x74>)
 8011f08:	690b      	ldr	r3, [r1, #16]
 8011f0a:	694c      	ldr	r4, [r1, #20]
 8011f0c:	4a0d      	ldr	r2, [pc, #52]	; (8011f44 <rand+0x78>)
 8011f0e:	4358      	muls	r0, r3
 8011f10:	fb02 0004 	mla	r0, r2, r4, r0
 8011f14:	fba3 3202 	umull	r3, r2, r3, r2
 8011f18:	3301      	adds	r3, #1
 8011f1a:	eb40 0002 	adc.w	r0, r0, r2
 8011f1e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011f22:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011f26:	bd10      	pop	{r4, pc}
 8011f28:	20000090 	.word	0x20000090
 8011f2c:	08017226 	.word	0x08017226
 8011f30:	0801723d 	.word	0x0801723d
 8011f34:	abcd330e 	.word	0xabcd330e
 8011f38:	e66d1234 	.word	0xe66d1234
 8011f3c:	0005deec 	.word	0x0005deec
 8011f40:	5851f42d 	.word	0x5851f42d
 8011f44:	4c957f2d 	.word	0x4c957f2d

08011f48 <_strtol_l.constprop.0>:
 8011f48:	2b01      	cmp	r3, #1
 8011f4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f4e:	d001      	beq.n	8011f54 <_strtol_l.constprop.0+0xc>
 8011f50:	2b24      	cmp	r3, #36	; 0x24
 8011f52:	d906      	bls.n	8011f62 <_strtol_l.constprop.0+0x1a>
 8011f54:	f000 fff6 	bl	8012f44 <__errno>
 8011f58:	2316      	movs	r3, #22
 8011f5a:	6003      	str	r3, [r0, #0]
 8011f5c:	2000      	movs	r0, #0
 8011f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012048 <_strtol_l.constprop.0+0x100>
 8011f66:	460d      	mov	r5, r1
 8011f68:	462e      	mov	r6, r5
 8011f6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f6e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8011f72:	f017 0708 	ands.w	r7, r7, #8
 8011f76:	d1f7      	bne.n	8011f68 <_strtol_l.constprop.0+0x20>
 8011f78:	2c2d      	cmp	r4, #45	; 0x2d
 8011f7a:	d132      	bne.n	8011fe2 <_strtol_l.constprop.0+0x9a>
 8011f7c:	782c      	ldrb	r4, [r5, #0]
 8011f7e:	2701      	movs	r7, #1
 8011f80:	1cb5      	adds	r5, r6, #2
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d05b      	beq.n	801203e <_strtol_l.constprop.0+0xf6>
 8011f86:	2b10      	cmp	r3, #16
 8011f88:	d109      	bne.n	8011f9e <_strtol_l.constprop.0+0x56>
 8011f8a:	2c30      	cmp	r4, #48	; 0x30
 8011f8c:	d107      	bne.n	8011f9e <_strtol_l.constprop.0+0x56>
 8011f8e:	782c      	ldrb	r4, [r5, #0]
 8011f90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011f94:	2c58      	cmp	r4, #88	; 0x58
 8011f96:	d14d      	bne.n	8012034 <_strtol_l.constprop.0+0xec>
 8011f98:	786c      	ldrb	r4, [r5, #1]
 8011f9a:	2310      	movs	r3, #16
 8011f9c:	3502      	adds	r5, #2
 8011f9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011fa2:	f108 38ff 	add.w	r8, r8, #4294967295
 8011fa6:	f04f 0e00 	mov.w	lr, #0
 8011faa:	fbb8 f9f3 	udiv	r9, r8, r3
 8011fae:	4676      	mov	r6, lr
 8011fb0:	fb03 8a19 	mls	sl, r3, r9, r8
 8011fb4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011fb8:	f1bc 0f09 	cmp.w	ip, #9
 8011fbc:	d816      	bhi.n	8011fec <_strtol_l.constprop.0+0xa4>
 8011fbe:	4664      	mov	r4, ip
 8011fc0:	42a3      	cmp	r3, r4
 8011fc2:	dd24      	ble.n	801200e <_strtol_l.constprop.0+0xc6>
 8011fc4:	f1be 3fff 	cmp.w	lr, #4294967295
 8011fc8:	d008      	beq.n	8011fdc <_strtol_l.constprop.0+0x94>
 8011fca:	45b1      	cmp	r9, r6
 8011fcc:	d31c      	bcc.n	8012008 <_strtol_l.constprop.0+0xc0>
 8011fce:	d101      	bne.n	8011fd4 <_strtol_l.constprop.0+0x8c>
 8011fd0:	45a2      	cmp	sl, r4
 8011fd2:	db19      	blt.n	8012008 <_strtol_l.constprop.0+0xc0>
 8011fd4:	fb06 4603 	mla	r6, r6, r3, r4
 8011fd8:	f04f 0e01 	mov.w	lr, #1
 8011fdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011fe0:	e7e8      	b.n	8011fb4 <_strtol_l.constprop.0+0x6c>
 8011fe2:	2c2b      	cmp	r4, #43	; 0x2b
 8011fe4:	bf04      	itt	eq
 8011fe6:	782c      	ldrbeq	r4, [r5, #0]
 8011fe8:	1cb5      	addeq	r5, r6, #2
 8011fea:	e7ca      	b.n	8011f82 <_strtol_l.constprop.0+0x3a>
 8011fec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011ff0:	f1bc 0f19 	cmp.w	ip, #25
 8011ff4:	d801      	bhi.n	8011ffa <_strtol_l.constprop.0+0xb2>
 8011ff6:	3c37      	subs	r4, #55	; 0x37
 8011ff8:	e7e2      	b.n	8011fc0 <_strtol_l.constprop.0+0x78>
 8011ffa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011ffe:	f1bc 0f19 	cmp.w	ip, #25
 8012002:	d804      	bhi.n	801200e <_strtol_l.constprop.0+0xc6>
 8012004:	3c57      	subs	r4, #87	; 0x57
 8012006:	e7db      	b.n	8011fc0 <_strtol_l.constprop.0+0x78>
 8012008:	f04f 3eff 	mov.w	lr, #4294967295
 801200c:	e7e6      	b.n	8011fdc <_strtol_l.constprop.0+0x94>
 801200e:	f1be 3fff 	cmp.w	lr, #4294967295
 8012012:	d105      	bne.n	8012020 <_strtol_l.constprop.0+0xd8>
 8012014:	2322      	movs	r3, #34	; 0x22
 8012016:	6003      	str	r3, [r0, #0]
 8012018:	4646      	mov	r6, r8
 801201a:	b942      	cbnz	r2, 801202e <_strtol_l.constprop.0+0xe6>
 801201c:	4630      	mov	r0, r6
 801201e:	e79e      	b.n	8011f5e <_strtol_l.constprop.0+0x16>
 8012020:	b107      	cbz	r7, 8012024 <_strtol_l.constprop.0+0xdc>
 8012022:	4276      	negs	r6, r6
 8012024:	2a00      	cmp	r2, #0
 8012026:	d0f9      	beq.n	801201c <_strtol_l.constprop.0+0xd4>
 8012028:	f1be 0f00 	cmp.w	lr, #0
 801202c:	d000      	beq.n	8012030 <_strtol_l.constprop.0+0xe8>
 801202e:	1e69      	subs	r1, r5, #1
 8012030:	6011      	str	r1, [r2, #0]
 8012032:	e7f3      	b.n	801201c <_strtol_l.constprop.0+0xd4>
 8012034:	2430      	movs	r4, #48	; 0x30
 8012036:	2b00      	cmp	r3, #0
 8012038:	d1b1      	bne.n	8011f9e <_strtol_l.constprop.0+0x56>
 801203a:	2308      	movs	r3, #8
 801203c:	e7af      	b.n	8011f9e <_strtol_l.constprop.0+0x56>
 801203e:	2c30      	cmp	r4, #48	; 0x30
 8012040:	d0a5      	beq.n	8011f8e <_strtol_l.constprop.0+0x46>
 8012042:	230a      	movs	r3, #10
 8012044:	e7ab      	b.n	8011f9e <_strtol_l.constprop.0+0x56>
 8012046:	bf00      	nop
 8012048:	08017296 	.word	0x08017296

0801204c <_strtol_r>:
 801204c:	f7ff bf7c 	b.w	8011f48 <_strtol_l.constprop.0>

08012050 <std>:
 8012050:	2300      	movs	r3, #0
 8012052:	b510      	push	{r4, lr}
 8012054:	4604      	mov	r4, r0
 8012056:	e9c0 3300 	strd	r3, r3, [r0]
 801205a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801205e:	6083      	str	r3, [r0, #8]
 8012060:	8181      	strh	r1, [r0, #12]
 8012062:	6643      	str	r3, [r0, #100]	; 0x64
 8012064:	81c2      	strh	r2, [r0, #14]
 8012066:	6183      	str	r3, [r0, #24]
 8012068:	4619      	mov	r1, r3
 801206a:	2208      	movs	r2, #8
 801206c:	305c      	adds	r0, #92	; 0x5c
 801206e:	f000 f918 	bl	80122a2 <memset>
 8012072:	4b0d      	ldr	r3, [pc, #52]	; (80120a8 <std+0x58>)
 8012074:	6263      	str	r3, [r4, #36]	; 0x24
 8012076:	4b0d      	ldr	r3, [pc, #52]	; (80120ac <std+0x5c>)
 8012078:	62a3      	str	r3, [r4, #40]	; 0x28
 801207a:	4b0d      	ldr	r3, [pc, #52]	; (80120b0 <std+0x60>)
 801207c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801207e:	4b0d      	ldr	r3, [pc, #52]	; (80120b4 <std+0x64>)
 8012080:	6323      	str	r3, [r4, #48]	; 0x30
 8012082:	4b0d      	ldr	r3, [pc, #52]	; (80120b8 <std+0x68>)
 8012084:	6224      	str	r4, [r4, #32]
 8012086:	429c      	cmp	r4, r3
 8012088:	d006      	beq.n	8012098 <std+0x48>
 801208a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801208e:	4294      	cmp	r4, r2
 8012090:	d002      	beq.n	8012098 <std+0x48>
 8012092:	33d0      	adds	r3, #208	; 0xd0
 8012094:	429c      	cmp	r4, r3
 8012096:	d105      	bne.n	80120a4 <std+0x54>
 8012098:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801209c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120a0:	f000 bf7a 	b.w	8012f98 <__retarget_lock_init_recursive>
 80120a4:	bd10      	pop	{r4, pc}
 80120a6:	bf00      	nop
 80120a8:	080121f9 	.word	0x080121f9
 80120ac:	0801221f 	.word	0x0801221f
 80120b0:	08012257 	.word	0x08012257
 80120b4:	0801227b 	.word	0x0801227b
 80120b8:	2000abd4 	.word	0x2000abd4

080120bc <stdio_exit_handler>:
 80120bc:	4a02      	ldr	r2, [pc, #8]	; (80120c8 <stdio_exit_handler+0xc>)
 80120be:	4903      	ldr	r1, [pc, #12]	; (80120cc <stdio_exit_handler+0x10>)
 80120c0:	4803      	ldr	r0, [pc, #12]	; (80120d0 <stdio_exit_handler+0x14>)
 80120c2:	f000 b869 	b.w	8012198 <_fwalk_sglue>
 80120c6:	bf00      	nop
 80120c8:	20000030 	.word	0x20000030
 80120cc:	08013a7d 	.word	0x08013a7d
 80120d0:	20000044 	.word	0x20000044

080120d4 <cleanup_stdio>:
 80120d4:	6841      	ldr	r1, [r0, #4]
 80120d6:	4b0c      	ldr	r3, [pc, #48]	; (8012108 <cleanup_stdio+0x34>)
 80120d8:	4299      	cmp	r1, r3
 80120da:	b510      	push	{r4, lr}
 80120dc:	4604      	mov	r4, r0
 80120de:	d001      	beq.n	80120e4 <cleanup_stdio+0x10>
 80120e0:	f001 fccc 	bl	8013a7c <_fflush_r>
 80120e4:	68a1      	ldr	r1, [r4, #8]
 80120e6:	4b09      	ldr	r3, [pc, #36]	; (801210c <cleanup_stdio+0x38>)
 80120e8:	4299      	cmp	r1, r3
 80120ea:	d002      	beq.n	80120f2 <cleanup_stdio+0x1e>
 80120ec:	4620      	mov	r0, r4
 80120ee:	f001 fcc5 	bl	8013a7c <_fflush_r>
 80120f2:	68e1      	ldr	r1, [r4, #12]
 80120f4:	4b06      	ldr	r3, [pc, #24]	; (8012110 <cleanup_stdio+0x3c>)
 80120f6:	4299      	cmp	r1, r3
 80120f8:	d004      	beq.n	8012104 <cleanup_stdio+0x30>
 80120fa:	4620      	mov	r0, r4
 80120fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012100:	f001 bcbc 	b.w	8013a7c <_fflush_r>
 8012104:	bd10      	pop	{r4, pc}
 8012106:	bf00      	nop
 8012108:	2000abd4 	.word	0x2000abd4
 801210c:	2000ac3c 	.word	0x2000ac3c
 8012110:	2000aca4 	.word	0x2000aca4

08012114 <global_stdio_init.part.0>:
 8012114:	b510      	push	{r4, lr}
 8012116:	4b0b      	ldr	r3, [pc, #44]	; (8012144 <global_stdio_init.part.0+0x30>)
 8012118:	4c0b      	ldr	r4, [pc, #44]	; (8012148 <global_stdio_init.part.0+0x34>)
 801211a:	4a0c      	ldr	r2, [pc, #48]	; (801214c <global_stdio_init.part.0+0x38>)
 801211c:	601a      	str	r2, [r3, #0]
 801211e:	4620      	mov	r0, r4
 8012120:	2200      	movs	r2, #0
 8012122:	2104      	movs	r1, #4
 8012124:	f7ff ff94 	bl	8012050 <std>
 8012128:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801212c:	2201      	movs	r2, #1
 801212e:	2109      	movs	r1, #9
 8012130:	f7ff ff8e 	bl	8012050 <std>
 8012134:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012138:	2202      	movs	r2, #2
 801213a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801213e:	2112      	movs	r1, #18
 8012140:	f7ff bf86 	b.w	8012050 <std>
 8012144:	2000ad0c 	.word	0x2000ad0c
 8012148:	2000abd4 	.word	0x2000abd4
 801214c:	080120bd 	.word	0x080120bd

08012150 <__sfp_lock_acquire>:
 8012150:	4801      	ldr	r0, [pc, #4]	; (8012158 <__sfp_lock_acquire+0x8>)
 8012152:	f000 bf23 	b.w	8012f9c <__retarget_lock_acquire_recursive>
 8012156:	bf00      	nop
 8012158:	2000ad3a 	.word	0x2000ad3a

0801215c <__sfp_lock_release>:
 801215c:	4801      	ldr	r0, [pc, #4]	; (8012164 <__sfp_lock_release+0x8>)
 801215e:	f000 bf1f 	b.w	8012fa0 <__retarget_lock_release_recursive>
 8012162:	bf00      	nop
 8012164:	2000ad3a 	.word	0x2000ad3a

08012168 <__sinit>:
 8012168:	b510      	push	{r4, lr}
 801216a:	4604      	mov	r4, r0
 801216c:	f7ff fff0 	bl	8012150 <__sfp_lock_acquire>
 8012170:	6a23      	ldr	r3, [r4, #32]
 8012172:	b11b      	cbz	r3, 801217c <__sinit+0x14>
 8012174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012178:	f7ff bff0 	b.w	801215c <__sfp_lock_release>
 801217c:	4b04      	ldr	r3, [pc, #16]	; (8012190 <__sinit+0x28>)
 801217e:	6223      	str	r3, [r4, #32]
 8012180:	4b04      	ldr	r3, [pc, #16]	; (8012194 <__sinit+0x2c>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d1f5      	bne.n	8012174 <__sinit+0xc>
 8012188:	f7ff ffc4 	bl	8012114 <global_stdio_init.part.0>
 801218c:	e7f2      	b.n	8012174 <__sinit+0xc>
 801218e:	bf00      	nop
 8012190:	080120d5 	.word	0x080120d5
 8012194:	2000ad0c 	.word	0x2000ad0c

08012198 <_fwalk_sglue>:
 8012198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801219c:	4607      	mov	r7, r0
 801219e:	4688      	mov	r8, r1
 80121a0:	4614      	mov	r4, r2
 80121a2:	2600      	movs	r6, #0
 80121a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80121a8:	f1b9 0901 	subs.w	r9, r9, #1
 80121ac:	d505      	bpl.n	80121ba <_fwalk_sglue+0x22>
 80121ae:	6824      	ldr	r4, [r4, #0]
 80121b0:	2c00      	cmp	r4, #0
 80121b2:	d1f7      	bne.n	80121a4 <_fwalk_sglue+0xc>
 80121b4:	4630      	mov	r0, r6
 80121b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121ba:	89ab      	ldrh	r3, [r5, #12]
 80121bc:	2b01      	cmp	r3, #1
 80121be:	d907      	bls.n	80121d0 <_fwalk_sglue+0x38>
 80121c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80121c4:	3301      	adds	r3, #1
 80121c6:	d003      	beq.n	80121d0 <_fwalk_sglue+0x38>
 80121c8:	4629      	mov	r1, r5
 80121ca:	4638      	mov	r0, r7
 80121cc:	47c0      	blx	r8
 80121ce:	4306      	orrs	r6, r0
 80121d0:	3568      	adds	r5, #104	; 0x68
 80121d2:	e7e9      	b.n	80121a8 <_fwalk_sglue+0x10>

080121d4 <iprintf>:
 80121d4:	b40f      	push	{r0, r1, r2, r3}
 80121d6:	b507      	push	{r0, r1, r2, lr}
 80121d8:	4906      	ldr	r1, [pc, #24]	; (80121f4 <iprintf+0x20>)
 80121da:	ab04      	add	r3, sp, #16
 80121dc:	6808      	ldr	r0, [r1, #0]
 80121de:	f853 2b04 	ldr.w	r2, [r3], #4
 80121e2:	6881      	ldr	r1, [r0, #8]
 80121e4:	9301      	str	r3, [sp, #4]
 80121e6:	f001 f919 	bl	801341c <_vfiprintf_r>
 80121ea:	b003      	add	sp, #12
 80121ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80121f0:	b004      	add	sp, #16
 80121f2:	4770      	bx	lr
 80121f4:	20000090 	.word	0x20000090

080121f8 <__sread>:
 80121f8:	b510      	push	{r4, lr}
 80121fa:	460c      	mov	r4, r1
 80121fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012200:	f000 fe7c 	bl	8012efc <_read_r>
 8012204:	2800      	cmp	r0, #0
 8012206:	bfab      	itete	ge
 8012208:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801220a:	89a3      	ldrhlt	r3, [r4, #12]
 801220c:	181b      	addge	r3, r3, r0
 801220e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012212:	bfac      	ite	ge
 8012214:	6563      	strge	r3, [r4, #84]	; 0x54
 8012216:	81a3      	strhlt	r3, [r4, #12]
 8012218:	bd10      	pop	{r4, pc}

0801221a <__seofread>:
 801221a:	2000      	movs	r0, #0
 801221c:	4770      	bx	lr

0801221e <__swrite>:
 801221e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012222:	461f      	mov	r7, r3
 8012224:	898b      	ldrh	r3, [r1, #12]
 8012226:	05db      	lsls	r3, r3, #23
 8012228:	4605      	mov	r5, r0
 801222a:	460c      	mov	r4, r1
 801222c:	4616      	mov	r6, r2
 801222e:	d505      	bpl.n	801223c <__swrite+0x1e>
 8012230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012234:	2302      	movs	r3, #2
 8012236:	2200      	movs	r2, #0
 8012238:	f000 fe4e 	bl	8012ed8 <_lseek_r>
 801223c:	89a3      	ldrh	r3, [r4, #12]
 801223e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012246:	81a3      	strh	r3, [r4, #12]
 8012248:	4632      	mov	r2, r6
 801224a:	463b      	mov	r3, r7
 801224c:	4628      	mov	r0, r5
 801224e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012252:	f000 be65 	b.w	8012f20 <_write_r>

08012256 <__sseek>:
 8012256:	b510      	push	{r4, lr}
 8012258:	460c      	mov	r4, r1
 801225a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801225e:	f000 fe3b 	bl	8012ed8 <_lseek_r>
 8012262:	1c43      	adds	r3, r0, #1
 8012264:	89a3      	ldrh	r3, [r4, #12]
 8012266:	bf15      	itete	ne
 8012268:	6560      	strne	r0, [r4, #84]	; 0x54
 801226a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801226e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012272:	81a3      	strheq	r3, [r4, #12]
 8012274:	bf18      	it	ne
 8012276:	81a3      	strhne	r3, [r4, #12]
 8012278:	bd10      	pop	{r4, pc}

0801227a <__sclose>:
 801227a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801227e:	f000 be1b 	b.w	8012eb8 <_close_r>

08012282 <memcmp>:
 8012282:	b510      	push	{r4, lr}
 8012284:	3901      	subs	r1, #1
 8012286:	4402      	add	r2, r0
 8012288:	4290      	cmp	r0, r2
 801228a:	d101      	bne.n	8012290 <memcmp+0xe>
 801228c:	2000      	movs	r0, #0
 801228e:	e005      	b.n	801229c <memcmp+0x1a>
 8012290:	7803      	ldrb	r3, [r0, #0]
 8012292:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012296:	42a3      	cmp	r3, r4
 8012298:	d001      	beq.n	801229e <memcmp+0x1c>
 801229a:	1b18      	subs	r0, r3, r4
 801229c:	bd10      	pop	{r4, pc}
 801229e:	3001      	adds	r0, #1
 80122a0:	e7f2      	b.n	8012288 <memcmp+0x6>

080122a2 <memset>:
 80122a2:	4402      	add	r2, r0
 80122a4:	4603      	mov	r3, r0
 80122a6:	4293      	cmp	r3, r2
 80122a8:	d100      	bne.n	80122ac <memset+0xa>
 80122aa:	4770      	bx	lr
 80122ac:	f803 1b01 	strb.w	r1, [r3], #1
 80122b0:	e7f9      	b.n	80122a6 <memset+0x4>

080122b2 <strncmp>:
 80122b2:	b510      	push	{r4, lr}
 80122b4:	b16a      	cbz	r2, 80122d2 <strncmp+0x20>
 80122b6:	3901      	subs	r1, #1
 80122b8:	1884      	adds	r4, r0, r2
 80122ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80122c2:	429a      	cmp	r2, r3
 80122c4:	d103      	bne.n	80122ce <strncmp+0x1c>
 80122c6:	42a0      	cmp	r0, r4
 80122c8:	d001      	beq.n	80122ce <strncmp+0x1c>
 80122ca:	2a00      	cmp	r2, #0
 80122cc:	d1f5      	bne.n	80122ba <strncmp+0x8>
 80122ce:	1ad0      	subs	r0, r2, r3
 80122d0:	bd10      	pop	{r4, pc}
 80122d2:	4610      	mov	r0, r2
 80122d4:	e7fc      	b.n	80122d0 <strncmp+0x1e>
	...

080122d8 <gmtime_r>:
 80122d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122dc:	4a4d      	ldr	r2, [pc, #308]	; (8012414 <gmtime_r+0x13c>)
 80122de:	460c      	mov	r4, r1
 80122e0:	2300      	movs	r3, #0
 80122e2:	e9d0 0100 	ldrd	r0, r1, [r0]
 80122e6:	f7ee fbe9 	bl	8000abc <__aeabi_ldivmod>
 80122ea:	2a00      	cmp	r2, #0
 80122ec:	bfbc      	itt	lt
 80122ee:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80122f2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80122f6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80122fa:	f500 202f 	add.w	r0, r0, #716800	; 0xaf000
 80122fe:	fbb2 f3f1 	udiv	r3, r2, r1
 8012302:	fb01 2213 	mls	r2, r1, r3, r2
 8012306:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801230a:	bfac      	ite	ge
 801230c:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8012310:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8012314:	60a3      	str	r3, [r4, #8]
 8012316:	fbb2 f3f1 	udiv	r3, r2, r1
 801231a:	fb01 2213 	mls	r2, r1, r3, r2
 801231e:	6063      	str	r3, [r4, #4]
 8012320:	6022      	str	r2, [r4, #0]
 8012322:	1cc3      	adds	r3, r0, #3
 8012324:	2207      	movs	r2, #7
 8012326:	fb93 f2f2 	sdiv	r2, r3, r2
 801232a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801232e:	1a9b      	subs	r3, r3, r2
 8012330:	bf48      	it	mi
 8012332:	3307      	addmi	r3, #7
 8012334:	2800      	cmp	r0, #0
 8012336:	61a3      	str	r3, [r4, #24]
 8012338:	bfb8      	it	lt
 801233a:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801233e:	4936      	ldr	r1, [pc, #216]	; (8012418 <gmtime_r+0x140>)
 8012340:	bfae      	itee	ge
 8012342:	fb90 f1f1 	sdivge	r1, r0, r1
 8012346:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801234a:	fb93 f1f1 	sdivlt	r1, r3, r1
 801234e:	4b33      	ldr	r3, [pc, #204]	; (801241c <gmtime_r+0x144>)
 8012350:	fb03 0001 	mla	r0, r3, r1, r0
 8012354:	f648 63ac 	movw	r3, #36524	; 0x8eac
 8012358:	fbb0 f3f3 	udiv	r3, r0, r3
 801235c:	4403      	add	r3, r0
 801235e:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8012362:	fbb0 f2fc 	udiv	r2, r0, ip
 8012366:	1a9b      	subs	r3, r3, r2
 8012368:	f240 176d 	movw	r7, #365	; 0x16d
 801236c:	4a2c      	ldr	r2, [pc, #176]	; (8012420 <gmtime_r+0x148>)
 801236e:	fbb0 f2f2 	udiv	r2, r0, r2
 8012372:	2664      	movs	r6, #100	; 0x64
 8012374:	1a9b      	subs	r3, r3, r2
 8012376:	fbb3 f2f7 	udiv	r2, r3, r7
 801237a:	fbb3 f3fc 	udiv	r3, r3, ip
 801237e:	fbb2 f5f6 	udiv	r5, r2, r6
 8012382:	1aeb      	subs	r3, r5, r3
 8012384:	4403      	add	r3, r0
 8012386:	fb07 3312 	mls	r3, r7, r2, r3
 801238a:	2099      	movs	r0, #153	; 0x99
 801238c:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8012390:	3702      	adds	r7, #2
 8012392:	f103 0e01 	add.w	lr, r3, #1
 8012396:	fbb7 fcf0 	udiv	ip, r7, r0
 801239a:	fb00 f00c 	mul.w	r0, r0, ip
 801239e:	3002      	adds	r0, #2
 80123a0:	f04f 0805 	mov.w	r8, #5
 80123a4:	fbb0 f0f8 	udiv	r0, r0, r8
 80123a8:	ebae 0000 	sub.w	r0, lr, r0
 80123ac:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80123b0:	4577      	cmp	r7, lr
 80123b2:	bf94      	ite	ls
 80123b4:	2702      	movls	r7, #2
 80123b6:	f06f 0709 	mvnhi.w	r7, #9
 80123ba:	4467      	add	r7, ip
 80123bc:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80123c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80123c4:	2f01      	cmp	r7, #1
 80123c6:	bf98      	it	ls
 80123c8:	3101      	addls	r1, #1
 80123ca:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80123ce:	d30c      	bcc.n	80123ea <gmtime_r+0x112>
 80123d0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80123d4:	61e3      	str	r3, [r4, #28]
 80123d6:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80123da:	2300      	movs	r3, #0
 80123dc:	60e0      	str	r0, [r4, #12]
 80123de:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80123e2:	6223      	str	r3, [r4, #32]
 80123e4:	4620      	mov	r0, r4
 80123e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123ea:	f012 0f03 	tst.w	r2, #3
 80123ee:	d102      	bne.n	80123f6 <gmtime_r+0x11e>
 80123f0:	fb06 2515 	mls	r5, r6, r5, r2
 80123f4:	b95d      	cbnz	r5, 801240e <gmtime_r+0x136>
 80123f6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80123fa:	fbb2 f6f5 	udiv	r6, r2, r5
 80123fe:	fb05 2216 	mls	r2, r5, r6, r2
 8012402:	fab2 f282 	clz	r2, r2
 8012406:	0952      	lsrs	r2, r2, #5
 8012408:	333b      	adds	r3, #59	; 0x3b
 801240a:	4413      	add	r3, r2
 801240c:	e7e2      	b.n	80123d4 <gmtime_r+0xfc>
 801240e:	2201      	movs	r2, #1
 8012410:	e7fa      	b.n	8012408 <gmtime_r+0x130>
 8012412:	bf00      	nop
 8012414:	00015180 	.word	0x00015180
 8012418:	00023ab1 	.word	0x00023ab1
 801241c:	fffdc54f 	.word	0xfffdc54f
 8012420:	00023ab0 	.word	0x00023ab0

08012424 <validate_structure>:
 8012424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012426:	6801      	ldr	r1, [r0, #0]
 8012428:	293b      	cmp	r1, #59	; 0x3b
 801242a:	4604      	mov	r4, r0
 801242c:	d911      	bls.n	8012452 <validate_structure+0x2e>
 801242e:	223c      	movs	r2, #60	; 0x3c
 8012430:	4668      	mov	r0, sp
 8012432:	f000 fdeb 	bl	801300c <div>
 8012436:	9a01      	ldr	r2, [sp, #4]
 8012438:	6863      	ldr	r3, [r4, #4]
 801243a:	9900      	ldr	r1, [sp, #0]
 801243c:	2a00      	cmp	r2, #0
 801243e:	440b      	add	r3, r1
 8012440:	6063      	str	r3, [r4, #4]
 8012442:	bfbb      	ittet	lt
 8012444:	323c      	addlt	r2, #60	; 0x3c
 8012446:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801244a:	6022      	strge	r2, [r4, #0]
 801244c:	6022      	strlt	r2, [r4, #0]
 801244e:	bfb8      	it	lt
 8012450:	6063      	strlt	r3, [r4, #4]
 8012452:	6861      	ldr	r1, [r4, #4]
 8012454:	293b      	cmp	r1, #59	; 0x3b
 8012456:	d911      	bls.n	801247c <validate_structure+0x58>
 8012458:	223c      	movs	r2, #60	; 0x3c
 801245a:	4668      	mov	r0, sp
 801245c:	f000 fdd6 	bl	801300c <div>
 8012460:	9a01      	ldr	r2, [sp, #4]
 8012462:	68a3      	ldr	r3, [r4, #8]
 8012464:	9900      	ldr	r1, [sp, #0]
 8012466:	2a00      	cmp	r2, #0
 8012468:	440b      	add	r3, r1
 801246a:	60a3      	str	r3, [r4, #8]
 801246c:	bfbb      	ittet	lt
 801246e:	323c      	addlt	r2, #60	; 0x3c
 8012470:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012474:	6062      	strge	r2, [r4, #4]
 8012476:	6062      	strlt	r2, [r4, #4]
 8012478:	bfb8      	it	lt
 801247a:	60a3      	strlt	r3, [r4, #8]
 801247c:	68a1      	ldr	r1, [r4, #8]
 801247e:	2917      	cmp	r1, #23
 8012480:	d911      	bls.n	80124a6 <validate_structure+0x82>
 8012482:	2218      	movs	r2, #24
 8012484:	4668      	mov	r0, sp
 8012486:	f000 fdc1 	bl	801300c <div>
 801248a:	9a01      	ldr	r2, [sp, #4]
 801248c:	68e3      	ldr	r3, [r4, #12]
 801248e:	9900      	ldr	r1, [sp, #0]
 8012490:	2a00      	cmp	r2, #0
 8012492:	440b      	add	r3, r1
 8012494:	60e3      	str	r3, [r4, #12]
 8012496:	bfbb      	ittet	lt
 8012498:	3218      	addlt	r2, #24
 801249a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801249e:	60a2      	strge	r2, [r4, #8]
 80124a0:	60a2      	strlt	r2, [r4, #8]
 80124a2:	bfb8      	it	lt
 80124a4:	60e3      	strlt	r3, [r4, #12]
 80124a6:	6921      	ldr	r1, [r4, #16]
 80124a8:	290b      	cmp	r1, #11
 80124aa:	d911      	bls.n	80124d0 <validate_structure+0xac>
 80124ac:	220c      	movs	r2, #12
 80124ae:	4668      	mov	r0, sp
 80124b0:	f000 fdac 	bl	801300c <div>
 80124b4:	9a01      	ldr	r2, [sp, #4]
 80124b6:	6963      	ldr	r3, [r4, #20]
 80124b8:	9900      	ldr	r1, [sp, #0]
 80124ba:	2a00      	cmp	r2, #0
 80124bc:	440b      	add	r3, r1
 80124be:	6163      	str	r3, [r4, #20]
 80124c0:	bfbb      	ittet	lt
 80124c2:	320c      	addlt	r2, #12
 80124c4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80124c8:	6122      	strge	r2, [r4, #16]
 80124ca:	6122      	strlt	r2, [r4, #16]
 80124cc:	bfb8      	it	lt
 80124ce:	6163      	strlt	r3, [r4, #20]
 80124d0:	6963      	ldr	r3, [r4, #20]
 80124d2:	079a      	lsls	r2, r3, #30
 80124d4:	d11e      	bne.n	8012514 <validate_structure+0xf0>
 80124d6:	2164      	movs	r1, #100	; 0x64
 80124d8:	fb93 f2f1 	sdiv	r2, r3, r1
 80124dc:	fb01 3212 	mls	r2, r1, r2, r3
 80124e0:	b9d2      	cbnz	r2, 8012518 <validate_structure+0xf4>
 80124e2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80124e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80124ea:	fb93 f1f2 	sdiv	r1, r3, r2
 80124ee:	fb02 3311 	mls	r3, r2, r1, r3
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	bf14      	ite	ne
 80124f6:	231c      	movne	r3, #28
 80124f8:	231d      	moveq	r3, #29
 80124fa:	68e2      	ldr	r2, [r4, #12]
 80124fc:	2a00      	cmp	r2, #0
 80124fe:	dc0d      	bgt.n	801251c <validate_structure+0xf8>
 8012500:	4e32      	ldr	r6, [pc, #200]	; (80125cc <validate_structure+0x1a8>)
 8012502:	250b      	movs	r5, #11
 8012504:	2164      	movs	r1, #100	; 0x64
 8012506:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801250a:	68e7      	ldr	r7, [r4, #12]
 801250c:	2f00      	cmp	r7, #0
 801250e:	dd31      	ble.n	8012574 <validate_structure+0x150>
 8012510:	b003      	add	sp, #12
 8012512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012514:	231c      	movs	r3, #28
 8012516:	e7f0      	b.n	80124fa <validate_structure+0xd6>
 8012518:	231d      	movs	r3, #29
 801251a:	e7ee      	b.n	80124fa <validate_structure+0xd6>
 801251c:	4e2b      	ldr	r6, [pc, #172]	; (80125cc <validate_structure+0x1a8>)
 801251e:	2700      	movs	r7, #0
 8012520:	2064      	movs	r0, #100	; 0x64
 8012522:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8012526:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801252a:	2a01      	cmp	r2, #1
 801252c:	bf14      	ite	ne
 801252e:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8012532:	469c      	moveq	ip, r3
 8012534:	4561      	cmp	r1, ip
 8012536:	ddeb      	ble.n	8012510 <validate_structure+0xec>
 8012538:	3201      	adds	r2, #1
 801253a:	eba1 010c 	sub.w	r1, r1, ip
 801253e:	2a0c      	cmp	r2, #12
 8012540:	60e1      	str	r1, [r4, #12]
 8012542:	6122      	str	r2, [r4, #16]
 8012544:	d1ef      	bne.n	8012526 <validate_structure+0x102>
 8012546:	6963      	ldr	r3, [r4, #20]
 8012548:	1c5a      	adds	r2, r3, #1
 801254a:	0791      	lsls	r1, r2, #30
 801254c:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8012550:	d138      	bne.n	80125c4 <validate_structure+0x1a0>
 8012552:	fb92 f1f0 	sdiv	r1, r2, r0
 8012556:	fb00 2211 	mls	r2, r0, r1, r2
 801255a:	2a00      	cmp	r2, #0
 801255c:	d134      	bne.n	80125c8 <validate_structure+0x1a4>
 801255e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8012562:	fb93 f2f5 	sdiv	r2, r3, r5
 8012566:	fb05 3312 	mls	r3, r5, r2, r3
 801256a:	2b00      	cmp	r3, #0
 801256c:	bf14      	ite	ne
 801256e:	231c      	movne	r3, #28
 8012570:	231d      	moveq	r3, #29
 8012572:	e7d8      	b.n	8012526 <validate_structure+0x102>
 8012574:	6922      	ldr	r2, [r4, #16]
 8012576:	3a01      	subs	r2, #1
 8012578:	6122      	str	r2, [r4, #16]
 801257a:	3201      	adds	r2, #1
 801257c:	d115      	bne.n	80125aa <validate_structure+0x186>
 801257e:	6963      	ldr	r3, [r4, #20]
 8012580:	1e5a      	subs	r2, r3, #1
 8012582:	f012 0f03 	tst.w	r2, #3
 8012586:	e9c4 5204 	strd	r5, r2, [r4, #16]
 801258a:	d117      	bne.n	80125bc <validate_structure+0x198>
 801258c:	fb92 fcf1 	sdiv	ip, r2, r1
 8012590:	fb01 221c 	mls	r2, r1, ip, r2
 8012594:	b9a2      	cbnz	r2, 80125c0 <validate_structure+0x19c>
 8012596:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801259a:	fb93 f2f0 	sdiv	r2, r3, r0
 801259e:	fb00 3312 	mls	r3, r0, r2, r3
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	bf14      	ite	ne
 80125a6:	231c      	movne	r3, #28
 80125a8:	231d      	moveq	r3, #29
 80125aa:	6922      	ldr	r2, [r4, #16]
 80125ac:	2a01      	cmp	r2, #1
 80125ae:	bf14      	ite	ne
 80125b0:	f856 2022 	ldrne.w	r2, [r6, r2, lsl #2]
 80125b4:	461a      	moveq	r2, r3
 80125b6:	443a      	add	r2, r7
 80125b8:	60e2      	str	r2, [r4, #12]
 80125ba:	e7a6      	b.n	801250a <validate_structure+0xe6>
 80125bc:	231c      	movs	r3, #28
 80125be:	e7f4      	b.n	80125aa <validate_structure+0x186>
 80125c0:	231d      	movs	r3, #29
 80125c2:	e7f2      	b.n	80125aa <validate_structure+0x186>
 80125c4:	231c      	movs	r3, #28
 80125c6:	e7ae      	b.n	8012526 <validate_structure+0x102>
 80125c8:	231d      	movs	r3, #29
 80125ca:	e7ac      	b.n	8012526 <validate_structure+0x102>
 80125cc:	08017398 	.word	0x08017398

080125d0 <mktime>:
 80125d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125d4:	b085      	sub	sp, #20
 80125d6:	4607      	mov	r7, r0
 80125d8:	f001 fb4c 	bl	8013c74 <__gettzinfo>
 80125dc:	4681      	mov	r9, r0
 80125de:	4638      	mov	r0, r7
 80125e0:	f7ff ff20 	bl	8012424 <validate_structure>
 80125e4:	e9d7 4300 	ldrd	r4, r3, [r7]
 80125e8:	223c      	movs	r2, #60	; 0x3c
 80125ea:	fb02 4403 	mla	r4, r2, r3, r4
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	697e      	ldr	r6, [r7, #20]
 80125f2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80125f6:	fb02 4403 	mla	r4, r2, r3, r4
 80125fa:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 80125fe:	4abb      	ldr	r2, [pc, #748]	; (80128ec <mktime+0x31c>)
 8012600:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012604:	3d01      	subs	r5, #1
 8012606:	2b01      	cmp	r3, #1
 8012608:	4415      	add	r5, r2
 801260a:	dd11      	ble.n	8012630 <mktime+0x60>
 801260c:	07b1      	lsls	r1, r6, #30
 801260e:	d10f      	bne.n	8012630 <mktime+0x60>
 8012610:	2264      	movs	r2, #100	; 0x64
 8012612:	fb96 f3f2 	sdiv	r3, r6, r2
 8012616:	fb02 6313 	mls	r3, r2, r3, r6
 801261a:	b943      	cbnz	r3, 801262e <mktime+0x5e>
 801261c:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8012620:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012624:	fb93 f1f2 	sdiv	r1, r3, r2
 8012628:	fb02 3311 	mls	r3, r2, r1, r3
 801262c:	b903      	cbnz	r3, 8012630 <mktime+0x60>
 801262e:	3501      	adds	r5, #1
 8012630:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8012634:	3310      	adds	r3, #16
 8012636:	f644 6220 	movw	r2, #20000	; 0x4e20
 801263a:	4293      	cmp	r3, r2
 801263c:	61fd      	str	r5, [r7, #28]
 801263e:	f200 815e 	bhi.w	80128fe <mktime+0x32e>
 8012642:	2e46      	cmp	r6, #70	; 0x46
 8012644:	dd72      	ble.n	801272c <mktime+0x15c>
 8012646:	2346      	movs	r3, #70	; 0x46
 8012648:	f240 1c6d 	movw	ip, #365	; 0x16d
 801264c:	2164      	movs	r1, #100	; 0x64
 801264e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8012652:	079a      	lsls	r2, r3, #30
 8012654:	d164      	bne.n	8012720 <mktime+0x150>
 8012656:	fb93 f2f1 	sdiv	r2, r3, r1
 801265a:	fb01 3212 	mls	r2, r1, r2, r3
 801265e:	2a00      	cmp	r2, #0
 8012660:	d161      	bne.n	8012726 <mktime+0x156>
 8012662:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8012666:	fb92 fef0 	sdiv	lr, r2, r0
 801266a:	fb00 221e 	mls	r2, r0, lr, r2
 801266e:	2a00      	cmp	r2, #0
 8012670:	bf14      	ite	ne
 8012672:	4662      	movne	r2, ip
 8012674:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8012678:	3301      	adds	r3, #1
 801267a:	429e      	cmp	r6, r3
 801267c:	4415      	add	r5, r2
 801267e:	d1e8      	bne.n	8012652 <mktime+0x82>
 8012680:	4b9b      	ldr	r3, [pc, #620]	; (80128f0 <mktime+0x320>)
 8012682:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8012686:	fbc5 4803 	smlal	r4, r8, r5, r3
 801268a:	f000 f9e3 	bl	8012a54 <__tz_lock>
 801268e:	f000 f9ed 	bl	8012a6c <_tzset_unlocked>
 8012692:	4b98      	ldr	r3, [pc, #608]	; (80128f4 <mktime+0x324>)
 8012694:	f8d3 b000 	ldr.w	fp, [r3]
 8012698:	f1bb 0f00 	cmp.w	fp, #0
 801269c:	d03a      	beq.n	8012714 <mktime+0x144>
 801269e:	f8d7 b020 	ldr.w	fp, [r7, #32]
 80126a2:	6978      	ldr	r0, [r7, #20]
 80126a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80126a8:	f1bb 0f01 	cmp.w	fp, #1
 80126ac:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80126b0:	46da      	mov	sl, fp
 80126b2:	bfa8      	it	ge
 80126b4:	f04f 0a01 	movge.w	sl, #1
 80126b8:	4283      	cmp	r3, r0
 80126ba:	d179      	bne.n	80127b0 <mktime+0x1e0>
 80126bc:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 80126c0:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 80126c4:	f8d9 c04c 	ldr.w	ip, [r9, #76]	; 0x4c
 80126c8:	1a13      	subs	r3, r2, r0
 80126ca:	9302      	str	r3, [sp, #8]
 80126cc:	eb61 73e0 	sbc.w	r3, r1, r0, asr #31
 80126d0:	9303      	str	r3, [sp, #12]
 80126d2:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80126d6:	9301      	str	r3, [sp, #4]
 80126d8:	9a01      	ldr	r2, [sp, #4]
 80126da:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 80126de:	ebb2 0e03 	subs.w	lr, r2, r3
 80126e2:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 80126e6:	4574      	cmp	r4, lr
 80126e8:	eb78 0201 	sbcs.w	r2, r8, r1
 80126ec:	da66      	bge.n	80127bc <mktime+0x1ec>
 80126ee:	f8d9 2000 	ldr.w	r2, [r9]
 80126f2:	2a00      	cmp	r2, #0
 80126f4:	d06f      	beq.n	80127d6 <mktime+0x206>
 80126f6:	9a02      	ldr	r2, [sp, #8]
 80126f8:	4294      	cmp	r4, r2
 80126fa:	9a03      	ldr	r2, [sp, #12]
 80126fc:	eb78 0202 	sbcs.w	r2, r8, r2
 8012700:	db03      	blt.n	801270a <mktime+0x13a>
 8012702:	4574      	cmp	r4, lr
 8012704:	eb78 0101 	sbcs.w	r1, r8, r1
 8012708:	db6b      	blt.n	80127e2 <mktime+0x212>
 801270a:	f1bb 0f00 	cmp.w	fp, #0
 801270e:	f04f 0b00 	mov.w	fp, #0
 8012712:	da6b      	bge.n	80127ec <mktime+0x21c>
 8012714:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8012718:	191c      	adds	r4, r3, r4
 801271a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 801271e:	e0a9      	b.n	8012874 <mktime+0x2a4>
 8012720:	f240 126d 	movw	r2, #365	; 0x16d
 8012724:	e7a8      	b.n	8012678 <mktime+0xa8>
 8012726:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801272a:	e7a5      	b.n	8012678 <mktime+0xa8>
 801272c:	d0a8      	beq.n	8012680 <mktime+0xb0>
 801272e:	2345      	movs	r3, #69	; 0x45
 8012730:	f240 1c6d 	movw	ip, #365	; 0x16d
 8012734:	2164      	movs	r1, #100	; 0x64
 8012736:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801273a:	e012      	b.n	8012762 <mktime+0x192>
 801273c:	bb62      	cbnz	r2, 8012798 <mktime+0x1c8>
 801273e:	fb93 f2f1 	sdiv	r2, r3, r1
 8012742:	fb01 3212 	mls	r2, r1, r2, r3
 8012746:	bb52      	cbnz	r2, 801279e <mktime+0x1ce>
 8012748:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 801274c:	fb92 fef0 	sdiv	lr, r2, r0
 8012750:	fb00 221e 	mls	r2, r0, lr, r2
 8012754:	2a00      	cmp	r2, #0
 8012756:	bf14      	ite	ne
 8012758:	4662      	movne	r2, ip
 801275a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801275e:	1aad      	subs	r5, r5, r2
 8012760:	3b01      	subs	r3, #1
 8012762:	429e      	cmp	r6, r3
 8012764:	f003 0203 	and.w	r2, r3, #3
 8012768:	dbe8      	blt.n	801273c <mktime+0x16c>
 801276a:	b9da      	cbnz	r2, 80127a4 <mktime+0x1d4>
 801276c:	2264      	movs	r2, #100	; 0x64
 801276e:	fb96 f3f2 	sdiv	r3, r6, r2
 8012772:	fb02 6313 	mls	r3, r2, r3, r6
 8012776:	b9c3      	cbnz	r3, 80127aa <mktime+0x1da>
 8012778:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 801277c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012780:	fb93 f1f2 	sdiv	r1, r3, r2
 8012784:	fb02 3311 	mls	r3, r2, r1, r3
 8012788:	2b00      	cmp	r3, #0
 801278a:	f240 136d 	movw	r3, #365	; 0x16d
 801278e:	bf08      	it	eq
 8012790:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8012794:	1aed      	subs	r5, r5, r3
 8012796:	e773      	b.n	8012680 <mktime+0xb0>
 8012798:	f240 126d 	movw	r2, #365	; 0x16d
 801279c:	e7df      	b.n	801275e <mktime+0x18e>
 801279e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80127a2:	e7dc      	b.n	801275e <mktime+0x18e>
 80127a4:	f240 136d 	movw	r3, #365	; 0x16d
 80127a8:	e7f4      	b.n	8012794 <mktime+0x1c4>
 80127aa:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80127ae:	e7f1      	b.n	8012794 <mktime+0x1c4>
 80127b0:	f000 f8aa 	bl	8012908 <__tzcalc_limits>
 80127b4:	2800      	cmp	r0, #0
 80127b6:	d181      	bne.n	80126bc <mktime+0xec>
 80127b8:	46d3      	mov	fp, sl
 80127ba:	e050      	b.n	801285e <mktime+0x28e>
 80127bc:	9a01      	ldr	r2, [sp, #4]
 80127be:	1a12      	subs	r2, r2, r0
 80127c0:	9201      	str	r2, [sp, #4]
 80127c2:	ea4f 72e0 	mov.w	r2, r0, asr #31
 80127c6:	eb6c 0c02 	sbc.w	ip, ip, r2
 80127ca:	9a01      	ldr	r2, [sp, #4]
 80127cc:	4294      	cmp	r4, r2
 80127ce:	eb78 0c0c 	sbcs.w	ip, r8, ip
 80127d2:	dbf1      	blt.n	80127b8 <mktime+0x1e8>
 80127d4:	e78b      	b.n	80126ee <mktime+0x11e>
 80127d6:	9a02      	ldr	r2, [sp, #8]
 80127d8:	4294      	cmp	r4, r2
 80127da:	9a03      	ldr	r2, [sp, #12]
 80127dc:	eb78 0202 	sbcs.w	r2, r8, r2
 80127e0:	db8f      	blt.n	8012702 <mktime+0x132>
 80127e2:	f1bb 0f00 	cmp.w	fp, #0
 80127e6:	db3e      	blt.n	8012866 <mktime+0x296>
 80127e8:	f04f 0b01 	mov.w	fp, #1
 80127ec:	ea8a 0a0b 	eor.w	sl, sl, fp
 80127f0:	f1ba 0f01 	cmp.w	sl, #1
 80127f4:	d133      	bne.n	801285e <mktime+0x28e>
 80127f6:	f1bb 0f00 	cmp.w	fp, #0
 80127fa:	d04e      	beq.n	801289a <mktime+0x2ca>
 80127fc:	1a1b      	subs	r3, r3, r0
 80127fe:	683a      	ldr	r2, [r7, #0]
 8012800:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8012804:	441a      	add	r2, r3
 8012806:	191c      	adds	r4, r3, r4
 8012808:	603a      	str	r2, [r7, #0]
 801280a:	4638      	mov	r0, r7
 801280c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8012810:	f7ff fe08 	bl	8012424 <validate_structure>
 8012814:	68fa      	ldr	r2, [r7, #12]
 8012816:	ebb2 020a 	subs.w	r2, r2, sl
 801281a:	d020      	beq.n	801285e <mktime+0x28e>
 801281c:	2a01      	cmp	r2, #1
 801281e:	dc3e      	bgt.n	801289e <mktime+0x2ce>
 8012820:	1c91      	adds	r1, r2, #2
 8012822:	bfd8      	it	le
 8012824:	2201      	movle	r2, #1
 8012826:	69fb      	ldr	r3, [r7, #28]
 8012828:	4415      	add	r5, r2
 801282a:	18d2      	adds	r2, r2, r3
 801282c:	d540      	bpl.n	80128b0 <mktime+0x2e0>
 801282e:	1e73      	subs	r3, r6, #1
 8012830:	079a      	lsls	r2, r3, #30
 8012832:	d137      	bne.n	80128a4 <mktime+0x2d4>
 8012834:	2264      	movs	r2, #100	; 0x64
 8012836:	fb93 f1f2 	sdiv	r1, r3, r2
 801283a:	fb02 3311 	mls	r3, r2, r1, r3
 801283e:	bba3      	cbnz	r3, 80128aa <mktime+0x2da>
 8012840:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012844:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8012848:	fb96 f2f3 	sdiv	r2, r6, r3
 801284c:	fb03 6612 	mls	r6, r3, r2, r6
 8012850:	2e00      	cmp	r6, #0
 8012852:	f240 136d 	movw	r3, #365	; 0x16d
 8012856:	bf18      	it	ne
 8012858:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801285c:	61fb      	str	r3, [r7, #28]
 801285e:	f1bb 0f01 	cmp.w	fp, #1
 8012862:	f47f af57 	bne.w	8012714 <mktime+0x144>
 8012866:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 801286a:	191c      	adds	r4, r3, r4
 801286c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8012870:	f04f 0b01 	mov.w	fp, #1
 8012874:	f000 f8f4 	bl	8012a60 <__tz_unlock>
 8012878:	3504      	adds	r5, #4
 801287a:	2307      	movs	r3, #7
 801287c:	fb95 f3f3 	sdiv	r3, r5, r3
 8012880:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8012884:	1aed      	subs	r5, r5, r3
 8012886:	bf48      	it	mi
 8012888:	3507      	addmi	r5, #7
 801288a:	f8c7 b020 	str.w	fp, [r7, #32]
 801288e:	61bd      	str	r5, [r7, #24]
 8012890:	4620      	mov	r0, r4
 8012892:	4641      	mov	r1, r8
 8012894:	b005      	add	sp, #20
 8012896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801289a:	1ac3      	subs	r3, r0, r3
 801289c:	e7af      	b.n	80127fe <mktime+0x22e>
 801289e:	f04f 32ff 	mov.w	r2, #4294967295
 80128a2:	e7c0      	b.n	8012826 <mktime+0x256>
 80128a4:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80128a8:	e7d8      	b.n	801285c <mktime+0x28c>
 80128aa:	f240 136d 	movw	r3, #365	; 0x16d
 80128ae:	e7d5      	b.n	801285c <mktime+0x28c>
 80128b0:	07b3      	lsls	r3, r6, #30
 80128b2:	d118      	bne.n	80128e6 <mktime+0x316>
 80128b4:	2164      	movs	r1, #100	; 0x64
 80128b6:	fb96 f3f1 	sdiv	r3, r6, r1
 80128ba:	fb01 6313 	mls	r3, r1, r3, r6
 80128be:	b9db      	cbnz	r3, 80128f8 <mktime+0x328>
 80128c0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80128c4:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80128c8:	fb96 f1f3 	sdiv	r1, r6, r3
 80128cc:	fb03 6611 	mls	r6, r3, r1, r6
 80128d0:	2e00      	cmp	r6, #0
 80128d2:	f240 136d 	movw	r3, #365	; 0x16d
 80128d6:	bf08      	it	eq
 80128d8:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80128dc:	429a      	cmp	r2, r3
 80128de:	bfa8      	it	ge
 80128e0:	1ad2      	subge	r2, r2, r3
 80128e2:	61fa      	str	r2, [r7, #28]
 80128e4:	e7bb      	b.n	801285e <mktime+0x28e>
 80128e6:	f240 136d 	movw	r3, #365	; 0x16d
 80128ea:	e7f7      	b.n	80128dc <mktime+0x30c>
 80128ec:	080173c8 	.word	0x080173c8
 80128f0:	00015180 	.word	0x00015180
 80128f4:	2000ad2c 	.word	0x2000ad2c
 80128f8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80128fc:	e7ee      	b.n	80128dc <mktime+0x30c>
 80128fe:	f04f 34ff 	mov.w	r4, #4294967295
 8012902:	46a0      	mov	r8, r4
 8012904:	e7c4      	b.n	8012890 <mktime+0x2c0>
 8012906:	bf00      	nop

08012908 <__tzcalc_limits>:
 8012908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801290c:	4605      	mov	r5, r0
 801290e:	f001 f9b1 	bl	8013c74 <__gettzinfo>
 8012912:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8012916:	429d      	cmp	r5, r3
 8012918:	f340 8095 	ble.w	8012a46 <__tzcalc_limits+0x13e>
 801291c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8012920:	18ac      	adds	r4, r5, r2
 8012922:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8012926:	f240 126d 	movw	r2, #365	; 0x16d
 801292a:	10a4      	asrs	r4, r4, #2
 801292c:	fb02 4403 	mla	r4, r2, r3, r4
 8012930:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8012934:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8012938:	fb93 f3f2 	sdiv	r3, r3, r2
 801293c:	441c      	add	r4, r3
 801293e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012942:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8012946:	fb95 fcf3 	sdiv	ip, r5, r3
 801294a:	fb03 5c1c 	mls	ip, r3, ip, r5
 801294e:	186a      	adds	r2, r5, r1
 8012950:	fabc f68c 	clz	r6, ip
 8012954:	fbb2 f2f3 	udiv	r2, r2, r3
 8012958:	f005 0303 	and.w	r3, r5, #3
 801295c:	4414      	add	r4, r2
 801295e:	2264      	movs	r2, #100	; 0x64
 8012960:	6045      	str	r5, [r0, #4]
 8012962:	fb95 f7f2 	sdiv	r7, r5, r2
 8012966:	0976      	lsrs	r6, r6, #5
 8012968:	fb02 5717 	mls	r7, r2, r7, r5
 801296c:	4601      	mov	r1, r0
 801296e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8012972:	9300      	str	r3, [sp, #0]
 8012974:	f04f 0a07 	mov.w	sl, #7
 8012978:	7a0d      	ldrb	r5, [r1, #8]
 801297a:	694b      	ldr	r3, [r1, #20]
 801297c:	2d4a      	cmp	r5, #74	; 0x4a
 801297e:	d12b      	bne.n	80129d8 <__tzcalc_limits+0xd0>
 8012980:	9a00      	ldr	r2, [sp, #0]
 8012982:	18e5      	adds	r5, r4, r3
 8012984:	b902      	cbnz	r2, 8012988 <__tzcalc_limits+0x80>
 8012986:	b917      	cbnz	r7, 801298e <__tzcalc_limits+0x86>
 8012988:	f1bc 0f00 	cmp.w	ip, #0
 801298c:	d122      	bne.n	80129d4 <__tzcalc_limits+0xcc>
 801298e:	2b3b      	cmp	r3, #59	; 0x3b
 8012990:	bfd4      	ite	le
 8012992:	2300      	movle	r3, #0
 8012994:	2301      	movgt	r3, #1
 8012996:	442b      	add	r3, r5
 8012998:	3b01      	subs	r3, #1
 801299a:	698d      	ldr	r5, [r1, #24]
 801299c:	4a2b      	ldr	r2, [pc, #172]	; (8012a4c <__tzcalc_limits+0x144>)
 801299e:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 80129a2:	fbc3 5e02 	smlal	r5, lr, r3, r2
 80129a6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80129a8:	18ed      	adds	r5, r5, r3
 80129aa:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 80129ae:	e9c1 5308 	strd	r5, r3, [r1, #32]
 80129b2:	3128      	adds	r1, #40	; 0x28
 80129b4:	458b      	cmp	fp, r1
 80129b6:	d1df      	bne.n	8012978 <__tzcalc_limits+0x70>
 80129b8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 80129bc:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
 80129c0:	428c      	cmp	r4, r1
 80129c2:	4193      	sbcs	r3, r2
 80129c4:	bfb4      	ite	lt
 80129c6:	2301      	movlt	r3, #1
 80129c8:	2300      	movge	r3, #0
 80129ca:	6003      	str	r3, [r0, #0]
 80129cc:	2001      	movs	r0, #1
 80129ce:	b003      	add	sp, #12
 80129d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129d4:	2300      	movs	r3, #0
 80129d6:	e7de      	b.n	8012996 <__tzcalc_limits+0x8e>
 80129d8:	2d44      	cmp	r5, #68	; 0x44
 80129da:	d101      	bne.n	80129e0 <__tzcalc_limits+0xd8>
 80129dc:	4423      	add	r3, r4
 80129de:	e7dc      	b.n	801299a <__tzcalc_limits+0x92>
 80129e0:	9a00      	ldr	r2, [sp, #0]
 80129e2:	bb52      	cbnz	r2, 8012a3a <__tzcalc_limits+0x132>
 80129e4:	2f00      	cmp	r7, #0
 80129e6:	bf0c      	ite	eq
 80129e8:	4635      	moveq	r5, r6
 80129ea:	2501      	movne	r5, #1
 80129ec:	68ca      	ldr	r2, [r1, #12]
 80129ee:	9201      	str	r2, [sp, #4]
 80129f0:	4a17      	ldr	r2, [pc, #92]	; (8012a50 <__tzcalc_limits+0x148>)
 80129f2:	f04f 0930 	mov.w	r9, #48	; 0x30
 80129f6:	fb09 2505 	mla	r5, r9, r5, r2
 80129fa:	46a6      	mov	lr, r4
 80129fc:	f04f 0800 	mov.w	r8, #0
 8012a00:	3d04      	subs	r5, #4
 8012a02:	9a01      	ldr	r2, [sp, #4]
 8012a04:	f108 0801 	add.w	r8, r8, #1
 8012a08:	4542      	cmp	r2, r8
 8012a0a:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8012a0e:	dc16      	bgt.n	8012a3e <__tzcalc_limits+0x136>
 8012a10:	f10e 0504 	add.w	r5, lr, #4
 8012a14:	fb95 f8fa 	sdiv	r8, r5, sl
 8012a18:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8012a1c:	eba5 0508 	sub.w	r5, r5, r8
 8012a20:	1b5d      	subs	r5, r3, r5
 8012a22:	690b      	ldr	r3, [r1, #16]
 8012a24:	f103 33ff 	add.w	r3, r3, #4294967295
 8012a28:	bf48      	it	mi
 8012a2a:	3507      	addmi	r5, #7
 8012a2c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8012a30:	442b      	add	r3, r5
 8012a32:	454b      	cmp	r3, r9
 8012a34:	da05      	bge.n	8012a42 <__tzcalc_limits+0x13a>
 8012a36:	4473      	add	r3, lr
 8012a38:	e7af      	b.n	801299a <__tzcalc_limits+0x92>
 8012a3a:	4635      	mov	r5, r6
 8012a3c:	e7d6      	b.n	80129ec <__tzcalc_limits+0xe4>
 8012a3e:	44ce      	add	lr, r9
 8012a40:	e7df      	b.n	8012a02 <__tzcalc_limits+0xfa>
 8012a42:	3b07      	subs	r3, #7
 8012a44:	e7f5      	b.n	8012a32 <__tzcalc_limits+0x12a>
 8012a46:	2000      	movs	r0, #0
 8012a48:	e7c1      	b.n	80129ce <__tzcalc_limits+0xc6>
 8012a4a:	bf00      	nop
 8012a4c:	00015180 	.word	0x00015180
 8012a50:	080174b8 	.word	0x080174b8

08012a54 <__tz_lock>:
 8012a54:	4801      	ldr	r0, [pc, #4]	; (8012a5c <__tz_lock+0x8>)
 8012a56:	f000 baa0 	b.w	8012f9a <__retarget_lock_acquire>
 8012a5a:	bf00      	nop
 8012a5c:	2000ad3b 	.word	0x2000ad3b

08012a60 <__tz_unlock>:
 8012a60:	4801      	ldr	r0, [pc, #4]	; (8012a68 <__tz_unlock+0x8>)
 8012a62:	f000 ba9c 	b.w	8012f9e <__retarget_lock_release>
 8012a66:	bf00      	nop
 8012a68:	2000ad3b 	.word	0x2000ad3b

08012a6c <_tzset_unlocked>:
 8012a6c:	4b01      	ldr	r3, [pc, #4]	; (8012a74 <_tzset_unlocked+0x8>)
 8012a6e:	6818      	ldr	r0, [r3, #0]
 8012a70:	f000 b802 	b.w	8012a78 <_tzset_unlocked_r>
 8012a74:	20000090 	.word	0x20000090

08012a78 <_tzset_unlocked_r>:
 8012a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a7c:	b08d      	sub	sp, #52	; 0x34
 8012a7e:	4607      	mov	r7, r0
 8012a80:	f001 f8f8 	bl	8013c74 <__gettzinfo>
 8012a84:	49bb      	ldr	r1, [pc, #748]	; (8012d74 <_tzset_unlocked_r+0x2fc>)
 8012a86:	4dbc      	ldr	r5, [pc, #752]	; (8012d78 <_tzset_unlocked_r+0x300>)
 8012a88:	4604      	mov	r4, r0
 8012a8a:	4638      	mov	r0, r7
 8012a8c:	f000 fb5a 	bl	8013144 <_getenv_r>
 8012a90:	4606      	mov	r6, r0
 8012a92:	bb10      	cbnz	r0, 8012ada <_tzset_unlocked_r+0x62>
 8012a94:	4bb9      	ldr	r3, [pc, #740]	; (8012d7c <_tzset_unlocked_r+0x304>)
 8012a96:	4aba      	ldr	r2, [pc, #744]	; (8012d80 <_tzset_unlocked_r+0x308>)
 8012a98:	6018      	str	r0, [r3, #0]
 8012a9a:	4bba      	ldr	r3, [pc, #744]	; (8012d84 <_tzset_unlocked_r+0x30c>)
 8012a9c:	62a0      	str	r0, [r4, #40]	; 0x28
 8012a9e:	6018      	str	r0, [r3, #0]
 8012aa0:	4bb9      	ldr	r3, [pc, #740]	; (8012d88 <_tzset_unlocked_r+0x310>)
 8012aa2:	6520      	str	r0, [r4, #80]	; 0x50
 8012aa4:	e9c3 2200 	strd	r2, r2, [r3]
 8012aa8:	214a      	movs	r1, #74	; 0x4a
 8012aaa:	2200      	movs	r2, #0
 8012aac:	2300      	movs	r3, #0
 8012aae:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8012ab2:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8012ab6:	e9c4 000d 	strd	r0, r0, [r4, #52]	; 0x34
 8012aba:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8012abe:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8012ac2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012ac6:	6828      	ldr	r0, [r5, #0]
 8012ac8:	7221      	strb	r1, [r4, #8]
 8012aca:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8012ace:	f000 fb49 	bl	8013164 <free>
 8012ad2:	602e      	str	r6, [r5, #0]
 8012ad4:	b00d      	add	sp, #52	; 0x34
 8012ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ada:	6829      	ldr	r1, [r5, #0]
 8012adc:	2900      	cmp	r1, #0
 8012ade:	f040 808e 	bne.w	8012bfe <_tzset_unlocked_r+0x186>
 8012ae2:	6828      	ldr	r0, [r5, #0]
 8012ae4:	f000 fb3e 	bl	8013164 <free>
 8012ae8:	4630      	mov	r0, r6
 8012aea:	f7ed fb9b 	bl	8000224 <strlen>
 8012aee:	1c41      	adds	r1, r0, #1
 8012af0:	4638      	mov	r0, r7
 8012af2:	f000 fb5f 	bl	80131b4 <_malloc_r>
 8012af6:	6028      	str	r0, [r5, #0]
 8012af8:	2800      	cmp	r0, #0
 8012afa:	f040 8086 	bne.w	8012c0a <_tzset_unlocked_r+0x192>
 8012afe:	4aa1      	ldr	r2, [pc, #644]	; (8012d84 <_tzset_unlocked_r+0x30c>)
 8012b00:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8012d88 <_tzset_unlocked_r+0x310>
 8012b04:	f8df a274 	ldr.w	sl, [pc, #628]	; 8012d7c <_tzset_unlocked_r+0x304>
 8012b08:	2300      	movs	r3, #0
 8012b0a:	6013      	str	r3, [r2, #0]
 8012b0c:	4a9f      	ldr	r2, [pc, #636]	; (8012d8c <_tzset_unlocked_r+0x314>)
 8012b0e:	f8ca 3000 	str.w	r3, [sl]
 8012b12:	2000      	movs	r0, #0
 8012b14:	2100      	movs	r1, #0
 8012b16:	e9c8 2200 	strd	r2, r2, [r8]
 8012b1a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8012b1e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8012b22:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8012b26:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8012b2a:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8012b2e:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8012b32:	224a      	movs	r2, #74	; 0x4a
 8012b34:	7222      	strb	r2, [r4, #8]
 8012b36:	62a3      	str	r3, [r4, #40]	; 0x28
 8012b38:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8012b3c:	6523      	str	r3, [r4, #80]	; 0x50
 8012b3e:	7833      	ldrb	r3, [r6, #0]
 8012b40:	2b3a      	cmp	r3, #58	; 0x3a
 8012b42:	bf08      	it	eq
 8012b44:	3601      	addeq	r6, #1
 8012b46:	7833      	ldrb	r3, [r6, #0]
 8012b48:	2b3c      	cmp	r3, #60	; 0x3c
 8012b4a:	d162      	bne.n	8012c12 <_tzset_unlocked_r+0x19a>
 8012b4c:	1c75      	adds	r5, r6, #1
 8012b4e:	4a90      	ldr	r2, [pc, #576]	; (8012d90 <_tzset_unlocked_r+0x318>)
 8012b50:	4990      	ldr	r1, [pc, #576]	; (8012d94 <_tzset_unlocked_r+0x31c>)
 8012b52:	ab0a      	add	r3, sp, #40	; 0x28
 8012b54:	4628      	mov	r0, r5
 8012b56:	f000 ffcb 	bl	8013af0 <siscanf>
 8012b5a:	2800      	cmp	r0, #0
 8012b5c:	ddba      	ble.n	8012ad4 <_tzset_unlocked_r+0x5c>
 8012b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b60:	1eda      	subs	r2, r3, #3
 8012b62:	2a07      	cmp	r2, #7
 8012b64:	d8b6      	bhi.n	8012ad4 <_tzset_unlocked_r+0x5c>
 8012b66:	5ceb      	ldrb	r3, [r5, r3]
 8012b68:	2b3e      	cmp	r3, #62	; 0x3e
 8012b6a:	d1b3      	bne.n	8012ad4 <_tzset_unlocked_r+0x5c>
 8012b6c:	3602      	adds	r6, #2
 8012b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b70:	18f5      	adds	r5, r6, r3
 8012b72:	5cf3      	ldrb	r3, [r6, r3]
 8012b74:	2b2d      	cmp	r3, #45	; 0x2d
 8012b76:	d15a      	bne.n	8012c2e <_tzset_unlocked_r+0x1b6>
 8012b78:	3501      	adds	r5, #1
 8012b7a:	f04f 39ff 	mov.w	r9, #4294967295
 8012b7e:	2300      	movs	r3, #0
 8012b80:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012b84:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012b88:	af08      	add	r7, sp, #32
 8012b8a:	ab0a      	add	r3, sp, #40	; 0x28
 8012b8c:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8012b90:	9303      	str	r3, [sp, #12]
 8012b92:	f10d 031e 	add.w	r3, sp, #30
 8012b96:	9300      	str	r3, [sp, #0]
 8012b98:	497f      	ldr	r1, [pc, #508]	; (8012d98 <_tzset_unlocked_r+0x320>)
 8012b9a:	ab0a      	add	r3, sp, #40	; 0x28
 8012b9c:	aa07      	add	r2, sp, #28
 8012b9e:	4628      	mov	r0, r5
 8012ba0:	f000 ffa6 	bl	8013af0 <siscanf>
 8012ba4:	2800      	cmp	r0, #0
 8012ba6:	dd95      	ble.n	8012ad4 <_tzset_unlocked_r+0x5c>
 8012ba8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012bac:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8012bb0:	223c      	movs	r2, #60	; 0x3c
 8012bb2:	fb02 6603 	mla	r6, r2, r3, r6
 8012bb6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8012bba:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8012bbe:	fb02 6603 	mla	r6, r2, r3, r6
 8012bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bc4:	fb09 f606 	mul.w	r6, r9, r6
 8012bc8:	eb05 0903 	add.w	r9, r5, r3
 8012bcc:	5ceb      	ldrb	r3, [r5, r3]
 8012bce:	2b3c      	cmp	r3, #60	; 0x3c
 8012bd0:	f040 80ec 	bne.w	8012dac <_tzset_unlocked_r+0x334>
 8012bd4:	f109 0501 	add.w	r5, r9, #1
 8012bd8:	4a70      	ldr	r2, [pc, #448]	; (8012d9c <_tzset_unlocked_r+0x324>)
 8012bda:	496e      	ldr	r1, [pc, #440]	; (8012d94 <_tzset_unlocked_r+0x31c>)
 8012bdc:	ab0a      	add	r3, sp, #40	; 0x28
 8012bde:	4628      	mov	r0, r5
 8012be0:	f000 ff86 	bl	8013af0 <siscanf>
 8012be4:	2800      	cmp	r0, #0
 8012be6:	dc28      	bgt.n	8012c3a <_tzset_unlocked_r+0x1c2>
 8012be8:	f899 3001 	ldrb.w	r3, [r9, #1]
 8012bec:	2b3e      	cmp	r3, #62	; 0x3e
 8012bee:	d124      	bne.n	8012c3a <_tzset_unlocked_r+0x1c2>
 8012bf0:	4b67      	ldr	r3, [pc, #412]	; (8012d90 <_tzset_unlocked_r+0x318>)
 8012bf2:	62a6      	str	r6, [r4, #40]	; 0x28
 8012bf4:	e9c8 3300 	strd	r3, r3, [r8]
 8012bf8:	f8ca 6000 	str.w	r6, [sl]
 8012bfc:	e76a      	b.n	8012ad4 <_tzset_unlocked_r+0x5c>
 8012bfe:	f7ed fb07 	bl	8000210 <strcmp>
 8012c02:	2800      	cmp	r0, #0
 8012c04:	f47f af6d 	bne.w	8012ae2 <_tzset_unlocked_r+0x6a>
 8012c08:	e764      	b.n	8012ad4 <_tzset_unlocked_r+0x5c>
 8012c0a:	4631      	mov	r1, r6
 8012c0c:	f000 f9c9 	bl	8012fa2 <strcpy>
 8012c10:	e775      	b.n	8012afe <_tzset_unlocked_r+0x86>
 8012c12:	4a5f      	ldr	r2, [pc, #380]	; (8012d90 <_tzset_unlocked_r+0x318>)
 8012c14:	4962      	ldr	r1, [pc, #392]	; (8012da0 <_tzset_unlocked_r+0x328>)
 8012c16:	ab0a      	add	r3, sp, #40	; 0x28
 8012c18:	4630      	mov	r0, r6
 8012c1a:	f000 ff69 	bl	8013af0 <siscanf>
 8012c1e:	2800      	cmp	r0, #0
 8012c20:	f77f af58 	ble.w	8012ad4 <_tzset_unlocked_r+0x5c>
 8012c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c26:	3b03      	subs	r3, #3
 8012c28:	2b07      	cmp	r3, #7
 8012c2a:	d9a0      	bls.n	8012b6e <_tzset_unlocked_r+0xf6>
 8012c2c:	e752      	b.n	8012ad4 <_tzset_unlocked_r+0x5c>
 8012c2e:	2b2b      	cmp	r3, #43	; 0x2b
 8012c30:	bf08      	it	eq
 8012c32:	3501      	addeq	r5, #1
 8012c34:	f04f 0901 	mov.w	r9, #1
 8012c38:	e7a1      	b.n	8012b7e <_tzset_unlocked_r+0x106>
 8012c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c3c:	1eda      	subs	r2, r3, #3
 8012c3e:	2a07      	cmp	r2, #7
 8012c40:	f63f af48 	bhi.w	8012ad4 <_tzset_unlocked_r+0x5c>
 8012c44:	5ceb      	ldrb	r3, [r5, r3]
 8012c46:	2b3e      	cmp	r3, #62	; 0x3e
 8012c48:	f47f af44 	bne.w	8012ad4 <_tzset_unlocked_r+0x5c>
 8012c4c:	f109 0902 	add.w	r9, r9, #2
 8012c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c52:	eb09 0503 	add.w	r5, r9, r3
 8012c56:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012c5a:	2b2d      	cmp	r3, #45	; 0x2d
 8012c5c:	f040 80b5 	bne.w	8012dca <_tzset_unlocked_r+0x352>
 8012c60:	3501      	adds	r5, #1
 8012c62:	f04f 39ff 	mov.w	r9, #4294967295
 8012c66:	2300      	movs	r3, #0
 8012c68:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012c6c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012c70:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012c74:	930a      	str	r3, [sp, #40]	; 0x28
 8012c76:	ab0a      	add	r3, sp, #40	; 0x28
 8012c78:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8012c7c:	9301      	str	r3, [sp, #4]
 8012c7e:	f10d 031e 	add.w	r3, sp, #30
 8012c82:	9300      	str	r3, [sp, #0]
 8012c84:	4944      	ldr	r1, [pc, #272]	; (8012d98 <_tzset_unlocked_r+0x320>)
 8012c86:	ab0a      	add	r3, sp, #40	; 0x28
 8012c88:	aa07      	add	r2, sp, #28
 8012c8a:	4628      	mov	r0, r5
 8012c8c:	f000 ff30 	bl	8013af0 <siscanf>
 8012c90:	2800      	cmp	r0, #0
 8012c92:	f300 80a0 	bgt.w	8012dd6 <_tzset_unlocked_r+0x35e>
 8012c96:	f5a6 6361 	sub.w	r3, r6, #3600	; 0xe10
 8012c9a:	9304      	str	r3, [sp, #16]
 8012c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c9e:	4627      	mov	r7, r4
 8012ca0:	441d      	add	r5, r3
 8012ca2:	f04f 0b00 	mov.w	fp, #0
 8012ca6:	782b      	ldrb	r3, [r5, #0]
 8012ca8:	2b2c      	cmp	r3, #44	; 0x2c
 8012caa:	bf08      	it	eq
 8012cac:	3501      	addeq	r5, #1
 8012cae:	f895 9000 	ldrb.w	r9, [r5]
 8012cb2:	f1b9 0f4d 	cmp.w	r9, #77	; 0x4d
 8012cb6:	f040 80a1 	bne.w	8012dfc <_tzset_unlocked_r+0x384>
 8012cba:	ab0a      	add	r3, sp, #40	; 0x28
 8012cbc:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8012cc0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012cc4:	aa09      	add	r2, sp, #36	; 0x24
 8012cc6:	9200      	str	r2, [sp, #0]
 8012cc8:	4936      	ldr	r1, [pc, #216]	; (8012da4 <_tzset_unlocked_r+0x32c>)
 8012cca:	9303      	str	r3, [sp, #12]
 8012ccc:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8012cd0:	4628      	mov	r0, r5
 8012cd2:	f000 ff0d 	bl	8013af0 <siscanf>
 8012cd6:	2803      	cmp	r0, #3
 8012cd8:	f47f aefc 	bne.w	8012ad4 <_tzset_unlocked_r+0x5c>
 8012cdc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8012ce0:	1e4b      	subs	r3, r1, #1
 8012ce2:	2b0b      	cmp	r3, #11
 8012ce4:	f63f aef6 	bhi.w	8012ad4 <_tzset_unlocked_r+0x5c>
 8012ce8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8012cec:	1e53      	subs	r3, r2, #1
 8012cee:	2b04      	cmp	r3, #4
 8012cf0:	f63f aef0 	bhi.w	8012ad4 <_tzset_unlocked_r+0x5c>
 8012cf4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8012cf8:	2b06      	cmp	r3, #6
 8012cfa:	f63f aeeb 	bhi.w	8012ad4 <_tzset_unlocked_r+0x5c>
 8012cfe:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8012d02:	f887 9008 	strb.w	r9, [r7, #8]
 8012d06:	617b      	str	r3, [r7, #20]
 8012d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d0a:	eb05 0903 	add.w	r9, r5, r3
 8012d0e:	2500      	movs	r5, #0
 8012d10:	2302      	movs	r3, #2
 8012d12:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012d16:	f8ad 501e 	strh.w	r5, [sp, #30]
 8012d1a:	f8ad 5020 	strh.w	r5, [sp, #32]
 8012d1e:	950a      	str	r5, [sp, #40]	; 0x28
 8012d20:	f899 3000 	ldrb.w	r3, [r9]
 8012d24:	2b2f      	cmp	r3, #47	; 0x2f
 8012d26:	f040 8095 	bne.w	8012e54 <_tzset_unlocked_r+0x3dc>
 8012d2a:	ab0a      	add	r3, sp, #40	; 0x28
 8012d2c:	aa08      	add	r2, sp, #32
 8012d2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012d32:	f10d 021e 	add.w	r2, sp, #30
 8012d36:	9200      	str	r2, [sp, #0]
 8012d38:	491b      	ldr	r1, [pc, #108]	; (8012da8 <_tzset_unlocked_r+0x330>)
 8012d3a:	9303      	str	r3, [sp, #12]
 8012d3c:	aa07      	add	r2, sp, #28
 8012d3e:	4648      	mov	r0, r9
 8012d40:	f000 fed6 	bl	8013af0 <siscanf>
 8012d44:	42a8      	cmp	r0, r5
 8012d46:	f300 8085 	bgt.w	8012e54 <_tzset_unlocked_r+0x3dc>
 8012d4a:	214a      	movs	r1, #74	; 0x4a
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	2300      	movs	r3, #0
 8012d50:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8012d54:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012d58:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8012d5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012d60:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 8012d64:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012d68:	7221      	strb	r1, [r4, #8]
 8012d6a:	62a5      	str	r5, [r4, #40]	; 0x28
 8012d6c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8012d70:	6525      	str	r5, [r4, #80]	; 0x50
 8012d72:	e6af      	b.n	8012ad4 <_tzset_unlocked_r+0x5c>
 8012d74:	080173f8 	.word	0x080173f8
 8012d78:	2000ad28 	.word	0x2000ad28
 8012d7c:	2000ad30 	.word	0x2000ad30
 8012d80:	080173fb 	.word	0x080173fb
 8012d84:	2000ad2c 	.word	0x2000ad2c
 8012d88:	2000003c 	.word	0x2000003c
 8012d8c:	08017481 	.word	0x08017481
 8012d90:	2000ad1c 	.word	0x2000ad1c
 8012d94:	080173ff 	.word	0x080173ff
 8012d98:	08017434 	.word	0x08017434
 8012d9c:	2000ad10 	.word	0x2000ad10
 8012da0:	08017412 	.word	0x08017412
 8012da4:	08017420 	.word	0x08017420
 8012da8:	08017433 	.word	0x08017433
 8012dac:	4a3e      	ldr	r2, [pc, #248]	; (8012ea8 <_tzset_unlocked_r+0x430>)
 8012dae:	493f      	ldr	r1, [pc, #252]	; (8012eac <_tzset_unlocked_r+0x434>)
 8012db0:	ab0a      	add	r3, sp, #40	; 0x28
 8012db2:	4648      	mov	r0, r9
 8012db4:	f000 fe9c 	bl	8013af0 <siscanf>
 8012db8:	2800      	cmp	r0, #0
 8012dba:	f77f af19 	ble.w	8012bf0 <_tzset_unlocked_r+0x178>
 8012dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dc0:	3b03      	subs	r3, #3
 8012dc2:	2b07      	cmp	r3, #7
 8012dc4:	f67f af44 	bls.w	8012c50 <_tzset_unlocked_r+0x1d8>
 8012dc8:	e684      	b.n	8012ad4 <_tzset_unlocked_r+0x5c>
 8012dca:	2b2b      	cmp	r3, #43	; 0x2b
 8012dcc:	bf08      	it	eq
 8012dce:	3501      	addeq	r5, #1
 8012dd0:	f04f 0901 	mov.w	r9, #1
 8012dd4:	e747      	b.n	8012c66 <_tzset_unlocked_r+0x1ee>
 8012dd6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8012dda:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012dde:	213c      	movs	r1, #60	; 0x3c
 8012de0:	fb01 3302 	mla	r3, r1, r2, r3
 8012de4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8012de8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8012dec:	fb01 3302 	mla	r3, r1, r2, r3
 8012df0:	fb09 f303 	mul.w	r3, r9, r3
 8012df4:	e751      	b.n	8012c9a <_tzset_unlocked_r+0x222>
 8012df6:	f04f 0b01 	mov.w	fp, #1
 8012dfa:	e754      	b.n	8012ca6 <_tzset_unlocked_r+0x22e>
 8012dfc:	f1b9 0f4a 	cmp.w	r9, #74	; 0x4a
 8012e00:	bf06      	itte	eq
 8012e02:	3501      	addeq	r5, #1
 8012e04:	464b      	moveq	r3, r9
 8012e06:	2344      	movne	r3, #68	; 0x44
 8012e08:	220a      	movs	r2, #10
 8012e0a:	a90b      	add	r1, sp, #44	; 0x2c
 8012e0c:	4628      	mov	r0, r5
 8012e0e:	9305      	str	r3, [sp, #20]
 8012e10:	f000 fad0 	bl	80133b4 <strtoul>
 8012e14:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8012e18:	9b05      	ldr	r3, [sp, #20]
 8012e1a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8012e1e:	45a9      	cmp	r9, r5
 8012e20:	d114      	bne.n	8012e4c <_tzset_unlocked_r+0x3d4>
 8012e22:	234d      	movs	r3, #77	; 0x4d
 8012e24:	f1bb 0f00 	cmp.w	fp, #0
 8012e28:	d107      	bne.n	8012e3a <_tzset_unlocked_r+0x3c2>
 8012e2a:	7223      	strb	r3, [r4, #8]
 8012e2c:	2103      	movs	r1, #3
 8012e2e:	2302      	movs	r3, #2
 8012e30:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8012e34:	f8c4 b014 	str.w	fp, [r4, #20]
 8012e38:	e769      	b.n	8012d0e <_tzset_unlocked_r+0x296>
 8012e3a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8012e3e:	220b      	movs	r2, #11
 8012e40:	2301      	movs	r3, #1
 8012e42:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
 8012e46:	2300      	movs	r3, #0
 8012e48:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012e4a:	e760      	b.n	8012d0e <_tzset_unlocked_r+0x296>
 8012e4c:	b280      	uxth	r0, r0
 8012e4e:	723b      	strb	r3, [r7, #8]
 8012e50:	6178      	str	r0, [r7, #20]
 8012e52:	e75c      	b.n	8012d0e <_tzset_unlocked_r+0x296>
 8012e54:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8012e58:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012e5c:	213c      	movs	r1, #60	; 0x3c
 8012e5e:	fb01 3302 	mla	r3, r1, r2, r3
 8012e62:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8012e66:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8012e6a:	fb01 3302 	mla	r3, r1, r2, r3
 8012e6e:	61bb      	str	r3, [r7, #24]
 8012e70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012e72:	3728      	adds	r7, #40	; 0x28
 8012e74:	444d      	add	r5, r9
 8012e76:	f1bb 0f00 	cmp.w	fp, #0
 8012e7a:	d0bc      	beq.n	8012df6 <_tzset_unlocked_r+0x37e>
 8012e7c:	9b04      	ldr	r3, [sp, #16]
 8012e7e:	6523      	str	r3, [r4, #80]	; 0x50
 8012e80:	4b0b      	ldr	r3, [pc, #44]	; (8012eb0 <_tzset_unlocked_r+0x438>)
 8012e82:	f8c8 3000 	str.w	r3, [r8]
 8012e86:	6860      	ldr	r0, [r4, #4]
 8012e88:	4b07      	ldr	r3, [pc, #28]	; (8012ea8 <_tzset_unlocked_r+0x430>)
 8012e8a:	62a6      	str	r6, [r4, #40]	; 0x28
 8012e8c:	f8c8 3004 	str.w	r3, [r8, #4]
 8012e90:	f7ff fd3a 	bl	8012908 <__tzcalc_limits>
 8012e94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8012e96:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8012e98:	f8ca 2000 	str.w	r2, [sl]
 8012e9c:	1a9b      	subs	r3, r3, r2
 8012e9e:	4a05      	ldr	r2, [pc, #20]	; (8012eb4 <_tzset_unlocked_r+0x43c>)
 8012ea0:	bf18      	it	ne
 8012ea2:	2301      	movne	r3, #1
 8012ea4:	6013      	str	r3, [r2, #0]
 8012ea6:	e615      	b.n	8012ad4 <_tzset_unlocked_r+0x5c>
 8012ea8:	2000ad10 	.word	0x2000ad10
 8012eac:	08017412 	.word	0x08017412
 8012eb0:	2000ad1c 	.word	0x2000ad1c
 8012eb4:	2000ad2c 	.word	0x2000ad2c

08012eb8 <_close_r>:
 8012eb8:	b538      	push	{r3, r4, r5, lr}
 8012eba:	4d06      	ldr	r5, [pc, #24]	; (8012ed4 <_close_r+0x1c>)
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	4608      	mov	r0, r1
 8012ec2:	602b      	str	r3, [r5, #0]
 8012ec4:	f7ee ff6d 	bl	8001da2 <_close>
 8012ec8:	1c43      	adds	r3, r0, #1
 8012eca:	d102      	bne.n	8012ed2 <_close_r+0x1a>
 8012ecc:	682b      	ldr	r3, [r5, #0]
 8012ece:	b103      	cbz	r3, 8012ed2 <_close_r+0x1a>
 8012ed0:	6023      	str	r3, [r4, #0]
 8012ed2:	bd38      	pop	{r3, r4, r5, pc}
 8012ed4:	2000ad34 	.word	0x2000ad34

08012ed8 <_lseek_r>:
 8012ed8:	b538      	push	{r3, r4, r5, lr}
 8012eda:	4d07      	ldr	r5, [pc, #28]	; (8012ef8 <_lseek_r+0x20>)
 8012edc:	4604      	mov	r4, r0
 8012ede:	4608      	mov	r0, r1
 8012ee0:	4611      	mov	r1, r2
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	602a      	str	r2, [r5, #0]
 8012ee6:	461a      	mov	r2, r3
 8012ee8:	f7ee ff82 	bl	8001df0 <_lseek>
 8012eec:	1c43      	adds	r3, r0, #1
 8012eee:	d102      	bne.n	8012ef6 <_lseek_r+0x1e>
 8012ef0:	682b      	ldr	r3, [r5, #0]
 8012ef2:	b103      	cbz	r3, 8012ef6 <_lseek_r+0x1e>
 8012ef4:	6023      	str	r3, [r4, #0]
 8012ef6:	bd38      	pop	{r3, r4, r5, pc}
 8012ef8:	2000ad34 	.word	0x2000ad34

08012efc <_read_r>:
 8012efc:	b538      	push	{r3, r4, r5, lr}
 8012efe:	4d07      	ldr	r5, [pc, #28]	; (8012f1c <_read_r+0x20>)
 8012f00:	4604      	mov	r4, r0
 8012f02:	4608      	mov	r0, r1
 8012f04:	4611      	mov	r1, r2
 8012f06:	2200      	movs	r2, #0
 8012f08:	602a      	str	r2, [r5, #0]
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	f7ee ff10 	bl	8001d30 <_read>
 8012f10:	1c43      	adds	r3, r0, #1
 8012f12:	d102      	bne.n	8012f1a <_read_r+0x1e>
 8012f14:	682b      	ldr	r3, [r5, #0]
 8012f16:	b103      	cbz	r3, 8012f1a <_read_r+0x1e>
 8012f18:	6023      	str	r3, [r4, #0]
 8012f1a:	bd38      	pop	{r3, r4, r5, pc}
 8012f1c:	2000ad34 	.word	0x2000ad34

08012f20 <_write_r>:
 8012f20:	b538      	push	{r3, r4, r5, lr}
 8012f22:	4d07      	ldr	r5, [pc, #28]	; (8012f40 <_write_r+0x20>)
 8012f24:	4604      	mov	r4, r0
 8012f26:	4608      	mov	r0, r1
 8012f28:	4611      	mov	r1, r2
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	602a      	str	r2, [r5, #0]
 8012f2e:	461a      	mov	r2, r3
 8012f30:	f7ee ff1b 	bl	8001d6a <_write>
 8012f34:	1c43      	adds	r3, r0, #1
 8012f36:	d102      	bne.n	8012f3e <_write_r+0x1e>
 8012f38:	682b      	ldr	r3, [r5, #0]
 8012f3a:	b103      	cbz	r3, 8012f3e <_write_r+0x1e>
 8012f3c:	6023      	str	r3, [r4, #0]
 8012f3e:	bd38      	pop	{r3, r4, r5, pc}
 8012f40:	2000ad34 	.word	0x2000ad34

08012f44 <__errno>:
 8012f44:	4b01      	ldr	r3, [pc, #4]	; (8012f4c <__errno+0x8>)
 8012f46:	6818      	ldr	r0, [r3, #0]
 8012f48:	4770      	bx	lr
 8012f4a:	bf00      	nop
 8012f4c:	20000090 	.word	0x20000090

08012f50 <__libc_init_array>:
 8012f50:	b570      	push	{r4, r5, r6, lr}
 8012f52:	4d0d      	ldr	r5, [pc, #52]	; (8012f88 <__libc_init_array+0x38>)
 8012f54:	4c0d      	ldr	r4, [pc, #52]	; (8012f8c <__libc_init_array+0x3c>)
 8012f56:	1b64      	subs	r4, r4, r5
 8012f58:	10a4      	asrs	r4, r4, #2
 8012f5a:	2600      	movs	r6, #0
 8012f5c:	42a6      	cmp	r6, r4
 8012f5e:	d109      	bne.n	8012f74 <__libc_init_array+0x24>
 8012f60:	4d0b      	ldr	r5, [pc, #44]	; (8012f90 <__libc_init_array+0x40>)
 8012f62:	4c0c      	ldr	r4, [pc, #48]	; (8012f94 <__libc_init_array+0x44>)
 8012f64:	f001 fb42 	bl	80145ec <_init>
 8012f68:	1b64      	subs	r4, r4, r5
 8012f6a:	10a4      	asrs	r4, r4, #2
 8012f6c:	2600      	movs	r6, #0
 8012f6e:	42a6      	cmp	r6, r4
 8012f70:	d105      	bne.n	8012f7e <__libc_init_array+0x2e>
 8012f72:	bd70      	pop	{r4, r5, r6, pc}
 8012f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f78:	4798      	blx	r3
 8012f7a:	3601      	adds	r6, #1
 8012f7c:	e7ee      	b.n	8012f5c <__libc_init_array+0xc>
 8012f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f82:	4798      	blx	r3
 8012f84:	3601      	adds	r6, #1
 8012f86:	e7f2      	b.n	8012f6e <__libc_init_array+0x1e>
 8012f88:	0801753c 	.word	0x0801753c
 8012f8c:	0801753c 	.word	0x0801753c
 8012f90:	0801753c 	.word	0x0801753c
 8012f94:	08017540 	.word	0x08017540

08012f98 <__retarget_lock_init_recursive>:
 8012f98:	4770      	bx	lr

08012f9a <__retarget_lock_acquire>:
 8012f9a:	4770      	bx	lr

08012f9c <__retarget_lock_acquire_recursive>:
 8012f9c:	4770      	bx	lr

08012f9e <__retarget_lock_release>:
 8012f9e:	4770      	bx	lr

08012fa0 <__retarget_lock_release_recursive>:
 8012fa0:	4770      	bx	lr

08012fa2 <strcpy>:
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012fa8:	f803 2b01 	strb.w	r2, [r3], #1
 8012fac:	2a00      	cmp	r2, #0
 8012fae:	d1f9      	bne.n	8012fa4 <strcpy+0x2>
 8012fb0:	4770      	bx	lr

08012fb2 <memcpy>:
 8012fb2:	440a      	add	r2, r1
 8012fb4:	4291      	cmp	r1, r2
 8012fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8012fba:	d100      	bne.n	8012fbe <memcpy+0xc>
 8012fbc:	4770      	bx	lr
 8012fbe:	b510      	push	{r4, lr}
 8012fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012fc8:	4291      	cmp	r1, r2
 8012fca:	d1f9      	bne.n	8012fc0 <memcpy+0xe>
 8012fcc:	bd10      	pop	{r4, pc}
	...

08012fd0 <__assert_func>:
 8012fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012fd2:	4614      	mov	r4, r2
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	4b09      	ldr	r3, [pc, #36]	; (8012ffc <__assert_func+0x2c>)
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	4605      	mov	r5, r0
 8012fdc:	68d8      	ldr	r0, [r3, #12]
 8012fde:	b14c      	cbz	r4, 8012ff4 <__assert_func+0x24>
 8012fe0:	4b07      	ldr	r3, [pc, #28]	; (8013000 <__assert_func+0x30>)
 8012fe2:	9100      	str	r1, [sp, #0]
 8012fe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012fe8:	4906      	ldr	r1, [pc, #24]	; (8013004 <__assert_func+0x34>)
 8012fea:	462b      	mov	r3, r5
 8012fec:	f000 fd6e 	bl	8013acc <fiprintf>
 8012ff0:	f000 fe54 	bl	8013c9c <abort>
 8012ff4:	4b04      	ldr	r3, [pc, #16]	; (8013008 <__assert_func+0x38>)
 8012ff6:	461c      	mov	r4, r3
 8012ff8:	e7f3      	b.n	8012fe2 <__assert_func+0x12>
 8012ffa:	bf00      	nop
 8012ffc:	20000090 	.word	0x20000090
 8013000:	08017446 	.word	0x08017446
 8013004:	08017453 	.word	0x08017453
 8013008:	08017481 	.word	0x08017481

0801300c <div>:
 801300c:	2900      	cmp	r1, #0
 801300e:	b510      	push	{r4, lr}
 8013010:	fb91 f4f2 	sdiv	r4, r1, r2
 8013014:	fb02 1314 	mls	r3, r2, r4, r1
 8013018:	db06      	blt.n	8013028 <div+0x1c>
 801301a:	2b00      	cmp	r3, #0
 801301c:	da01      	bge.n	8013022 <div+0x16>
 801301e:	3401      	adds	r4, #1
 8013020:	1a9b      	subs	r3, r3, r2
 8013022:	e9c0 4300 	strd	r4, r3, [r0]
 8013026:	bd10      	pop	{r4, pc}
 8013028:	2b00      	cmp	r3, #0
 801302a:	bfc4      	itt	gt
 801302c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8013030:	189b      	addgt	r3, r3, r2
 8013032:	e7f6      	b.n	8013022 <div+0x16>

08013034 <_free_r>:
 8013034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013036:	2900      	cmp	r1, #0
 8013038:	d044      	beq.n	80130c4 <_free_r+0x90>
 801303a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801303e:	9001      	str	r0, [sp, #4]
 8013040:	2b00      	cmp	r3, #0
 8013042:	f1a1 0404 	sub.w	r4, r1, #4
 8013046:	bfb8      	it	lt
 8013048:	18e4      	addlt	r4, r4, r3
 801304a:	f000 f933 	bl	80132b4 <__malloc_lock>
 801304e:	4a1e      	ldr	r2, [pc, #120]	; (80130c8 <_free_r+0x94>)
 8013050:	9801      	ldr	r0, [sp, #4]
 8013052:	6813      	ldr	r3, [r2, #0]
 8013054:	b933      	cbnz	r3, 8013064 <_free_r+0x30>
 8013056:	6063      	str	r3, [r4, #4]
 8013058:	6014      	str	r4, [r2, #0]
 801305a:	b003      	add	sp, #12
 801305c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013060:	f000 b92e 	b.w	80132c0 <__malloc_unlock>
 8013064:	42a3      	cmp	r3, r4
 8013066:	d908      	bls.n	801307a <_free_r+0x46>
 8013068:	6825      	ldr	r5, [r4, #0]
 801306a:	1961      	adds	r1, r4, r5
 801306c:	428b      	cmp	r3, r1
 801306e:	bf01      	itttt	eq
 8013070:	6819      	ldreq	r1, [r3, #0]
 8013072:	685b      	ldreq	r3, [r3, #4]
 8013074:	1949      	addeq	r1, r1, r5
 8013076:	6021      	streq	r1, [r4, #0]
 8013078:	e7ed      	b.n	8013056 <_free_r+0x22>
 801307a:	461a      	mov	r2, r3
 801307c:	685b      	ldr	r3, [r3, #4]
 801307e:	b10b      	cbz	r3, 8013084 <_free_r+0x50>
 8013080:	42a3      	cmp	r3, r4
 8013082:	d9fa      	bls.n	801307a <_free_r+0x46>
 8013084:	6811      	ldr	r1, [r2, #0]
 8013086:	1855      	adds	r5, r2, r1
 8013088:	42a5      	cmp	r5, r4
 801308a:	d10b      	bne.n	80130a4 <_free_r+0x70>
 801308c:	6824      	ldr	r4, [r4, #0]
 801308e:	4421      	add	r1, r4
 8013090:	1854      	adds	r4, r2, r1
 8013092:	42a3      	cmp	r3, r4
 8013094:	6011      	str	r1, [r2, #0]
 8013096:	d1e0      	bne.n	801305a <_free_r+0x26>
 8013098:	681c      	ldr	r4, [r3, #0]
 801309a:	685b      	ldr	r3, [r3, #4]
 801309c:	6053      	str	r3, [r2, #4]
 801309e:	440c      	add	r4, r1
 80130a0:	6014      	str	r4, [r2, #0]
 80130a2:	e7da      	b.n	801305a <_free_r+0x26>
 80130a4:	d902      	bls.n	80130ac <_free_r+0x78>
 80130a6:	230c      	movs	r3, #12
 80130a8:	6003      	str	r3, [r0, #0]
 80130aa:	e7d6      	b.n	801305a <_free_r+0x26>
 80130ac:	6825      	ldr	r5, [r4, #0]
 80130ae:	1961      	adds	r1, r4, r5
 80130b0:	428b      	cmp	r3, r1
 80130b2:	bf04      	itt	eq
 80130b4:	6819      	ldreq	r1, [r3, #0]
 80130b6:	685b      	ldreq	r3, [r3, #4]
 80130b8:	6063      	str	r3, [r4, #4]
 80130ba:	bf04      	itt	eq
 80130bc:	1949      	addeq	r1, r1, r5
 80130be:	6021      	streq	r1, [r4, #0]
 80130c0:	6054      	str	r4, [r2, #4]
 80130c2:	e7ca      	b.n	801305a <_free_r+0x26>
 80130c4:	b003      	add	sp, #12
 80130c6:	bd30      	pop	{r4, r5, pc}
 80130c8:	2000ad3c 	.word	0x2000ad3c

080130cc <_findenv_r>:
 80130cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130d0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8013140 <_findenv_r+0x74>
 80130d4:	4607      	mov	r7, r0
 80130d6:	4689      	mov	r9, r1
 80130d8:	4616      	mov	r6, r2
 80130da:	f000 fde7 	bl	8013cac <__env_lock>
 80130de:	f8da 4000 	ldr.w	r4, [sl]
 80130e2:	b134      	cbz	r4, 80130f2 <_findenv_r+0x26>
 80130e4:	464b      	mov	r3, r9
 80130e6:	4698      	mov	r8, r3
 80130e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130ec:	b13a      	cbz	r2, 80130fe <_findenv_r+0x32>
 80130ee:	2a3d      	cmp	r2, #61	; 0x3d
 80130f0:	d1f9      	bne.n	80130e6 <_findenv_r+0x1a>
 80130f2:	4638      	mov	r0, r7
 80130f4:	f000 fde0 	bl	8013cb8 <__env_unlock>
 80130f8:	2000      	movs	r0, #0
 80130fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130fe:	eba8 0809 	sub.w	r8, r8, r9
 8013102:	46a3      	mov	fp, r4
 8013104:	f854 0b04 	ldr.w	r0, [r4], #4
 8013108:	2800      	cmp	r0, #0
 801310a:	d0f2      	beq.n	80130f2 <_findenv_r+0x26>
 801310c:	4642      	mov	r2, r8
 801310e:	4649      	mov	r1, r9
 8013110:	f7ff f8cf 	bl	80122b2 <strncmp>
 8013114:	2800      	cmp	r0, #0
 8013116:	d1f4      	bne.n	8013102 <_findenv_r+0x36>
 8013118:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801311c:	eb03 0508 	add.w	r5, r3, r8
 8013120:	f813 3008 	ldrb.w	r3, [r3, r8]
 8013124:	2b3d      	cmp	r3, #61	; 0x3d
 8013126:	d1ec      	bne.n	8013102 <_findenv_r+0x36>
 8013128:	f8da 3000 	ldr.w	r3, [sl]
 801312c:	ebab 0303 	sub.w	r3, fp, r3
 8013130:	109b      	asrs	r3, r3, #2
 8013132:	4638      	mov	r0, r7
 8013134:	6033      	str	r3, [r6, #0]
 8013136:	f000 fdbf 	bl	8013cb8 <__env_unlock>
 801313a:	1c68      	adds	r0, r5, #1
 801313c:	e7dd      	b.n	80130fa <_findenv_r+0x2e>
 801313e:	bf00      	nop
 8013140:	20000000 	.word	0x20000000

08013144 <_getenv_r>:
 8013144:	b507      	push	{r0, r1, r2, lr}
 8013146:	aa01      	add	r2, sp, #4
 8013148:	f7ff ffc0 	bl	80130cc <_findenv_r>
 801314c:	b003      	add	sp, #12
 801314e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08013154 <malloc>:
 8013154:	4b02      	ldr	r3, [pc, #8]	; (8013160 <malloc+0xc>)
 8013156:	4601      	mov	r1, r0
 8013158:	6818      	ldr	r0, [r3, #0]
 801315a:	f000 b82b 	b.w	80131b4 <_malloc_r>
 801315e:	bf00      	nop
 8013160:	20000090 	.word	0x20000090

08013164 <free>:
 8013164:	4b02      	ldr	r3, [pc, #8]	; (8013170 <free+0xc>)
 8013166:	4601      	mov	r1, r0
 8013168:	6818      	ldr	r0, [r3, #0]
 801316a:	f7ff bf63 	b.w	8013034 <_free_r>
 801316e:	bf00      	nop
 8013170:	20000090 	.word	0x20000090

08013174 <sbrk_aligned>:
 8013174:	b570      	push	{r4, r5, r6, lr}
 8013176:	4e0e      	ldr	r6, [pc, #56]	; (80131b0 <sbrk_aligned+0x3c>)
 8013178:	460c      	mov	r4, r1
 801317a:	6831      	ldr	r1, [r6, #0]
 801317c:	4605      	mov	r5, r0
 801317e:	b911      	cbnz	r1, 8013186 <sbrk_aligned+0x12>
 8013180:	f000 fd7c 	bl	8013c7c <_sbrk_r>
 8013184:	6030      	str	r0, [r6, #0]
 8013186:	4621      	mov	r1, r4
 8013188:	4628      	mov	r0, r5
 801318a:	f000 fd77 	bl	8013c7c <_sbrk_r>
 801318e:	1c43      	adds	r3, r0, #1
 8013190:	d00a      	beq.n	80131a8 <sbrk_aligned+0x34>
 8013192:	1cc4      	adds	r4, r0, #3
 8013194:	f024 0403 	bic.w	r4, r4, #3
 8013198:	42a0      	cmp	r0, r4
 801319a:	d007      	beq.n	80131ac <sbrk_aligned+0x38>
 801319c:	1a21      	subs	r1, r4, r0
 801319e:	4628      	mov	r0, r5
 80131a0:	f000 fd6c 	bl	8013c7c <_sbrk_r>
 80131a4:	3001      	adds	r0, #1
 80131a6:	d101      	bne.n	80131ac <sbrk_aligned+0x38>
 80131a8:	f04f 34ff 	mov.w	r4, #4294967295
 80131ac:	4620      	mov	r0, r4
 80131ae:	bd70      	pop	{r4, r5, r6, pc}
 80131b0:	2000ad40 	.word	0x2000ad40

080131b4 <_malloc_r>:
 80131b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131b8:	1ccd      	adds	r5, r1, #3
 80131ba:	f025 0503 	bic.w	r5, r5, #3
 80131be:	3508      	adds	r5, #8
 80131c0:	2d0c      	cmp	r5, #12
 80131c2:	bf38      	it	cc
 80131c4:	250c      	movcc	r5, #12
 80131c6:	2d00      	cmp	r5, #0
 80131c8:	4607      	mov	r7, r0
 80131ca:	db01      	blt.n	80131d0 <_malloc_r+0x1c>
 80131cc:	42a9      	cmp	r1, r5
 80131ce:	d905      	bls.n	80131dc <_malloc_r+0x28>
 80131d0:	230c      	movs	r3, #12
 80131d2:	603b      	str	r3, [r7, #0]
 80131d4:	2600      	movs	r6, #0
 80131d6:	4630      	mov	r0, r6
 80131d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80132b0 <_malloc_r+0xfc>
 80131e0:	f000 f868 	bl	80132b4 <__malloc_lock>
 80131e4:	f8d8 3000 	ldr.w	r3, [r8]
 80131e8:	461c      	mov	r4, r3
 80131ea:	bb5c      	cbnz	r4, 8013244 <_malloc_r+0x90>
 80131ec:	4629      	mov	r1, r5
 80131ee:	4638      	mov	r0, r7
 80131f0:	f7ff ffc0 	bl	8013174 <sbrk_aligned>
 80131f4:	1c43      	adds	r3, r0, #1
 80131f6:	4604      	mov	r4, r0
 80131f8:	d155      	bne.n	80132a6 <_malloc_r+0xf2>
 80131fa:	f8d8 4000 	ldr.w	r4, [r8]
 80131fe:	4626      	mov	r6, r4
 8013200:	2e00      	cmp	r6, #0
 8013202:	d145      	bne.n	8013290 <_malloc_r+0xdc>
 8013204:	2c00      	cmp	r4, #0
 8013206:	d048      	beq.n	801329a <_malloc_r+0xe6>
 8013208:	6823      	ldr	r3, [r4, #0]
 801320a:	4631      	mov	r1, r6
 801320c:	4638      	mov	r0, r7
 801320e:	eb04 0903 	add.w	r9, r4, r3
 8013212:	f000 fd33 	bl	8013c7c <_sbrk_r>
 8013216:	4581      	cmp	r9, r0
 8013218:	d13f      	bne.n	801329a <_malloc_r+0xe6>
 801321a:	6821      	ldr	r1, [r4, #0]
 801321c:	1a6d      	subs	r5, r5, r1
 801321e:	4629      	mov	r1, r5
 8013220:	4638      	mov	r0, r7
 8013222:	f7ff ffa7 	bl	8013174 <sbrk_aligned>
 8013226:	3001      	adds	r0, #1
 8013228:	d037      	beq.n	801329a <_malloc_r+0xe6>
 801322a:	6823      	ldr	r3, [r4, #0]
 801322c:	442b      	add	r3, r5
 801322e:	6023      	str	r3, [r4, #0]
 8013230:	f8d8 3000 	ldr.w	r3, [r8]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d038      	beq.n	80132aa <_malloc_r+0xf6>
 8013238:	685a      	ldr	r2, [r3, #4]
 801323a:	42a2      	cmp	r2, r4
 801323c:	d12b      	bne.n	8013296 <_malloc_r+0xe2>
 801323e:	2200      	movs	r2, #0
 8013240:	605a      	str	r2, [r3, #4]
 8013242:	e00f      	b.n	8013264 <_malloc_r+0xb0>
 8013244:	6822      	ldr	r2, [r4, #0]
 8013246:	1b52      	subs	r2, r2, r5
 8013248:	d41f      	bmi.n	801328a <_malloc_r+0xd6>
 801324a:	2a0b      	cmp	r2, #11
 801324c:	d917      	bls.n	801327e <_malloc_r+0xca>
 801324e:	1961      	adds	r1, r4, r5
 8013250:	42a3      	cmp	r3, r4
 8013252:	6025      	str	r5, [r4, #0]
 8013254:	bf18      	it	ne
 8013256:	6059      	strne	r1, [r3, #4]
 8013258:	6863      	ldr	r3, [r4, #4]
 801325a:	bf08      	it	eq
 801325c:	f8c8 1000 	streq.w	r1, [r8]
 8013260:	5162      	str	r2, [r4, r5]
 8013262:	604b      	str	r3, [r1, #4]
 8013264:	4638      	mov	r0, r7
 8013266:	f104 060b 	add.w	r6, r4, #11
 801326a:	f000 f829 	bl	80132c0 <__malloc_unlock>
 801326e:	f026 0607 	bic.w	r6, r6, #7
 8013272:	1d23      	adds	r3, r4, #4
 8013274:	1af2      	subs	r2, r6, r3
 8013276:	d0ae      	beq.n	80131d6 <_malloc_r+0x22>
 8013278:	1b9b      	subs	r3, r3, r6
 801327a:	50a3      	str	r3, [r4, r2]
 801327c:	e7ab      	b.n	80131d6 <_malloc_r+0x22>
 801327e:	42a3      	cmp	r3, r4
 8013280:	6862      	ldr	r2, [r4, #4]
 8013282:	d1dd      	bne.n	8013240 <_malloc_r+0x8c>
 8013284:	f8c8 2000 	str.w	r2, [r8]
 8013288:	e7ec      	b.n	8013264 <_malloc_r+0xb0>
 801328a:	4623      	mov	r3, r4
 801328c:	6864      	ldr	r4, [r4, #4]
 801328e:	e7ac      	b.n	80131ea <_malloc_r+0x36>
 8013290:	4634      	mov	r4, r6
 8013292:	6876      	ldr	r6, [r6, #4]
 8013294:	e7b4      	b.n	8013200 <_malloc_r+0x4c>
 8013296:	4613      	mov	r3, r2
 8013298:	e7cc      	b.n	8013234 <_malloc_r+0x80>
 801329a:	230c      	movs	r3, #12
 801329c:	603b      	str	r3, [r7, #0]
 801329e:	4638      	mov	r0, r7
 80132a0:	f000 f80e 	bl	80132c0 <__malloc_unlock>
 80132a4:	e797      	b.n	80131d6 <_malloc_r+0x22>
 80132a6:	6025      	str	r5, [r4, #0]
 80132a8:	e7dc      	b.n	8013264 <_malloc_r+0xb0>
 80132aa:	605b      	str	r3, [r3, #4]
 80132ac:	deff      	udf	#255	; 0xff
 80132ae:	bf00      	nop
 80132b0:	2000ad3c 	.word	0x2000ad3c

080132b4 <__malloc_lock>:
 80132b4:	4801      	ldr	r0, [pc, #4]	; (80132bc <__malloc_lock+0x8>)
 80132b6:	f7ff be71 	b.w	8012f9c <__retarget_lock_acquire_recursive>
 80132ba:	bf00      	nop
 80132bc:	2000ad39 	.word	0x2000ad39

080132c0 <__malloc_unlock>:
 80132c0:	4801      	ldr	r0, [pc, #4]	; (80132c8 <__malloc_unlock+0x8>)
 80132c2:	f7ff be6d 	b.w	8012fa0 <__retarget_lock_release_recursive>
 80132c6:	bf00      	nop
 80132c8:	2000ad39 	.word	0x2000ad39

080132cc <_strtoul_l.constprop.0>:
 80132cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132d0:	4f36      	ldr	r7, [pc, #216]	; (80133ac <_strtoul_l.constprop.0+0xe0>)
 80132d2:	4686      	mov	lr, r0
 80132d4:	460d      	mov	r5, r1
 80132d6:	4628      	mov	r0, r5
 80132d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80132dc:	5d3e      	ldrb	r6, [r7, r4]
 80132de:	f016 0608 	ands.w	r6, r6, #8
 80132e2:	d1f8      	bne.n	80132d6 <_strtoul_l.constprop.0+0xa>
 80132e4:	2c2d      	cmp	r4, #45	; 0x2d
 80132e6:	d130      	bne.n	801334a <_strtoul_l.constprop.0+0x7e>
 80132e8:	782c      	ldrb	r4, [r5, #0]
 80132ea:	2601      	movs	r6, #1
 80132ec:	1c85      	adds	r5, r0, #2
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d057      	beq.n	80133a2 <_strtoul_l.constprop.0+0xd6>
 80132f2:	2b10      	cmp	r3, #16
 80132f4:	d109      	bne.n	801330a <_strtoul_l.constprop.0+0x3e>
 80132f6:	2c30      	cmp	r4, #48	; 0x30
 80132f8:	d107      	bne.n	801330a <_strtoul_l.constprop.0+0x3e>
 80132fa:	7828      	ldrb	r0, [r5, #0]
 80132fc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013300:	2858      	cmp	r0, #88	; 0x58
 8013302:	d149      	bne.n	8013398 <_strtoul_l.constprop.0+0xcc>
 8013304:	786c      	ldrb	r4, [r5, #1]
 8013306:	2310      	movs	r3, #16
 8013308:	3502      	adds	r5, #2
 801330a:	f04f 38ff 	mov.w	r8, #4294967295
 801330e:	2700      	movs	r7, #0
 8013310:	fbb8 f8f3 	udiv	r8, r8, r3
 8013314:	fb03 f908 	mul.w	r9, r3, r8
 8013318:	ea6f 0909 	mvn.w	r9, r9
 801331c:	4638      	mov	r0, r7
 801331e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013322:	f1bc 0f09 	cmp.w	ip, #9
 8013326:	d815      	bhi.n	8013354 <_strtoul_l.constprop.0+0x88>
 8013328:	4664      	mov	r4, ip
 801332a:	42a3      	cmp	r3, r4
 801332c:	dd23      	ble.n	8013376 <_strtoul_l.constprop.0+0xaa>
 801332e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8013332:	d007      	beq.n	8013344 <_strtoul_l.constprop.0+0x78>
 8013334:	4580      	cmp	r8, r0
 8013336:	d31b      	bcc.n	8013370 <_strtoul_l.constprop.0+0xa4>
 8013338:	d101      	bne.n	801333e <_strtoul_l.constprop.0+0x72>
 801333a:	45a1      	cmp	r9, r4
 801333c:	db18      	blt.n	8013370 <_strtoul_l.constprop.0+0xa4>
 801333e:	fb00 4003 	mla	r0, r0, r3, r4
 8013342:	2701      	movs	r7, #1
 8013344:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013348:	e7e9      	b.n	801331e <_strtoul_l.constprop.0+0x52>
 801334a:	2c2b      	cmp	r4, #43	; 0x2b
 801334c:	bf04      	itt	eq
 801334e:	782c      	ldrbeq	r4, [r5, #0]
 8013350:	1c85      	addeq	r5, r0, #2
 8013352:	e7cc      	b.n	80132ee <_strtoul_l.constprop.0+0x22>
 8013354:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013358:	f1bc 0f19 	cmp.w	ip, #25
 801335c:	d801      	bhi.n	8013362 <_strtoul_l.constprop.0+0x96>
 801335e:	3c37      	subs	r4, #55	; 0x37
 8013360:	e7e3      	b.n	801332a <_strtoul_l.constprop.0+0x5e>
 8013362:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013366:	f1bc 0f19 	cmp.w	ip, #25
 801336a:	d804      	bhi.n	8013376 <_strtoul_l.constprop.0+0xaa>
 801336c:	3c57      	subs	r4, #87	; 0x57
 801336e:	e7dc      	b.n	801332a <_strtoul_l.constprop.0+0x5e>
 8013370:	f04f 37ff 	mov.w	r7, #4294967295
 8013374:	e7e6      	b.n	8013344 <_strtoul_l.constprop.0+0x78>
 8013376:	1c7b      	adds	r3, r7, #1
 8013378:	d106      	bne.n	8013388 <_strtoul_l.constprop.0+0xbc>
 801337a:	2322      	movs	r3, #34	; 0x22
 801337c:	f8ce 3000 	str.w	r3, [lr]
 8013380:	4638      	mov	r0, r7
 8013382:	b932      	cbnz	r2, 8013392 <_strtoul_l.constprop.0+0xc6>
 8013384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013388:	b106      	cbz	r6, 801338c <_strtoul_l.constprop.0+0xc0>
 801338a:	4240      	negs	r0, r0
 801338c:	2a00      	cmp	r2, #0
 801338e:	d0f9      	beq.n	8013384 <_strtoul_l.constprop.0+0xb8>
 8013390:	b107      	cbz	r7, 8013394 <_strtoul_l.constprop.0+0xc8>
 8013392:	1e69      	subs	r1, r5, #1
 8013394:	6011      	str	r1, [r2, #0]
 8013396:	e7f5      	b.n	8013384 <_strtoul_l.constprop.0+0xb8>
 8013398:	2430      	movs	r4, #48	; 0x30
 801339a:	2b00      	cmp	r3, #0
 801339c:	d1b5      	bne.n	801330a <_strtoul_l.constprop.0+0x3e>
 801339e:	2308      	movs	r3, #8
 80133a0:	e7b3      	b.n	801330a <_strtoul_l.constprop.0+0x3e>
 80133a2:	2c30      	cmp	r4, #48	; 0x30
 80133a4:	d0a9      	beq.n	80132fa <_strtoul_l.constprop.0+0x2e>
 80133a6:	230a      	movs	r3, #10
 80133a8:	e7af      	b.n	801330a <_strtoul_l.constprop.0+0x3e>
 80133aa:	bf00      	nop
 80133ac:	08017296 	.word	0x08017296

080133b0 <_strtoul_r>:
 80133b0:	f7ff bf8c 	b.w	80132cc <_strtoul_l.constprop.0>

080133b4 <strtoul>:
 80133b4:	4613      	mov	r3, r2
 80133b6:	460a      	mov	r2, r1
 80133b8:	4601      	mov	r1, r0
 80133ba:	4802      	ldr	r0, [pc, #8]	; (80133c4 <strtoul+0x10>)
 80133bc:	6800      	ldr	r0, [r0, #0]
 80133be:	f7ff bf85 	b.w	80132cc <_strtoul_l.constprop.0>
 80133c2:	bf00      	nop
 80133c4:	20000090 	.word	0x20000090

080133c8 <__sfputc_r>:
 80133c8:	6893      	ldr	r3, [r2, #8]
 80133ca:	3b01      	subs	r3, #1
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	b410      	push	{r4}
 80133d0:	6093      	str	r3, [r2, #8]
 80133d2:	da08      	bge.n	80133e6 <__sfputc_r+0x1e>
 80133d4:	6994      	ldr	r4, [r2, #24]
 80133d6:	42a3      	cmp	r3, r4
 80133d8:	db01      	blt.n	80133de <__sfputc_r+0x16>
 80133da:	290a      	cmp	r1, #10
 80133dc:	d103      	bne.n	80133e6 <__sfputc_r+0x1e>
 80133de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133e2:	f000 bbb1 	b.w	8013b48 <__swbuf_r>
 80133e6:	6813      	ldr	r3, [r2, #0]
 80133e8:	1c58      	adds	r0, r3, #1
 80133ea:	6010      	str	r0, [r2, #0]
 80133ec:	7019      	strb	r1, [r3, #0]
 80133ee:	4608      	mov	r0, r1
 80133f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133f4:	4770      	bx	lr

080133f6 <__sfputs_r>:
 80133f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133f8:	4606      	mov	r6, r0
 80133fa:	460f      	mov	r7, r1
 80133fc:	4614      	mov	r4, r2
 80133fe:	18d5      	adds	r5, r2, r3
 8013400:	42ac      	cmp	r4, r5
 8013402:	d101      	bne.n	8013408 <__sfputs_r+0x12>
 8013404:	2000      	movs	r0, #0
 8013406:	e007      	b.n	8013418 <__sfputs_r+0x22>
 8013408:	f814 1b01 	ldrb.w	r1, [r4], #1
 801340c:	463a      	mov	r2, r7
 801340e:	4630      	mov	r0, r6
 8013410:	f7ff ffda 	bl	80133c8 <__sfputc_r>
 8013414:	1c43      	adds	r3, r0, #1
 8013416:	d1f3      	bne.n	8013400 <__sfputs_r+0xa>
 8013418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801341c <_vfiprintf_r>:
 801341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013420:	460d      	mov	r5, r1
 8013422:	b09d      	sub	sp, #116	; 0x74
 8013424:	4614      	mov	r4, r2
 8013426:	4698      	mov	r8, r3
 8013428:	4606      	mov	r6, r0
 801342a:	b118      	cbz	r0, 8013434 <_vfiprintf_r+0x18>
 801342c:	6a03      	ldr	r3, [r0, #32]
 801342e:	b90b      	cbnz	r3, 8013434 <_vfiprintf_r+0x18>
 8013430:	f7fe fe9a 	bl	8012168 <__sinit>
 8013434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013436:	07d9      	lsls	r1, r3, #31
 8013438:	d405      	bmi.n	8013446 <_vfiprintf_r+0x2a>
 801343a:	89ab      	ldrh	r3, [r5, #12]
 801343c:	059a      	lsls	r2, r3, #22
 801343e:	d402      	bmi.n	8013446 <_vfiprintf_r+0x2a>
 8013440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013442:	f7ff fdab 	bl	8012f9c <__retarget_lock_acquire_recursive>
 8013446:	89ab      	ldrh	r3, [r5, #12]
 8013448:	071b      	lsls	r3, r3, #28
 801344a:	d501      	bpl.n	8013450 <_vfiprintf_r+0x34>
 801344c:	692b      	ldr	r3, [r5, #16]
 801344e:	b99b      	cbnz	r3, 8013478 <_vfiprintf_r+0x5c>
 8013450:	4629      	mov	r1, r5
 8013452:	4630      	mov	r0, r6
 8013454:	f000 fbb6 	bl	8013bc4 <__swsetup_r>
 8013458:	b170      	cbz	r0, 8013478 <_vfiprintf_r+0x5c>
 801345a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801345c:	07dc      	lsls	r4, r3, #31
 801345e:	d504      	bpl.n	801346a <_vfiprintf_r+0x4e>
 8013460:	f04f 30ff 	mov.w	r0, #4294967295
 8013464:	b01d      	add	sp, #116	; 0x74
 8013466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801346a:	89ab      	ldrh	r3, [r5, #12]
 801346c:	0598      	lsls	r0, r3, #22
 801346e:	d4f7      	bmi.n	8013460 <_vfiprintf_r+0x44>
 8013470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013472:	f7ff fd95 	bl	8012fa0 <__retarget_lock_release_recursive>
 8013476:	e7f3      	b.n	8013460 <_vfiprintf_r+0x44>
 8013478:	2300      	movs	r3, #0
 801347a:	9309      	str	r3, [sp, #36]	; 0x24
 801347c:	2320      	movs	r3, #32
 801347e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013482:	f8cd 800c 	str.w	r8, [sp, #12]
 8013486:	2330      	movs	r3, #48	; 0x30
 8013488:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801363c <_vfiprintf_r+0x220>
 801348c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013490:	f04f 0901 	mov.w	r9, #1
 8013494:	4623      	mov	r3, r4
 8013496:	469a      	mov	sl, r3
 8013498:	f813 2b01 	ldrb.w	r2, [r3], #1
 801349c:	b10a      	cbz	r2, 80134a2 <_vfiprintf_r+0x86>
 801349e:	2a25      	cmp	r2, #37	; 0x25
 80134a0:	d1f9      	bne.n	8013496 <_vfiprintf_r+0x7a>
 80134a2:	ebba 0b04 	subs.w	fp, sl, r4
 80134a6:	d00b      	beq.n	80134c0 <_vfiprintf_r+0xa4>
 80134a8:	465b      	mov	r3, fp
 80134aa:	4622      	mov	r2, r4
 80134ac:	4629      	mov	r1, r5
 80134ae:	4630      	mov	r0, r6
 80134b0:	f7ff ffa1 	bl	80133f6 <__sfputs_r>
 80134b4:	3001      	adds	r0, #1
 80134b6:	f000 80a9 	beq.w	801360c <_vfiprintf_r+0x1f0>
 80134ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80134bc:	445a      	add	r2, fp
 80134be:	9209      	str	r2, [sp, #36]	; 0x24
 80134c0:	f89a 3000 	ldrb.w	r3, [sl]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	f000 80a1 	beq.w	801360c <_vfiprintf_r+0x1f0>
 80134ca:	2300      	movs	r3, #0
 80134cc:	f04f 32ff 	mov.w	r2, #4294967295
 80134d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134d4:	f10a 0a01 	add.w	sl, sl, #1
 80134d8:	9304      	str	r3, [sp, #16]
 80134da:	9307      	str	r3, [sp, #28]
 80134dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80134e0:	931a      	str	r3, [sp, #104]	; 0x68
 80134e2:	4654      	mov	r4, sl
 80134e4:	2205      	movs	r2, #5
 80134e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134ea:	4854      	ldr	r0, [pc, #336]	; (801363c <_vfiprintf_r+0x220>)
 80134ec:	f7ec fea8 	bl	8000240 <memchr>
 80134f0:	9a04      	ldr	r2, [sp, #16]
 80134f2:	b9d8      	cbnz	r0, 801352c <_vfiprintf_r+0x110>
 80134f4:	06d1      	lsls	r1, r2, #27
 80134f6:	bf44      	itt	mi
 80134f8:	2320      	movmi	r3, #32
 80134fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80134fe:	0713      	lsls	r3, r2, #28
 8013500:	bf44      	itt	mi
 8013502:	232b      	movmi	r3, #43	; 0x2b
 8013504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013508:	f89a 3000 	ldrb.w	r3, [sl]
 801350c:	2b2a      	cmp	r3, #42	; 0x2a
 801350e:	d015      	beq.n	801353c <_vfiprintf_r+0x120>
 8013510:	9a07      	ldr	r2, [sp, #28]
 8013512:	4654      	mov	r4, sl
 8013514:	2000      	movs	r0, #0
 8013516:	f04f 0c0a 	mov.w	ip, #10
 801351a:	4621      	mov	r1, r4
 801351c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013520:	3b30      	subs	r3, #48	; 0x30
 8013522:	2b09      	cmp	r3, #9
 8013524:	d94d      	bls.n	80135c2 <_vfiprintf_r+0x1a6>
 8013526:	b1b0      	cbz	r0, 8013556 <_vfiprintf_r+0x13a>
 8013528:	9207      	str	r2, [sp, #28]
 801352a:	e014      	b.n	8013556 <_vfiprintf_r+0x13a>
 801352c:	eba0 0308 	sub.w	r3, r0, r8
 8013530:	fa09 f303 	lsl.w	r3, r9, r3
 8013534:	4313      	orrs	r3, r2
 8013536:	9304      	str	r3, [sp, #16]
 8013538:	46a2      	mov	sl, r4
 801353a:	e7d2      	b.n	80134e2 <_vfiprintf_r+0xc6>
 801353c:	9b03      	ldr	r3, [sp, #12]
 801353e:	1d19      	adds	r1, r3, #4
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	9103      	str	r1, [sp, #12]
 8013544:	2b00      	cmp	r3, #0
 8013546:	bfbb      	ittet	lt
 8013548:	425b      	neglt	r3, r3
 801354a:	f042 0202 	orrlt.w	r2, r2, #2
 801354e:	9307      	strge	r3, [sp, #28]
 8013550:	9307      	strlt	r3, [sp, #28]
 8013552:	bfb8      	it	lt
 8013554:	9204      	strlt	r2, [sp, #16]
 8013556:	7823      	ldrb	r3, [r4, #0]
 8013558:	2b2e      	cmp	r3, #46	; 0x2e
 801355a:	d10c      	bne.n	8013576 <_vfiprintf_r+0x15a>
 801355c:	7863      	ldrb	r3, [r4, #1]
 801355e:	2b2a      	cmp	r3, #42	; 0x2a
 8013560:	d134      	bne.n	80135cc <_vfiprintf_r+0x1b0>
 8013562:	9b03      	ldr	r3, [sp, #12]
 8013564:	1d1a      	adds	r2, r3, #4
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	9203      	str	r2, [sp, #12]
 801356a:	2b00      	cmp	r3, #0
 801356c:	bfb8      	it	lt
 801356e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013572:	3402      	adds	r4, #2
 8013574:	9305      	str	r3, [sp, #20]
 8013576:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801364c <_vfiprintf_r+0x230>
 801357a:	7821      	ldrb	r1, [r4, #0]
 801357c:	2203      	movs	r2, #3
 801357e:	4650      	mov	r0, sl
 8013580:	f7ec fe5e 	bl	8000240 <memchr>
 8013584:	b138      	cbz	r0, 8013596 <_vfiprintf_r+0x17a>
 8013586:	9b04      	ldr	r3, [sp, #16]
 8013588:	eba0 000a 	sub.w	r0, r0, sl
 801358c:	2240      	movs	r2, #64	; 0x40
 801358e:	4082      	lsls	r2, r0
 8013590:	4313      	orrs	r3, r2
 8013592:	3401      	adds	r4, #1
 8013594:	9304      	str	r3, [sp, #16]
 8013596:	f814 1b01 	ldrb.w	r1, [r4], #1
 801359a:	4829      	ldr	r0, [pc, #164]	; (8013640 <_vfiprintf_r+0x224>)
 801359c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80135a0:	2206      	movs	r2, #6
 80135a2:	f7ec fe4d 	bl	8000240 <memchr>
 80135a6:	2800      	cmp	r0, #0
 80135a8:	d03f      	beq.n	801362a <_vfiprintf_r+0x20e>
 80135aa:	4b26      	ldr	r3, [pc, #152]	; (8013644 <_vfiprintf_r+0x228>)
 80135ac:	bb1b      	cbnz	r3, 80135f6 <_vfiprintf_r+0x1da>
 80135ae:	9b03      	ldr	r3, [sp, #12]
 80135b0:	3307      	adds	r3, #7
 80135b2:	f023 0307 	bic.w	r3, r3, #7
 80135b6:	3308      	adds	r3, #8
 80135b8:	9303      	str	r3, [sp, #12]
 80135ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135bc:	443b      	add	r3, r7
 80135be:	9309      	str	r3, [sp, #36]	; 0x24
 80135c0:	e768      	b.n	8013494 <_vfiprintf_r+0x78>
 80135c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80135c6:	460c      	mov	r4, r1
 80135c8:	2001      	movs	r0, #1
 80135ca:	e7a6      	b.n	801351a <_vfiprintf_r+0xfe>
 80135cc:	2300      	movs	r3, #0
 80135ce:	3401      	adds	r4, #1
 80135d0:	9305      	str	r3, [sp, #20]
 80135d2:	4619      	mov	r1, r3
 80135d4:	f04f 0c0a 	mov.w	ip, #10
 80135d8:	4620      	mov	r0, r4
 80135da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80135de:	3a30      	subs	r2, #48	; 0x30
 80135e0:	2a09      	cmp	r2, #9
 80135e2:	d903      	bls.n	80135ec <_vfiprintf_r+0x1d0>
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d0c6      	beq.n	8013576 <_vfiprintf_r+0x15a>
 80135e8:	9105      	str	r1, [sp, #20]
 80135ea:	e7c4      	b.n	8013576 <_vfiprintf_r+0x15a>
 80135ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80135f0:	4604      	mov	r4, r0
 80135f2:	2301      	movs	r3, #1
 80135f4:	e7f0      	b.n	80135d8 <_vfiprintf_r+0x1bc>
 80135f6:	ab03      	add	r3, sp, #12
 80135f8:	9300      	str	r3, [sp, #0]
 80135fa:	462a      	mov	r2, r5
 80135fc:	4b12      	ldr	r3, [pc, #72]	; (8013648 <_vfiprintf_r+0x22c>)
 80135fe:	a904      	add	r1, sp, #16
 8013600:	4630      	mov	r0, r6
 8013602:	f3af 8000 	nop.w
 8013606:	4607      	mov	r7, r0
 8013608:	1c78      	adds	r0, r7, #1
 801360a:	d1d6      	bne.n	80135ba <_vfiprintf_r+0x19e>
 801360c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801360e:	07d9      	lsls	r1, r3, #31
 8013610:	d405      	bmi.n	801361e <_vfiprintf_r+0x202>
 8013612:	89ab      	ldrh	r3, [r5, #12]
 8013614:	059a      	lsls	r2, r3, #22
 8013616:	d402      	bmi.n	801361e <_vfiprintf_r+0x202>
 8013618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801361a:	f7ff fcc1 	bl	8012fa0 <__retarget_lock_release_recursive>
 801361e:	89ab      	ldrh	r3, [r5, #12]
 8013620:	065b      	lsls	r3, r3, #25
 8013622:	f53f af1d 	bmi.w	8013460 <_vfiprintf_r+0x44>
 8013626:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013628:	e71c      	b.n	8013464 <_vfiprintf_r+0x48>
 801362a:	ab03      	add	r3, sp, #12
 801362c:	9300      	str	r3, [sp, #0]
 801362e:	462a      	mov	r2, r5
 8013630:	4b05      	ldr	r3, [pc, #20]	; (8013648 <_vfiprintf_r+0x22c>)
 8013632:	a904      	add	r1, sp, #16
 8013634:	4630      	mov	r0, r6
 8013636:	f000 f879 	bl	801372c <_printf_i>
 801363a:	e7e4      	b.n	8013606 <_vfiprintf_r+0x1ea>
 801363c:	08017482 	.word	0x08017482
 8013640:	0801748c 	.word	0x0801748c
 8013644:	00000000 	.word	0x00000000
 8013648:	080133f7 	.word	0x080133f7
 801364c:	08017488 	.word	0x08017488

08013650 <_printf_common>:
 8013650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013654:	4616      	mov	r6, r2
 8013656:	4699      	mov	r9, r3
 8013658:	688a      	ldr	r2, [r1, #8]
 801365a:	690b      	ldr	r3, [r1, #16]
 801365c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013660:	4293      	cmp	r3, r2
 8013662:	bfb8      	it	lt
 8013664:	4613      	movlt	r3, r2
 8013666:	6033      	str	r3, [r6, #0]
 8013668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801366c:	4607      	mov	r7, r0
 801366e:	460c      	mov	r4, r1
 8013670:	b10a      	cbz	r2, 8013676 <_printf_common+0x26>
 8013672:	3301      	adds	r3, #1
 8013674:	6033      	str	r3, [r6, #0]
 8013676:	6823      	ldr	r3, [r4, #0]
 8013678:	0699      	lsls	r1, r3, #26
 801367a:	bf42      	ittt	mi
 801367c:	6833      	ldrmi	r3, [r6, #0]
 801367e:	3302      	addmi	r3, #2
 8013680:	6033      	strmi	r3, [r6, #0]
 8013682:	6825      	ldr	r5, [r4, #0]
 8013684:	f015 0506 	ands.w	r5, r5, #6
 8013688:	d106      	bne.n	8013698 <_printf_common+0x48>
 801368a:	f104 0a19 	add.w	sl, r4, #25
 801368e:	68e3      	ldr	r3, [r4, #12]
 8013690:	6832      	ldr	r2, [r6, #0]
 8013692:	1a9b      	subs	r3, r3, r2
 8013694:	42ab      	cmp	r3, r5
 8013696:	dc26      	bgt.n	80136e6 <_printf_common+0x96>
 8013698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801369c:	1e13      	subs	r3, r2, #0
 801369e:	6822      	ldr	r2, [r4, #0]
 80136a0:	bf18      	it	ne
 80136a2:	2301      	movne	r3, #1
 80136a4:	0692      	lsls	r2, r2, #26
 80136a6:	d42b      	bmi.n	8013700 <_printf_common+0xb0>
 80136a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80136ac:	4649      	mov	r1, r9
 80136ae:	4638      	mov	r0, r7
 80136b0:	47c0      	blx	r8
 80136b2:	3001      	adds	r0, #1
 80136b4:	d01e      	beq.n	80136f4 <_printf_common+0xa4>
 80136b6:	6823      	ldr	r3, [r4, #0]
 80136b8:	6922      	ldr	r2, [r4, #16]
 80136ba:	f003 0306 	and.w	r3, r3, #6
 80136be:	2b04      	cmp	r3, #4
 80136c0:	bf02      	ittt	eq
 80136c2:	68e5      	ldreq	r5, [r4, #12]
 80136c4:	6833      	ldreq	r3, [r6, #0]
 80136c6:	1aed      	subeq	r5, r5, r3
 80136c8:	68a3      	ldr	r3, [r4, #8]
 80136ca:	bf0c      	ite	eq
 80136cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80136d0:	2500      	movne	r5, #0
 80136d2:	4293      	cmp	r3, r2
 80136d4:	bfc4      	itt	gt
 80136d6:	1a9b      	subgt	r3, r3, r2
 80136d8:	18ed      	addgt	r5, r5, r3
 80136da:	2600      	movs	r6, #0
 80136dc:	341a      	adds	r4, #26
 80136de:	42b5      	cmp	r5, r6
 80136e0:	d11a      	bne.n	8013718 <_printf_common+0xc8>
 80136e2:	2000      	movs	r0, #0
 80136e4:	e008      	b.n	80136f8 <_printf_common+0xa8>
 80136e6:	2301      	movs	r3, #1
 80136e8:	4652      	mov	r2, sl
 80136ea:	4649      	mov	r1, r9
 80136ec:	4638      	mov	r0, r7
 80136ee:	47c0      	blx	r8
 80136f0:	3001      	adds	r0, #1
 80136f2:	d103      	bne.n	80136fc <_printf_common+0xac>
 80136f4:	f04f 30ff 	mov.w	r0, #4294967295
 80136f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136fc:	3501      	adds	r5, #1
 80136fe:	e7c6      	b.n	801368e <_printf_common+0x3e>
 8013700:	18e1      	adds	r1, r4, r3
 8013702:	1c5a      	adds	r2, r3, #1
 8013704:	2030      	movs	r0, #48	; 0x30
 8013706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801370a:	4422      	add	r2, r4
 801370c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013714:	3302      	adds	r3, #2
 8013716:	e7c7      	b.n	80136a8 <_printf_common+0x58>
 8013718:	2301      	movs	r3, #1
 801371a:	4622      	mov	r2, r4
 801371c:	4649      	mov	r1, r9
 801371e:	4638      	mov	r0, r7
 8013720:	47c0      	blx	r8
 8013722:	3001      	adds	r0, #1
 8013724:	d0e6      	beq.n	80136f4 <_printf_common+0xa4>
 8013726:	3601      	adds	r6, #1
 8013728:	e7d9      	b.n	80136de <_printf_common+0x8e>
	...

0801372c <_printf_i>:
 801372c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013730:	7e0f      	ldrb	r7, [r1, #24]
 8013732:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013734:	2f78      	cmp	r7, #120	; 0x78
 8013736:	4691      	mov	r9, r2
 8013738:	4680      	mov	r8, r0
 801373a:	460c      	mov	r4, r1
 801373c:	469a      	mov	sl, r3
 801373e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013742:	d807      	bhi.n	8013754 <_printf_i+0x28>
 8013744:	2f62      	cmp	r7, #98	; 0x62
 8013746:	d80a      	bhi.n	801375e <_printf_i+0x32>
 8013748:	2f00      	cmp	r7, #0
 801374a:	f000 80d4 	beq.w	80138f6 <_printf_i+0x1ca>
 801374e:	2f58      	cmp	r7, #88	; 0x58
 8013750:	f000 80c0 	beq.w	80138d4 <_printf_i+0x1a8>
 8013754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801375c:	e03a      	b.n	80137d4 <_printf_i+0xa8>
 801375e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013762:	2b15      	cmp	r3, #21
 8013764:	d8f6      	bhi.n	8013754 <_printf_i+0x28>
 8013766:	a101      	add	r1, pc, #4	; (adr r1, 801376c <_printf_i+0x40>)
 8013768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801376c:	080137c5 	.word	0x080137c5
 8013770:	080137d9 	.word	0x080137d9
 8013774:	08013755 	.word	0x08013755
 8013778:	08013755 	.word	0x08013755
 801377c:	08013755 	.word	0x08013755
 8013780:	08013755 	.word	0x08013755
 8013784:	080137d9 	.word	0x080137d9
 8013788:	08013755 	.word	0x08013755
 801378c:	08013755 	.word	0x08013755
 8013790:	08013755 	.word	0x08013755
 8013794:	08013755 	.word	0x08013755
 8013798:	080138dd 	.word	0x080138dd
 801379c:	08013805 	.word	0x08013805
 80137a0:	08013897 	.word	0x08013897
 80137a4:	08013755 	.word	0x08013755
 80137a8:	08013755 	.word	0x08013755
 80137ac:	080138ff 	.word	0x080138ff
 80137b0:	08013755 	.word	0x08013755
 80137b4:	08013805 	.word	0x08013805
 80137b8:	08013755 	.word	0x08013755
 80137bc:	08013755 	.word	0x08013755
 80137c0:	0801389f 	.word	0x0801389f
 80137c4:	682b      	ldr	r3, [r5, #0]
 80137c6:	1d1a      	adds	r2, r3, #4
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	602a      	str	r2, [r5, #0]
 80137cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80137d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80137d4:	2301      	movs	r3, #1
 80137d6:	e09f      	b.n	8013918 <_printf_i+0x1ec>
 80137d8:	6820      	ldr	r0, [r4, #0]
 80137da:	682b      	ldr	r3, [r5, #0]
 80137dc:	0607      	lsls	r7, r0, #24
 80137de:	f103 0104 	add.w	r1, r3, #4
 80137e2:	6029      	str	r1, [r5, #0]
 80137e4:	d501      	bpl.n	80137ea <_printf_i+0xbe>
 80137e6:	681e      	ldr	r6, [r3, #0]
 80137e8:	e003      	b.n	80137f2 <_printf_i+0xc6>
 80137ea:	0646      	lsls	r6, r0, #25
 80137ec:	d5fb      	bpl.n	80137e6 <_printf_i+0xba>
 80137ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80137f2:	2e00      	cmp	r6, #0
 80137f4:	da03      	bge.n	80137fe <_printf_i+0xd2>
 80137f6:	232d      	movs	r3, #45	; 0x2d
 80137f8:	4276      	negs	r6, r6
 80137fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80137fe:	485a      	ldr	r0, [pc, #360]	; (8013968 <_printf_i+0x23c>)
 8013800:	230a      	movs	r3, #10
 8013802:	e012      	b.n	801382a <_printf_i+0xfe>
 8013804:	682b      	ldr	r3, [r5, #0]
 8013806:	6820      	ldr	r0, [r4, #0]
 8013808:	1d19      	adds	r1, r3, #4
 801380a:	6029      	str	r1, [r5, #0]
 801380c:	0605      	lsls	r5, r0, #24
 801380e:	d501      	bpl.n	8013814 <_printf_i+0xe8>
 8013810:	681e      	ldr	r6, [r3, #0]
 8013812:	e002      	b.n	801381a <_printf_i+0xee>
 8013814:	0641      	lsls	r1, r0, #25
 8013816:	d5fb      	bpl.n	8013810 <_printf_i+0xe4>
 8013818:	881e      	ldrh	r6, [r3, #0]
 801381a:	4853      	ldr	r0, [pc, #332]	; (8013968 <_printf_i+0x23c>)
 801381c:	2f6f      	cmp	r7, #111	; 0x6f
 801381e:	bf0c      	ite	eq
 8013820:	2308      	moveq	r3, #8
 8013822:	230a      	movne	r3, #10
 8013824:	2100      	movs	r1, #0
 8013826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801382a:	6865      	ldr	r5, [r4, #4]
 801382c:	60a5      	str	r5, [r4, #8]
 801382e:	2d00      	cmp	r5, #0
 8013830:	bfa2      	ittt	ge
 8013832:	6821      	ldrge	r1, [r4, #0]
 8013834:	f021 0104 	bicge.w	r1, r1, #4
 8013838:	6021      	strge	r1, [r4, #0]
 801383a:	b90e      	cbnz	r6, 8013840 <_printf_i+0x114>
 801383c:	2d00      	cmp	r5, #0
 801383e:	d04b      	beq.n	80138d8 <_printf_i+0x1ac>
 8013840:	4615      	mov	r5, r2
 8013842:	fbb6 f1f3 	udiv	r1, r6, r3
 8013846:	fb03 6711 	mls	r7, r3, r1, r6
 801384a:	5dc7      	ldrb	r7, [r0, r7]
 801384c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013850:	4637      	mov	r7, r6
 8013852:	42bb      	cmp	r3, r7
 8013854:	460e      	mov	r6, r1
 8013856:	d9f4      	bls.n	8013842 <_printf_i+0x116>
 8013858:	2b08      	cmp	r3, #8
 801385a:	d10b      	bne.n	8013874 <_printf_i+0x148>
 801385c:	6823      	ldr	r3, [r4, #0]
 801385e:	07de      	lsls	r6, r3, #31
 8013860:	d508      	bpl.n	8013874 <_printf_i+0x148>
 8013862:	6923      	ldr	r3, [r4, #16]
 8013864:	6861      	ldr	r1, [r4, #4]
 8013866:	4299      	cmp	r1, r3
 8013868:	bfde      	ittt	le
 801386a:	2330      	movle	r3, #48	; 0x30
 801386c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013870:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013874:	1b52      	subs	r2, r2, r5
 8013876:	6122      	str	r2, [r4, #16]
 8013878:	f8cd a000 	str.w	sl, [sp]
 801387c:	464b      	mov	r3, r9
 801387e:	aa03      	add	r2, sp, #12
 8013880:	4621      	mov	r1, r4
 8013882:	4640      	mov	r0, r8
 8013884:	f7ff fee4 	bl	8013650 <_printf_common>
 8013888:	3001      	adds	r0, #1
 801388a:	d14a      	bne.n	8013922 <_printf_i+0x1f6>
 801388c:	f04f 30ff 	mov.w	r0, #4294967295
 8013890:	b004      	add	sp, #16
 8013892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013896:	6823      	ldr	r3, [r4, #0]
 8013898:	f043 0320 	orr.w	r3, r3, #32
 801389c:	6023      	str	r3, [r4, #0]
 801389e:	4833      	ldr	r0, [pc, #204]	; (801396c <_printf_i+0x240>)
 80138a0:	2778      	movs	r7, #120	; 0x78
 80138a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80138a6:	6823      	ldr	r3, [r4, #0]
 80138a8:	6829      	ldr	r1, [r5, #0]
 80138aa:	061f      	lsls	r7, r3, #24
 80138ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80138b0:	d402      	bmi.n	80138b8 <_printf_i+0x18c>
 80138b2:	065f      	lsls	r7, r3, #25
 80138b4:	bf48      	it	mi
 80138b6:	b2b6      	uxthmi	r6, r6
 80138b8:	07df      	lsls	r7, r3, #31
 80138ba:	bf48      	it	mi
 80138bc:	f043 0320 	orrmi.w	r3, r3, #32
 80138c0:	6029      	str	r1, [r5, #0]
 80138c2:	bf48      	it	mi
 80138c4:	6023      	strmi	r3, [r4, #0]
 80138c6:	b91e      	cbnz	r6, 80138d0 <_printf_i+0x1a4>
 80138c8:	6823      	ldr	r3, [r4, #0]
 80138ca:	f023 0320 	bic.w	r3, r3, #32
 80138ce:	6023      	str	r3, [r4, #0]
 80138d0:	2310      	movs	r3, #16
 80138d2:	e7a7      	b.n	8013824 <_printf_i+0xf8>
 80138d4:	4824      	ldr	r0, [pc, #144]	; (8013968 <_printf_i+0x23c>)
 80138d6:	e7e4      	b.n	80138a2 <_printf_i+0x176>
 80138d8:	4615      	mov	r5, r2
 80138da:	e7bd      	b.n	8013858 <_printf_i+0x12c>
 80138dc:	682b      	ldr	r3, [r5, #0]
 80138de:	6826      	ldr	r6, [r4, #0]
 80138e0:	6961      	ldr	r1, [r4, #20]
 80138e2:	1d18      	adds	r0, r3, #4
 80138e4:	6028      	str	r0, [r5, #0]
 80138e6:	0635      	lsls	r5, r6, #24
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	d501      	bpl.n	80138f0 <_printf_i+0x1c4>
 80138ec:	6019      	str	r1, [r3, #0]
 80138ee:	e002      	b.n	80138f6 <_printf_i+0x1ca>
 80138f0:	0670      	lsls	r0, r6, #25
 80138f2:	d5fb      	bpl.n	80138ec <_printf_i+0x1c0>
 80138f4:	8019      	strh	r1, [r3, #0]
 80138f6:	2300      	movs	r3, #0
 80138f8:	6123      	str	r3, [r4, #16]
 80138fa:	4615      	mov	r5, r2
 80138fc:	e7bc      	b.n	8013878 <_printf_i+0x14c>
 80138fe:	682b      	ldr	r3, [r5, #0]
 8013900:	1d1a      	adds	r2, r3, #4
 8013902:	602a      	str	r2, [r5, #0]
 8013904:	681d      	ldr	r5, [r3, #0]
 8013906:	6862      	ldr	r2, [r4, #4]
 8013908:	2100      	movs	r1, #0
 801390a:	4628      	mov	r0, r5
 801390c:	f7ec fc98 	bl	8000240 <memchr>
 8013910:	b108      	cbz	r0, 8013916 <_printf_i+0x1ea>
 8013912:	1b40      	subs	r0, r0, r5
 8013914:	6060      	str	r0, [r4, #4]
 8013916:	6863      	ldr	r3, [r4, #4]
 8013918:	6123      	str	r3, [r4, #16]
 801391a:	2300      	movs	r3, #0
 801391c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013920:	e7aa      	b.n	8013878 <_printf_i+0x14c>
 8013922:	6923      	ldr	r3, [r4, #16]
 8013924:	462a      	mov	r2, r5
 8013926:	4649      	mov	r1, r9
 8013928:	4640      	mov	r0, r8
 801392a:	47d0      	blx	sl
 801392c:	3001      	adds	r0, #1
 801392e:	d0ad      	beq.n	801388c <_printf_i+0x160>
 8013930:	6823      	ldr	r3, [r4, #0]
 8013932:	079b      	lsls	r3, r3, #30
 8013934:	d413      	bmi.n	801395e <_printf_i+0x232>
 8013936:	68e0      	ldr	r0, [r4, #12]
 8013938:	9b03      	ldr	r3, [sp, #12]
 801393a:	4298      	cmp	r0, r3
 801393c:	bfb8      	it	lt
 801393e:	4618      	movlt	r0, r3
 8013940:	e7a6      	b.n	8013890 <_printf_i+0x164>
 8013942:	2301      	movs	r3, #1
 8013944:	4632      	mov	r2, r6
 8013946:	4649      	mov	r1, r9
 8013948:	4640      	mov	r0, r8
 801394a:	47d0      	blx	sl
 801394c:	3001      	adds	r0, #1
 801394e:	d09d      	beq.n	801388c <_printf_i+0x160>
 8013950:	3501      	adds	r5, #1
 8013952:	68e3      	ldr	r3, [r4, #12]
 8013954:	9903      	ldr	r1, [sp, #12]
 8013956:	1a5b      	subs	r3, r3, r1
 8013958:	42ab      	cmp	r3, r5
 801395a:	dcf2      	bgt.n	8013942 <_printf_i+0x216>
 801395c:	e7eb      	b.n	8013936 <_printf_i+0x20a>
 801395e:	2500      	movs	r5, #0
 8013960:	f104 0619 	add.w	r6, r4, #25
 8013964:	e7f5      	b.n	8013952 <_printf_i+0x226>
 8013966:	bf00      	nop
 8013968:	08017493 	.word	0x08017493
 801396c:	080174a4 	.word	0x080174a4

08013970 <__sflush_r>:
 8013970:	898a      	ldrh	r2, [r1, #12]
 8013972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013976:	4605      	mov	r5, r0
 8013978:	0710      	lsls	r0, r2, #28
 801397a:	460c      	mov	r4, r1
 801397c:	d458      	bmi.n	8013a30 <__sflush_r+0xc0>
 801397e:	684b      	ldr	r3, [r1, #4]
 8013980:	2b00      	cmp	r3, #0
 8013982:	dc05      	bgt.n	8013990 <__sflush_r+0x20>
 8013984:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013986:	2b00      	cmp	r3, #0
 8013988:	dc02      	bgt.n	8013990 <__sflush_r+0x20>
 801398a:	2000      	movs	r0, #0
 801398c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013992:	2e00      	cmp	r6, #0
 8013994:	d0f9      	beq.n	801398a <__sflush_r+0x1a>
 8013996:	2300      	movs	r3, #0
 8013998:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801399c:	682f      	ldr	r7, [r5, #0]
 801399e:	6a21      	ldr	r1, [r4, #32]
 80139a0:	602b      	str	r3, [r5, #0]
 80139a2:	d032      	beq.n	8013a0a <__sflush_r+0x9a>
 80139a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80139a6:	89a3      	ldrh	r3, [r4, #12]
 80139a8:	075a      	lsls	r2, r3, #29
 80139aa:	d505      	bpl.n	80139b8 <__sflush_r+0x48>
 80139ac:	6863      	ldr	r3, [r4, #4]
 80139ae:	1ac0      	subs	r0, r0, r3
 80139b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80139b2:	b10b      	cbz	r3, 80139b8 <__sflush_r+0x48>
 80139b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80139b6:	1ac0      	subs	r0, r0, r3
 80139b8:	2300      	movs	r3, #0
 80139ba:	4602      	mov	r2, r0
 80139bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80139be:	6a21      	ldr	r1, [r4, #32]
 80139c0:	4628      	mov	r0, r5
 80139c2:	47b0      	blx	r6
 80139c4:	1c43      	adds	r3, r0, #1
 80139c6:	89a3      	ldrh	r3, [r4, #12]
 80139c8:	d106      	bne.n	80139d8 <__sflush_r+0x68>
 80139ca:	6829      	ldr	r1, [r5, #0]
 80139cc:	291d      	cmp	r1, #29
 80139ce:	d82b      	bhi.n	8013a28 <__sflush_r+0xb8>
 80139d0:	4a29      	ldr	r2, [pc, #164]	; (8013a78 <__sflush_r+0x108>)
 80139d2:	410a      	asrs	r2, r1
 80139d4:	07d6      	lsls	r6, r2, #31
 80139d6:	d427      	bmi.n	8013a28 <__sflush_r+0xb8>
 80139d8:	2200      	movs	r2, #0
 80139da:	6062      	str	r2, [r4, #4]
 80139dc:	04d9      	lsls	r1, r3, #19
 80139de:	6922      	ldr	r2, [r4, #16]
 80139e0:	6022      	str	r2, [r4, #0]
 80139e2:	d504      	bpl.n	80139ee <__sflush_r+0x7e>
 80139e4:	1c42      	adds	r2, r0, #1
 80139e6:	d101      	bne.n	80139ec <__sflush_r+0x7c>
 80139e8:	682b      	ldr	r3, [r5, #0]
 80139ea:	b903      	cbnz	r3, 80139ee <__sflush_r+0x7e>
 80139ec:	6560      	str	r0, [r4, #84]	; 0x54
 80139ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139f0:	602f      	str	r7, [r5, #0]
 80139f2:	2900      	cmp	r1, #0
 80139f4:	d0c9      	beq.n	801398a <__sflush_r+0x1a>
 80139f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139fa:	4299      	cmp	r1, r3
 80139fc:	d002      	beq.n	8013a04 <__sflush_r+0x94>
 80139fe:	4628      	mov	r0, r5
 8013a00:	f7ff fb18 	bl	8013034 <_free_r>
 8013a04:	2000      	movs	r0, #0
 8013a06:	6360      	str	r0, [r4, #52]	; 0x34
 8013a08:	e7c0      	b.n	801398c <__sflush_r+0x1c>
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	4628      	mov	r0, r5
 8013a0e:	47b0      	blx	r6
 8013a10:	1c41      	adds	r1, r0, #1
 8013a12:	d1c8      	bne.n	80139a6 <__sflush_r+0x36>
 8013a14:	682b      	ldr	r3, [r5, #0]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d0c5      	beq.n	80139a6 <__sflush_r+0x36>
 8013a1a:	2b1d      	cmp	r3, #29
 8013a1c:	d001      	beq.n	8013a22 <__sflush_r+0xb2>
 8013a1e:	2b16      	cmp	r3, #22
 8013a20:	d101      	bne.n	8013a26 <__sflush_r+0xb6>
 8013a22:	602f      	str	r7, [r5, #0]
 8013a24:	e7b1      	b.n	801398a <__sflush_r+0x1a>
 8013a26:	89a3      	ldrh	r3, [r4, #12]
 8013a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a2c:	81a3      	strh	r3, [r4, #12]
 8013a2e:	e7ad      	b.n	801398c <__sflush_r+0x1c>
 8013a30:	690f      	ldr	r7, [r1, #16]
 8013a32:	2f00      	cmp	r7, #0
 8013a34:	d0a9      	beq.n	801398a <__sflush_r+0x1a>
 8013a36:	0793      	lsls	r3, r2, #30
 8013a38:	680e      	ldr	r6, [r1, #0]
 8013a3a:	bf08      	it	eq
 8013a3c:	694b      	ldreq	r3, [r1, #20]
 8013a3e:	600f      	str	r7, [r1, #0]
 8013a40:	bf18      	it	ne
 8013a42:	2300      	movne	r3, #0
 8013a44:	eba6 0807 	sub.w	r8, r6, r7
 8013a48:	608b      	str	r3, [r1, #8]
 8013a4a:	f1b8 0f00 	cmp.w	r8, #0
 8013a4e:	dd9c      	ble.n	801398a <__sflush_r+0x1a>
 8013a50:	6a21      	ldr	r1, [r4, #32]
 8013a52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a54:	4643      	mov	r3, r8
 8013a56:	463a      	mov	r2, r7
 8013a58:	4628      	mov	r0, r5
 8013a5a:	47b0      	blx	r6
 8013a5c:	2800      	cmp	r0, #0
 8013a5e:	dc06      	bgt.n	8013a6e <__sflush_r+0xfe>
 8013a60:	89a3      	ldrh	r3, [r4, #12]
 8013a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a66:	81a3      	strh	r3, [r4, #12]
 8013a68:	f04f 30ff 	mov.w	r0, #4294967295
 8013a6c:	e78e      	b.n	801398c <__sflush_r+0x1c>
 8013a6e:	4407      	add	r7, r0
 8013a70:	eba8 0800 	sub.w	r8, r8, r0
 8013a74:	e7e9      	b.n	8013a4a <__sflush_r+0xda>
 8013a76:	bf00      	nop
 8013a78:	dfbffffe 	.word	0xdfbffffe

08013a7c <_fflush_r>:
 8013a7c:	b538      	push	{r3, r4, r5, lr}
 8013a7e:	690b      	ldr	r3, [r1, #16]
 8013a80:	4605      	mov	r5, r0
 8013a82:	460c      	mov	r4, r1
 8013a84:	b913      	cbnz	r3, 8013a8c <_fflush_r+0x10>
 8013a86:	2500      	movs	r5, #0
 8013a88:	4628      	mov	r0, r5
 8013a8a:	bd38      	pop	{r3, r4, r5, pc}
 8013a8c:	b118      	cbz	r0, 8013a96 <_fflush_r+0x1a>
 8013a8e:	6a03      	ldr	r3, [r0, #32]
 8013a90:	b90b      	cbnz	r3, 8013a96 <_fflush_r+0x1a>
 8013a92:	f7fe fb69 	bl	8012168 <__sinit>
 8013a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d0f3      	beq.n	8013a86 <_fflush_r+0xa>
 8013a9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013aa0:	07d0      	lsls	r0, r2, #31
 8013aa2:	d404      	bmi.n	8013aae <_fflush_r+0x32>
 8013aa4:	0599      	lsls	r1, r3, #22
 8013aa6:	d402      	bmi.n	8013aae <_fflush_r+0x32>
 8013aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013aaa:	f7ff fa77 	bl	8012f9c <__retarget_lock_acquire_recursive>
 8013aae:	4628      	mov	r0, r5
 8013ab0:	4621      	mov	r1, r4
 8013ab2:	f7ff ff5d 	bl	8013970 <__sflush_r>
 8013ab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ab8:	07da      	lsls	r2, r3, #31
 8013aba:	4605      	mov	r5, r0
 8013abc:	d4e4      	bmi.n	8013a88 <_fflush_r+0xc>
 8013abe:	89a3      	ldrh	r3, [r4, #12]
 8013ac0:	059b      	lsls	r3, r3, #22
 8013ac2:	d4e1      	bmi.n	8013a88 <_fflush_r+0xc>
 8013ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ac6:	f7ff fa6b 	bl	8012fa0 <__retarget_lock_release_recursive>
 8013aca:	e7dd      	b.n	8013a88 <_fflush_r+0xc>

08013acc <fiprintf>:
 8013acc:	b40e      	push	{r1, r2, r3}
 8013ace:	b503      	push	{r0, r1, lr}
 8013ad0:	4601      	mov	r1, r0
 8013ad2:	ab03      	add	r3, sp, #12
 8013ad4:	4805      	ldr	r0, [pc, #20]	; (8013aec <fiprintf+0x20>)
 8013ad6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ada:	6800      	ldr	r0, [r0, #0]
 8013adc:	9301      	str	r3, [sp, #4]
 8013ade:	f7ff fc9d 	bl	801341c <_vfiprintf_r>
 8013ae2:	b002      	add	sp, #8
 8013ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ae8:	b003      	add	sp, #12
 8013aea:	4770      	bx	lr
 8013aec:	20000090 	.word	0x20000090

08013af0 <siscanf>:
 8013af0:	b40e      	push	{r1, r2, r3}
 8013af2:	b510      	push	{r4, lr}
 8013af4:	b09f      	sub	sp, #124	; 0x7c
 8013af6:	ac21      	add	r4, sp, #132	; 0x84
 8013af8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013afc:	f854 2b04 	ldr.w	r2, [r4], #4
 8013b00:	9201      	str	r2, [sp, #4]
 8013b02:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013b06:	9004      	str	r0, [sp, #16]
 8013b08:	9008      	str	r0, [sp, #32]
 8013b0a:	f7ec fb8b 	bl	8000224 <strlen>
 8013b0e:	4b0c      	ldr	r3, [pc, #48]	; (8013b40 <siscanf+0x50>)
 8013b10:	9005      	str	r0, [sp, #20]
 8013b12:	9009      	str	r0, [sp, #36]	; 0x24
 8013b14:	930d      	str	r3, [sp, #52]	; 0x34
 8013b16:	480b      	ldr	r0, [pc, #44]	; (8013b44 <siscanf+0x54>)
 8013b18:	9a01      	ldr	r2, [sp, #4]
 8013b1a:	6800      	ldr	r0, [r0, #0]
 8013b1c:	9403      	str	r4, [sp, #12]
 8013b1e:	2300      	movs	r3, #0
 8013b20:	9311      	str	r3, [sp, #68]	; 0x44
 8013b22:	9316      	str	r3, [sp, #88]	; 0x58
 8013b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013b28:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013b2c:	a904      	add	r1, sp, #16
 8013b2e:	4623      	mov	r3, r4
 8013b30:	f000 f952 	bl	8013dd8 <__ssvfiscanf_r>
 8013b34:	b01f      	add	sp, #124	; 0x7c
 8013b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b3a:	b003      	add	sp, #12
 8013b3c:	4770      	bx	lr
 8013b3e:	bf00      	nop
 8013b40:	0801221b 	.word	0x0801221b
 8013b44:	20000090 	.word	0x20000090

08013b48 <__swbuf_r>:
 8013b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b4a:	460e      	mov	r6, r1
 8013b4c:	4614      	mov	r4, r2
 8013b4e:	4605      	mov	r5, r0
 8013b50:	b118      	cbz	r0, 8013b5a <__swbuf_r+0x12>
 8013b52:	6a03      	ldr	r3, [r0, #32]
 8013b54:	b90b      	cbnz	r3, 8013b5a <__swbuf_r+0x12>
 8013b56:	f7fe fb07 	bl	8012168 <__sinit>
 8013b5a:	69a3      	ldr	r3, [r4, #24]
 8013b5c:	60a3      	str	r3, [r4, #8]
 8013b5e:	89a3      	ldrh	r3, [r4, #12]
 8013b60:	071a      	lsls	r2, r3, #28
 8013b62:	d525      	bpl.n	8013bb0 <__swbuf_r+0x68>
 8013b64:	6923      	ldr	r3, [r4, #16]
 8013b66:	b31b      	cbz	r3, 8013bb0 <__swbuf_r+0x68>
 8013b68:	6823      	ldr	r3, [r4, #0]
 8013b6a:	6922      	ldr	r2, [r4, #16]
 8013b6c:	1a98      	subs	r0, r3, r2
 8013b6e:	6963      	ldr	r3, [r4, #20]
 8013b70:	b2f6      	uxtb	r6, r6
 8013b72:	4283      	cmp	r3, r0
 8013b74:	4637      	mov	r7, r6
 8013b76:	dc04      	bgt.n	8013b82 <__swbuf_r+0x3a>
 8013b78:	4621      	mov	r1, r4
 8013b7a:	4628      	mov	r0, r5
 8013b7c:	f7ff ff7e 	bl	8013a7c <_fflush_r>
 8013b80:	b9e0      	cbnz	r0, 8013bbc <__swbuf_r+0x74>
 8013b82:	68a3      	ldr	r3, [r4, #8]
 8013b84:	3b01      	subs	r3, #1
 8013b86:	60a3      	str	r3, [r4, #8]
 8013b88:	6823      	ldr	r3, [r4, #0]
 8013b8a:	1c5a      	adds	r2, r3, #1
 8013b8c:	6022      	str	r2, [r4, #0]
 8013b8e:	701e      	strb	r6, [r3, #0]
 8013b90:	6962      	ldr	r2, [r4, #20]
 8013b92:	1c43      	adds	r3, r0, #1
 8013b94:	429a      	cmp	r2, r3
 8013b96:	d004      	beq.n	8013ba2 <__swbuf_r+0x5a>
 8013b98:	89a3      	ldrh	r3, [r4, #12]
 8013b9a:	07db      	lsls	r3, r3, #31
 8013b9c:	d506      	bpl.n	8013bac <__swbuf_r+0x64>
 8013b9e:	2e0a      	cmp	r6, #10
 8013ba0:	d104      	bne.n	8013bac <__swbuf_r+0x64>
 8013ba2:	4621      	mov	r1, r4
 8013ba4:	4628      	mov	r0, r5
 8013ba6:	f7ff ff69 	bl	8013a7c <_fflush_r>
 8013baa:	b938      	cbnz	r0, 8013bbc <__swbuf_r+0x74>
 8013bac:	4638      	mov	r0, r7
 8013bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bb0:	4621      	mov	r1, r4
 8013bb2:	4628      	mov	r0, r5
 8013bb4:	f000 f806 	bl	8013bc4 <__swsetup_r>
 8013bb8:	2800      	cmp	r0, #0
 8013bba:	d0d5      	beq.n	8013b68 <__swbuf_r+0x20>
 8013bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8013bc0:	e7f4      	b.n	8013bac <__swbuf_r+0x64>
	...

08013bc4 <__swsetup_r>:
 8013bc4:	b538      	push	{r3, r4, r5, lr}
 8013bc6:	4b2a      	ldr	r3, [pc, #168]	; (8013c70 <__swsetup_r+0xac>)
 8013bc8:	4605      	mov	r5, r0
 8013bca:	6818      	ldr	r0, [r3, #0]
 8013bcc:	460c      	mov	r4, r1
 8013bce:	b118      	cbz	r0, 8013bd8 <__swsetup_r+0x14>
 8013bd0:	6a03      	ldr	r3, [r0, #32]
 8013bd2:	b90b      	cbnz	r3, 8013bd8 <__swsetup_r+0x14>
 8013bd4:	f7fe fac8 	bl	8012168 <__sinit>
 8013bd8:	89a3      	ldrh	r3, [r4, #12]
 8013bda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013bde:	0718      	lsls	r0, r3, #28
 8013be0:	d422      	bmi.n	8013c28 <__swsetup_r+0x64>
 8013be2:	06d9      	lsls	r1, r3, #27
 8013be4:	d407      	bmi.n	8013bf6 <__swsetup_r+0x32>
 8013be6:	2309      	movs	r3, #9
 8013be8:	602b      	str	r3, [r5, #0]
 8013bea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013bee:	81a3      	strh	r3, [r4, #12]
 8013bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8013bf4:	e034      	b.n	8013c60 <__swsetup_r+0x9c>
 8013bf6:	0758      	lsls	r0, r3, #29
 8013bf8:	d512      	bpl.n	8013c20 <__swsetup_r+0x5c>
 8013bfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013bfc:	b141      	cbz	r1, 8013c10 <__swsetup_r+0x4c>
 8013bfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c02:	4299      	cmp	r1, r3
 8013c04:	d002      	beq.n	8013c0c <__swsetup_r+0x48>
 8013c06:	4628      	mov	r0, r5
 8013c08:	f7ff fa14 	bl	8013034 <_free_r>
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	6363      	str	r3, [r4, #52]	; 0x34
 8013c10:	89a3      	ldrh	r3, [r4, #12]
 8013c12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013c16:	81a3      	strh	r3, [r4, #12]
 8013c18:	2300      	movs	r3, #0
 8013c1a:	6063      	str	r3, [r4, #4]
 8013c1c:	6923      	ldr	r3, [r4, #16]
 8013c1e:	6023      	str	r3, [r4, #0]
 8013c20:	89a3      	ldrh	r3, [r4, #12]
 8013c22:	f043 0308 	orr.w	r3, r3, #8
 8013c26:	81a3      	strh	r3, [r4, #12]
 8013c28:	6923      	ldr	r3, [r4, #16]
 8013c2a:	b94b      	cbnz	r3, 8013c40 <__swsetup_r+0x7c>
 8013c2c:	89a3      	ldrh	r3, [r4, #12]
 8013c2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c36:	d003      	beq.n	8013c40 <__swsetup_r+0x7c>
 8013c38:	4621      	mov	r1, r4
 8013c3a:	4628      	mov	r0, r5
 8013c3c:	f000 fbb8 	bl	80143b0 <__smakebuf_r>
 8013c40:	89a0      	ldrh	r0, [r4, #12]
 8013c42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c46:	f010 0301 	ands.w	r3, r0, #1
 8013c4a:	d00a      	beq.n	8013c62 <__swsetup_r+0x9e>
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	60a3      	str	r3, [r4, #8]
 8013c50:	6963      	ldr	r3, [r4, #20]
 8013c52:	425b      	negs	r3, r3
 8013c54:	61a3      	str	r3, [r4, #24]
 8013c56:	6923      	ldr	r3, [r4, #16]
 8013c58:	b943      	cbnz	r3, 8013c6c <__swsetup_r+0xa8>
 8013c5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013c5e:	d1c4      	bne.n	8013bea <__swsetup_r+0x26>
 8013c60:	bd38      	pop	{r3, r4, r5, pc}
 8013c62:	0781      	lsls	r1, r0, #30
 8013c64:	bf58      	it	pl
 8013c66:	6963      	ldrpl	r3, [r4, #20]
 8013c68:	60a3      	str	r3, [r4, #8]
 8013c6a:	e7f4      	b.n	8013c56 <__swsetup_r+0x92>
 8013c6c:	2000      	movs	r0, #0
 8013c6e:	e7f7      	b.n	8013c60 <__swsetup_r+0x9c>
 8013c70:	20000090 	.word	0x20000090

08013c74 <__gettzinfo>:
 8013c74:	4800      	ldr	r0, [pc, #0]	; (8013c78 <__gettzinfo+0x4>)
 8013c76:	4770      	bx	lr
 8013c78:	20000098 	.word	0x20000098

08013c7c <_sbrk_r>:
 8013c7c:	b538      	push	{r3, r4, r5, lr}
 8013c7e:	4d06      	ldr	r5, [pc, #24]	; (8013c98 <_sbrk_r+0x1c>)
 8013c80:	2300      	movs	r3, #0
 8013c82:	4604      	mov	r4, r0
 8013c84:	4608      	mov	r0, r1
 8013c86:	602b      	str	r3, [r5, #0]
 8013c88:	f7ee f8c0 	bl	8001e0c <_sbrk>
 8013c8c:	1c43      	adds	r3, r0, #1
 8013c8e:	d102      	bne.n	8013c96 <_sbrk_r+0x1a>
 8013c90:	682b      	ldr	r3, [r5, #0]
 8013c92:	b103      	cbz	r3, 8013c96 <_sbrk_r+0x1a>
 8013c94:	6023      	str	r3, [r4, #0]
 8013c96:	bd38      	pop	{r3, r4, r5, pc}
 8013c98:	2000ad34 	.word	0x2000ad34

08013c9c <abort>:
 8013c9c:	b508      	push	{r3, lr}
 8013c9e:	2006      	movs	r0, #6
 8013ca0:	f000 fc5e 	bl	8014560 <raise>
 8013ca4:	2001      	movs	r0, #1
 8013ca6:	f7ee f839 	bl	8001d1c <_exit>
	...

08013cac <__env_lock>:
 8013cac:	4801      	ldr	r0, [pc, #4]	; (8013cb4 <__env_lock+0x8>)
 8013cae:	f7ff b975 	b.w	8012f9c <__retarget_lock_acquire_recursive>
 8013cb2:	bf00      	nop
 8013cb4:	2000ad38 	.word	0x2000ad38

08013cb8 <__env_unlock>:
 8013cb8:	4801      	ldr	r0, [pc, #4]	; (8013cc0 <__env_unlock+0x8>)
 8013cba:	f7ff b971 	b.w	8012fa0 <__retarget_lock_release_recursive>
 8013cbe:	bf00      	nop
 8013cc0:	2000ad38 	.word	0x2000ad38

08013cc4 <_realloc_r>:
 8013cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cc8:	4680      	mov	r8, r0
 8013cca:	4614      	mov	r4, r2
 8013ccc:	460e      	mov	r6, r1
 8013cce:	b921      	cbnz	r1, 8013cda <_realloc_r+0x16>
 8013cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013cd4:	4611      	mov	r1, r2
 8013cd6:	f7ff ba6d 	b.w	80131b4 <_malloc_r>
 8013cda:	b92a      	cbnz	r2, 8013ce8 <_realloc_r+0x24>
 8013cdc:	f7ff f9aa 	bl	8013034 <_free_r>
 8013ce0:	4625      	mov	r5, r4
 8013ce2:	4628      	mov	r0, r5
 8013ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ce8:	f000 fc78 	bl	80145dc <_malloc_usable_size_r>
 8013cec:	4284      	cmp	r4, r0
 8013cee:	4607      	mov	r7, r0
 8013cf0:	d802      	bhi.n	8013cf8 <_realloc_r+0x34>
 8013cf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013cf6:	d812      	bhi.n	8013d1e <_realloc_r+0x5a>
 8013cf8:	4621      	mov	r1, r4
 8013cfa:	4640      	mov	r0, r8
 8013cfc:	f7ff fa5a 	bl	80131b4 <_malloc_r>
 8013d00:	4605      	mov	r5, r0
 8013d02:	2800      	cmp	r0, #0
 8013d04:	d0ed      	beq.n	8013ce2 <_realloc_r+0x1e>
 8013d06:	42bc      	cmp	r4, r7
 8013d08:	4622      	mov	r2, r4
 8013d0a:	4631      	mov	r1, r6
 8013d0c:	bf28      	it	cs
 8013d0e:	463a      	movcs	r2, r7
 8013d10:	f7ff f94f 	bl	8012fb2 <memcpy>
 8013d14:	4631      	mov	r1, r6
 8013d16:	4640      	mov	r0, r8
 8013d18:	f7ff f98c 	bl	8013034 <_free_r>
 8013d1c:	e7e1      	b.n	8013ce2 <_realloc_r+0x1e>
 8013d1e:	4635      	mov	r5, r6
 8013d20:	e7df      	b.n	8013ce2 <_realloc_r+0x1e>

08013d22 <_sungetc_r>:
 8013d22:	b538      	push	{r3, r4, r5, lr}
 8013d24:	1c4b      	adds	r3, r1, #1
 8013d26:	4614      	mov	r4, r2
 8013d28:	d103      	bne.n	8013d32 <_sungetc_r+0x10>
 8013d2a:	f04f 35ff 	mov.w	r5, #4294967295
 8013d2e:	4628      	mov	r0, r5
 8013d30:	bd38      	pop	{r3, r4, r5, pc}
 8013d32:	8993      	ldrh	r3, [r2, #12]
 8013d34:	f023 0320 	bic.w	r3, r3, #32
 8013d38:	8193      	strh	r3, [r2, #12]
 8013d3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013d3c:	6852      	ldr	r2, [r2, #4]
 8013d3e:	b2cd      	uxtb	r5, r1
 8013d40:	b18b      	cbz	r3, 8013d66 <_sungetc_r+0x44>
 8013d42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013d44:	4293      	cmp	r3, r2
 8013d46:	dd08      	ble.n	8013d5a <_sungetc_r+0x38>
 8013d48:	6823      	ldr	r3, [r4, #0]
 8013d4a:	1e5a      	subs	r2, r3, #1
 8013d4c:	6022      	str	r2, [r4, #0]
 8013d4e:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013d52:	6863      	ldr	r3, [r4, #4]
 8013d54:	3301      	adds	r3, #1
 8013d56:	6063      	str	r3, [r4, #4]
 8013d58:	e7e9      	b.n	8013d2e <_sungetc_r+0xc>
 8013d5a:	4621      	mov	r1, r4
 8013d5c:	f000 fb9d 	bl	801449a <__submore>
 8013d60:	2800      	cmp	r0, #0
 8013d62:	d0f1      	beq.n	8013d48 <_sungetc_r+0x26>
 8013d64:	e7e1      	b.n	8013d2a <_sungetc_r+0x8>
 8013d66:	6921      	ldr	r1, [r4, #16]
 8013d68:	6823      	ldr	r3, [r4, #0]
 8013d6a:	b151      	cbz	r1, 8013d82 <_sungetc_r+0x60>
 8013d6c:	4299      	cmp	r1, r3
 8013d6e:	d208      	bcs.n	8013d82 <_sungetc_r+0x60>
 8013d70:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013d74:	42a9      	cmp	r1, r5
 8013d76:	d104      	bne.n	8013d82 <_sungetc_r+0x60>
 8013d78:	3b01      	subs	r3, #1
 8013d7a:	3201      	adds	r2, #1
 8013d7c:	6023      	str	r3, [r4, #0]
 8013d7e:	6062      	str	r2, [r4, #4]
 8013d80:	e7d5      	b.n	8013d2e <_sungetc_r+0xc>
 8013d82:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013d86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d8a:	6363      	str	r3, [r4, #52]	; 0x34
 8013d8c:	2303      	movs	r3, #3
 8013d8e:	63a3      	str	r3, [r4, #56]	; 0x38
 8013d90:	4623      	mov	r3, r4
 8013d92:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013d96:	6023      	str	r3, [r4, #0]
 8013d98:	2301      	movs	r3, #1
 8013d9a:	e7dc      	b.n	8013d56 <_sungetc_r+0x34>

08013d9c <__ssrefill_r>:
 8013d9c:	b510      	push	{r4, lr}
 8013d9e:	460c      	mov	r4, r1
 8013da0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013da2:	b169      	cbz	r1, 8013dc0 <__ssrefill_r+0x24>
 8013da4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013da8:	4299      	cmp	r1, r3
 8013daa:	d001      	beq.n	8013db0 <__ssrefill_r+0x14>
 8013dac:	f7ff f942 	bl	8013034 <_free_r>
 8013db0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013db2:	6063      	str	r3, [r4, #4]
 8013db4:	2000      	movs	r0, #0
 8013db6:	6360      	str	r0, [r4, #52]	; 0x34
 8013db8:	b113      	cbz	r3, 8013dc0 <__ssrefill_r+0x24>
 8013dba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013dbc:	6023      	str	r3, [r4, #0]
 8013dbe:	bd10      	pop	{r4, pc}
 8013dc0:	6923      	ldr	r3, [r4, #16]
 8013dc2:	6023      	str	r3, [r4, #0]
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	6063      	str	r3, [r4, #4]
 8013dc8:	89a3      	ldrh	r3, [r4, #12]
 8013dca:	f043 0320 	orr.w	r3, r3, #32
 8013dce:	81a3      	strh	r3, [r4, #12]
 8013dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8013dd4:	e7f3      	b.n	8013dbe <__ssrefill_r+0x22>
	...

08013dd8 <__ssvfiscanf_r>:
 8013dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ddc:	460c      	mov	r4, r1
 8013dde:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013de2:	2100      	movs	r1, #0
 8013de4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013de8:	49a6      	ldr	r1, [pc, #664]	; (8014084 <__ssvfiscanf_r+0x2ac>)
 8013dea:	91a0      	str	r1, [sp, #640]	; 0x280
 8013dec:	f10d 0804 	add.w	r8, sp, #4
 8013df0:	49a5      	ldr	r1, [pc, #660]	; (8014088 <__ssvfiscanf_r+0x2b0>)
 8013df2:	4fa6      	ldr	r7, [pc, #664]	; (801408c <__ssvfiscanf_r+0x2b4>)
 8013df4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8014090 <__ssvfiscanf_r+0x2b8>
 8013df8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013dfc:	4606      	mov	r6, r0
 8013dfe:	91a1      	str	r1, [sp, #644]	; 0x284
 8013e00:	9300      	str	r3, [sp, #0]
 8013e02:	7813      	ldrb	r3, [r2, #0]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	f000 815a 	beq.w	80140be <__ssvfiscanf_r+0x2e6>
 8013e0a:	5cf9      	ldrb	r1, [r7, r3]
 8013e0c:	f011 0108 	ands.w	r1, r1, #8
 8013e10:	f102 0501 	add.w	r5, r2, #1
 8013e14:	d019      	beq.n	8013e4a <__ssvfiscanf_r+0x72>
 8013e16:	6863      	ldr	r3, [r4, #4]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	dd0f      	ble.n	8013e3c <__ssvfiscanf_r+0x64>
 8013e1c:	6823      	ldr	r3, [r4, #0]
 8013e1e:	781a      	ldrb	r2, [r3, #0]
 8013e20:	5cba      	ldrb	r2, [r7, r2]
 8013e22:	0712      	lsls	r2, r2, #28
 8013e24:	d401      	bmi.n	8013e2a <__ssvfiscanf_r+0x52>
 8013e26:	462a      	mov	r2, r5
 8013e28:	e7eb      	b.n	8013e02 <__ssvfiscanf_r+0x2a>
 8013e2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013e2c:	3201      	adds	r2, #1
 8013e2e:	9245      	str	r2, [sp, #276]	; 0x114
 8013e30:	6862      	ldr	r2, [r4, #4]
 8013e32:	3301      	adds	r3, #1
 8013e34:	3a01      	subs	r2, #1
 8013e36:	6062      	str	r2, [r4, #4]
 8013e38:	6023      	str	r3, [r4, #0]
 8013e3a:	e7ec      	b.n	8013e16 <__ssvfiscanf_r+0x3e>
 8013e3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013e3e:	4621      	mov	r1, r4
 8013e40:	4630      	mov	r0, r6
 8013e42:	4798      	blx	r3
 8013e44:	2800      	cmp	r0, #0
 8013e46:	d0e9      	beq.n	8013e1c <__ssvfiscanf_r+0x44>
 8013e48:	e7ed      	b.n	8013e26 <__ssvfiscanf_r+0x4e>
 8013e4a:	2b25      	cmp	r3, #37	; 0x25
 8013e4c:	d012      	beq.n	8013e74 <__ssvfiscanf_r+0x9c>
 8013e4e:	469a      	mov	sl, r3
 8013e50:	6863      	ldr	r3, [r4, #4]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	f340 8091 	ble.w	8013f7a <__ssvfiscanf_r+0x1a2>
 8013e58:	6822      	ldr	r2, [r4, #0]
 8013e5a:	7813      	ldrb	r3, [r2, #0]
 8013e5c:	4553      	cmp	r3, sl
 8013e5e:	f040 812e 	bne.w	80140be <__ssvfiscanf_r+0x2e6>
 8013e62:	6863      	ldr	r3, [r4, #4]
 8013e64:	3b01      	subs	r3, #1
 8013e66:	6063      	str	r3, [r4, #4]
 8013e68:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8013e6a:	3201      	adds	r2, #1
 8013e6c:	3301      	adds	r3, #1
 8013e6e:	6022      	str	r2, [r4, #0]
 8013e70:	9345      	str	r3, [sp, #276]	; 0x114
 8013e72:	e7d8      	b.n	8013e26 <__ssvfiscanf_r+0x4e>
 8013e74:	9141      	str	r1, [sp, #260]	; 0x104
 8013e76:	9143      	str	r1, [sp, #268]	; 0x10c
 8013e78:	7853      	ldrb	r3, [r2, #1]
 8013e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8013e7c:	bf02      	ittt	eq
 8013e7e:	2310      	moveq	r3, #16
 8013e80:	1c95      	addeq	r5, r2, #2
 8013e82:	9341      	streq	r3, [sp, #260]	; 0x104
 8013e84:	220a      	movs	r2, #10
 8013e86:	46aa      	mov	sl, r5
 8013e88:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8013e8c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013e90:	2b09      	cmp	r3, #9
 8013e92:	d91c      	bls.n	8013ece <__ssvfiscanf_r+0xf6>
 8013e94:	487e      	ldr	r0, [pc, #504]	; (8014090 <__ssvfiscanf_r+0x2b8>)
 8013e96:	2203      	movs	r2, #3
 8013e98:	f7ec f9d2 	bl	8000240 <memchr>
 8013e9c:	b138      	cbz	r0, 8013eae <__ssvfiscanf_r+0xd6>
 8013e9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013ea0:	eba0 0009 	sub.w	r0, r0, r9
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	4083      	lsls	r3, r0
 8013ea8:	4313      	orrs	r3, r2
 8013eaa:	9341      	str	r3, [sp, #260]	; 0x104
 8013eac:	4655      	mov	r5, sl
 8013eae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013eb2:	2b78      	cmp	r3, #120	; 0x78
 8013eb4:	d806      	bhi.n	8013ec4 <__ssvfiscanf_r+0xec>
 8013eb6:	2b57      	cmp	r3, #87	; 0x57
 8013eb8:	d810      	bhi.n	8013edc <__ssvfiscanf_r+0x104>
 8013eba:	2b25      	cmp	r3, #37	; 0x25
 8013ebc:	d0c7      	beq.n	8013e4e <__ssvfiscanf_r+0x76>
 8013ebe:	d857      	bhi.n	8013f70 <__ssvfiscanf_r+0x198>
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d065      	beq.n	8013f90 <__ssvfiscanf_r+0x1b8>
 8013ec4:	2303      	movs	r3, #3
 8013ec6:	9347      	str	r3, [sp, #284]	; 0x11c
 8013ec8:	230a      	movs	r3, #10
 8013eca:	9342      	str	r3, [sp, #264]	; 0x108
 8013ecc:	e076      	b.n	8013fbc <__ssvfiscanf_r+0x1e4>
 8013ece:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013ed0:	fb02 1103 	mla	r1, r2, r3, r1
 8013ed4:	3930      	subs	r1, #48	; 0x30
 8013ed6:	9143      	str	r1, [sp, #268]	; 0x10c
 8013ed8:	4655      	mov	r5, sl
 8013eda:	e7d4      	b.n	8013e86 <__ssvfiscanf_r+0xae>
 8013edc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013ee0:	2a20      	cmp	r2, #32
 8013ee2:	d8ef      	bhi.n	8013ec4 <__ssvfiscanf_r+0xec>
 8013ee4:	a101      	add	r1, pc, #4	; (adr r1, 8013eec <__ssvfiscanf_r+0x114>)
 8013ee6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013eea:	bf00      	nop
 8013eec:	08013f9f 	.word	0x08013f9f
 8013ef0:	08013ec5 	.word	0x08013ec5
 8013ef4:	08013ec5 	.word	0x08013ec5
 8013ef8:	08013ffd 	.word	0x08013ffd
 8013efc:	08013ec5 	.word	0x08013ec5
 8013f00:	08013ec5 	.word	0x08013ec5
 8013f04:	08013ec5 	.word	0x08013ec5
 8013f08:	08013ec5 	.word	0x08013ec5
 8013f0c:	08013ec5 	.word	0x08013ec5
 8013f10:	08013ec5 	.word	0x08013ec5
 8013f14:	08013ec5 	.word	0x08013ec5
 8013f18:	08014013 	.word	0x08014013
 8013f1c:	08013ff9 	.word	0x08013ff9
 8013f20:	08013f77 	.word	0x08013f77
 8013f24:	08013f77 	.word	0x08013f77
 8013f28:	08013f77 	.word	0x08013f77
 8013f2c:	08013ec5 	.word	0x08013ec5
 8013f30:	08013fb5 	.word	0x08013fb5
 8013f34:	08013ec5 	.word	0x08013ec5
 8013f38:	08013ec5 	.word	0x08013ec5
 8013f3c:	08013ec5 	.word	0x08013ec5
 8013f40:	08013ec5 	.word	0x08013ec5
 8013f44:	08014023 	.word	0x08014023
 8013f48:	08013ff1 	.word	0x08013ff1
 8013f4c:	08013f97 	.word	0x08013f97
 8013f50:	08013ec5 	.word	0x08013ec5
 8013f54:	08013ec5 	.word	0x08013ec5
 8013f58:	0801401f 	.word	0x0801401f
 8013f5c:	08013ec5 	.word	0x08013ec5
 8013f60:	08013ff9 	.word	0x08013ff9
 8013f64:	08013ec5 	.word	0x08013ec5
 8013f68:	08013ec5 	.word	0x08013ec5
 8013f6c:	08013f9f 	.word	0x08013f9f
 8013f70:	3b45      	subs	r3, #69	; 0x45
 8013f72:	2b02      	cmp	r3, #2
 8013f74:	d8a6      	bhi.n	8013ec4 <__ssvfiscanf_r+0xec>
 8013f76:	2305      	movs	r3, #5
 8013f78:	e01f      	b.n	8013fba <__ssvfiscanf_r+0x1e2>
 8013f7a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013f7c:	4621      	mov	r1, r4
 8013f7e:	4630      	mov	r0, r6
 8013f80:	4798      	blx	r3
 8013f82:	2800      	cmp	r0, #0
 8013f84:	f43f af68 	beq.w	8013e58 <__ssvfiscanf_r+0x80>
 8013f88:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013f8a:	2800      	cmp	r0, #0
 8013f8c:	f040 808d 	bne.w	80140aa <__ssvfiscanf_r+0x2d2>
 8013f90:	f04f 30ff 	mov.w	r0, #4294967295
 8013f94:	e08f      	b.n	80140b6 <__ssvfiscanf_r+0x2de>
 8013f96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013f98:	f042 0220 	orr.w	r2, r2, #32
 8013f9c:	9241      	str	r2, [sp, #260]	; 0x104
 8013f9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013fa4:	9241      	str	r2, [sp, #260]	; 0x104
 8013fa6:	2210      	movs	r2, #16
 8013fa8:	2b6f      	cmp	r3, #111	; 0x6f
 8013faa:	9242      	str	r2, [sp, #264]	; 0x108
 8013fac:	bf34      	ite	cc
 8013fae:	2303      	movcc	r3, #3
 8013fb0:	2304      	movcs	r3, #4
 8013fb2:	e002      	b.n	8013fba <__ssvfiscanf_r+0x1e2>
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	9342      	str	r3, [sp, #264]	; 0x108
 8013fb8:	2303      	movs	r3, #3
 8013fba:	9347      	str	r3, [sp, #284]	; 0x11c
 8013fbc:	6863      	ldr	r3, [r4, #4]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	dd3d      	ble.n	801403e <__ssvfiscanf_r+0x266>
 8013fc2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013fc4:	0659      	lsls	r1, r3, #25
 8013fc6:	d404      	bmi.n	8013fd2 <__ssvfiscanf_r+0x1fa>
 8013fc8:	6823      	ldr	r3, [r4, #0]
 8013fca:	781a      	ldrb	r2, [r3, #0]
 8013fcc:	5cba      	ldrb	r2, [r7, r2]
 8013fce:	0712      	lsls	r2, r2, #28
 8013fd0:	d43c      	bmi.n	801404c <__ssvfiscanf_r+0x274>
 8013fd2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013fd4:	2b02      	cmp	r3, #2
 8013fd6:	dc4b      	bgt.n	8014070 <__ssvfiscanf_r+0x298>
 8013fd8:	466b      	mov	r3, sp
 8013fda:	4622      	mov	r2, r4
 8013fdc:	a941      	add	r1, sp, #260	; 0x104
 8013fde:	4630      	mov	r0, r6
 8013fe0:	f000 f872 	bl	80140c8 <_scanf_chars>
 8013fe4:	2801      	cmp	r0, #1
 8013fe6:	d06a      	beq.n	80140be <__ssvfiscanf_r+0x2e6>
 8013fe8:	2802      	cmp	r0, #2
 8013fea:	f47f af1c 	bne.w	8013e26 <__ssvfiscanf_r+0x4e>
 8013fee:	e7cb      	b.n	8013f88 <__ssvfiscanf_r+0x1b0>
 8013ff0:	2308      	movs	r3, #8
 8013ff2:	9342      	str	r3, [sp, #264]	; 0x108
 8013ff4:	2304      	movs	r3, #4
 8013ff6:	e7e0      	b.n	8013fba <__ssvfiscanf_r+0x1e2>
 8013ff8:	220a      	movs	r2, #10
 8013ffa:	e7d5      	b.n	8013fa8 <__ssvfiscanf_r+0x1d0>
 8013ffc:	4629      	mov	r1, r5
 8013ffe:	4640      	mov	r0, r8
 8014000:	f000 fa12 	bl	8014428 <__sccl>
 8014004:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801400a:	9341      	str	r3, [sp, #260]	; 0x104
 801400c:	4605      	mov	r5, r0
 801400e:	2301      	movs	r3, #1
 8014010:	e7d3      	b.n	8013fba <__ssvfiscanf_r+0x1e2>
 8014012:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014018:	9341      	str	r3, [sp, #260]	; 0x104
 801401a:	2300      	movs	r3, #0
 801401c:	e7cd      	b.n	8013fba <__ssvfiscanf_r+0x1e2>
 801401e:	2302      	movs	r3, #2
 8014020:	e7cb      	b.n	8013fba <__ssvfiscanf_r+0x1e2>
 8014022:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014024:	06c3      	lsls	r3, r0, #27
 8014026:	f53f aefe 	bmi.w	8013e26 <__ssvfiscanf_r+0x4e>
 801402a:	9b00      	ldr	r3, [sp, #0]
 801402c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801402e:	1d19      	adds	r1, r3, #4
 8014030:	9100      	str	r1, [sp, #0]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	07c0      	lsls	r0, r0, #31
 8014036:	bf4c      	ite	mi
 8014038:	801a      	strhmi	r2, [r3, #0]
 801403a:	601a      	strpl	r2, [r3, #0]
 801403c:	e6f3      	b.n	8013e26 <__ssvfiscanf_r+0x4e>
 801403e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014040:	4621      	mov	r1, r4
 8014042:	4630      	mov	r0, r6
 8014044:	4798      	blx	r3
 8014046:	2800      	cmp	r0, #0
 8014048:	d0bb      	beq.n	8013fc2 <__ssvfiscanf_r+0x1ea>
 801404a:	e79d      	b.n	8013f88 <__ssvfiscanf_r+0x1b0>
 801404c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801404e:	3201      	adds	r2, #1
 8014050:	9245      	str	r2, [sp, #276]	; 0x114
 8014052:	6862      	ldr	r2, [r4, #4]
 8014054:	3a01      	subs	r2, #1
 8014056:	2a00      	cmp	r2, #0
 8014058:	6062      	str	r2, [r4, #4]
 801405a:	dd02      	ble.n	8014062 <__ssvfiscanf_r+0x28a>
 801405c:	3301      	adds	r3, #1
 801405e:	6023      	str	r3, [r4, #0]
 8014060:	e7b2      	b.n	8013fc8 <__ssvfiscanf_r+0x1f0>
 8014062:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014064:	4621      	mov	r1, r4
 8014066:	4630      	mov	r0, r6
 8014068:	4798      	blx	r3
 801406a:	2800      	cmp	r0, #0
 801406c:	d0ac      	beq.n	8013fc8 <__ssvfiscanf_r+0x1f0>
 801406e:	e78b      	b.n	8013f88 <__ssvfiscanf_r+0x1b0>
 8014070:	2b04      	cmp	r3, #4
 8014072:	dc0f      	bgt.n	8014094 <__ssvfiscanf_r+0x2bc>
 8014074:	466b      	mov	r3, sp
 8014076:	4622      	mov	r2, r4
 8014078:	a941      	add	r1, sp, #260	; 0x104
 801407a:	4630      	mov	r0, r6
 801407c:	f000 f87e 	bl	801417c <_scanf_i>
 8014080:	e7b0      	b.n	8013fe4 <__ssvfiscanf_r+0x20c>
 8014082:	bf00      	nop
 8014084:	08013d23 	.word	0x08013d23
 8014088:	08013d9d 	.word	0x08013d9d
 801408c:	08017296 	.word	0x08017296
 8014090:	08017488 	.word	0x08017488
 8014094:	4b0b      	ldr	r3, [pc, #44]	; (80140c4 <__ssvfiscanf_r+0x2ec>)
 8014096:	2b00      	cmp	r3, #0
 8014098:	f43f aec5 	beq.w	8013e26 <__ssvfiscanf_r+0x4e>
 801409c:	466b      	mov	r3, sp
 801409e:	4622      	mov	r2, r4
 80140a0:	a941      	add	r1, sp, #260	; 0x104
 80140a2:	4630      	mov	r0, r6
 80140a4:	f3af 8000 	nop.w
 80140a8:	e79c      	b.n	8013fe4 <__ssvfiscanf_r+0x20c>
 80140aa:	89a3      	ldrh	r3, [r4, #12]
 80140ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80140b0:	bf18      	it	ne
 80140b2:	f04f 30ff 	movne.w	r0, #4294967295
 80140b6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80140ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140be:	9844      	ldr	r0, [sp, #272]	; 0x110
 80140c0:	e7f9      	b.n	80140b6 <__ssvfiscanf_r+0x2de>
 80140c2:	bf00      	nop
 80140c4:	00000000 	.word	0x00000000

080140c8 <_scanf_chars>:
 80140c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140cc:	4615      	mov	r5, r2
 80140ce:	688a      	ldr	r2, [r1, #8]
 80140d0:	4680      	mov	r8, r0
 80140d2:	460c      	mov	r4, r1
 80140d4:	b932      	cbnz	r2, 80140e4 <_scanf_chars+0x1c>
 80140d6:	698a      	ldr	r2, [r1, #24]
 80140d8:	2a00      	cmp	r2, #0
 80140da:	bf0c      	ite	eq
 80140dc:	2201      	moveq	r2, #1
 80140de:	f04f 32ff 	movne.w	r2, #4294967295
 80140e2:	608a      	str	r2, [r1, #8]
 80140e4:	6822      	ldr	r2, [r4, #0]
 80140e6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8014178 <_scanf_chars+0xb0>
 80140ea:	06d1      	lsls	r1, r2, #27
 80140ec:	bf5f      	itttt	pl
 80140ee:	681a      	ldrpl	r2, [r3, #0]
 80140f0:	1d11      	addpl	r1, r2, #4
 80140f2:	6019      	strpl	r1, [r3, #0]
 80140f4:	6816      	ldrpl	r6, [r2, #0]
 80140f6:	2700      	movs	r7, #0
 80140f8:	69a0      	ldr	r0, [r4, #24]
 80140fa:	b188      	cbz	r0, 8014120 <_scanf_chars+0x58>
 80140fc:	2801      	cmp	r0, #1
 80140fe:	d107      	bne.n	8014110 <_scanf_chars+0x48>
 8014100:	682a      	ldr	r2, [r5, #0]
 8014102:	7811      	ldrb	r1, [r2, #0]
 8014104:	6962      	ldr	r2, [r4, #20]
 8014106:	5c52      	ldrb	r2, [r2, r1]
 8014108:	b952      	cbnz	r2, 8014120 <_scanf_chars+0x58>
 801410a:	2f00      	cmp	r7, #0
 801410c:	d031      	beq.n	8014172 <_scanf_chars+0xaa>
 801410e:	e022      	b.n	8014156 <_scanf_chars+0x8e>
 8014110:	2802      	cmp	r0, #2
 8014112:	d120      	bne.n	8014156 <_scanf_chars+0x8e>
 8014114:	682b      	ldr	r3, [r5, #0]
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	f819 3003 	ldrb.w	r3, [r9, r3]
 801411c:	071b      	lsls	r3, r3, #28
 801411e:	d41a      	bmi.n	8014156 <_scanf_chars+0x8e>
 8014120:	6823      	ldr	r3, [r4, #0]
 8014122:	06da      	lsls	r2, r3, #27
 8014124:	bf5e      	ittt	pl
 8014126:	682b      	ldrpl	r3, [r5, #0]
 8014128:	781b      	ldrbpl	r3, [r3, #0]
 801412a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801412e:	682a      	ldr	r2, [r5, #0]
 8014130:	686b      	ldr	r3, [r5, #4]
 8014132:	3201      	adds	r2, #1
 8014134:	602a      	str	r2, [r5, #0]
 8014136:	68a2      	ldr	r2, [r4, #8]
 8014138:	3b01      	subs	r3, #1
 801413a:	3a01      	subs	r2, #1
 801413c:	606b      	str	r3, [r5, #4]
 801413e:	3701      	adds	r7, #1
 8014140:	60a2      	str	r2, [r4, #8]
 8014142:	b142      	cbz	r2, 8014156 <_scanf_chars+0x8e>
 8014144:	2b00      	cmp	r3, #0
 8014146:	dcd7      	bgt.n	80140f8 <_scanf_chars+0x30>
 8014148:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801414c:	4629      	mov	r1, r5
 801414e:	4640      	mov	r0, r8
 8014150:	4798      	blx	r3
 8014152:	2800      	cmp	r0, #0
 8014154:	d0d0      	beq.n	80140f8 <_scanf_chars+0x30>
 8014156:	6823      	ldr	r3, [r4, #0]
 8014158:	f013 0310 	ands.w	r3, r3, #16
 801415c:	d105      	bne.n	801416a <_scanf_chars+0xa2>
 801415e:	68e2      	ldr	r2, [r4, #12]
 8014160:	3201      	adds	r2, #1
 8014162:	60e2      	str	r2, [r4, #12]
 8014164:	69a2      	ldr	r2, [r4, #24]
 8014166:	b102      	cbz	r2, 801416a <_scanf_chars+0xa2>
 8014168:	7033      	strb	r3, [r6, #0]
 801416a:	6923      	ldr	r3, [r4, #16]
 801416c:	443b      	add	r3, r7
 801416e:	6123      	str	r3, [r4, #16]
 8014170:	2000      	movs	r0, #0
 8014172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014176:	bf00      	nop
 8014178:	08017296 	.word	0x08017296

0801417c <_scanf_i>:
 801417c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014180:	4698      	mov	r8, r3
 8014182:	4b74      	ldr	r3, [pc, #464]	; (8014354 <_scanf_i+0x1d8>)
 8014184:	460c      	mov	r4, r1
 8014186:	4682      	mov	sl, r0
 8014188:	4616      	mov	r6, r2
 801418a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801418e:	b087      	sub	sp, #28
 8014190:	ab03      	add	r3, sp, #12
 8014192:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014196:	4b70      	ldr	r3, [pc, #448]	; (8014358 <_scanf_i+0x1dc>)
 8014198:	69a1      	ldr	r1, [r4, #24]
 801419a:	4a70      	ldr	r2, [pc, #448]	; (801435c <_scanf_i+0x1e0>)
 801419c:	2903      	cmp	r1, #3
 801419e:	bf18      	it	ne
 80141a0:	461a      	movne	r2, r3
 80141a2:	68a3      	ldr	r3, [r4, #8]
 80141a4:	9201      	str	r2, [sp, #4]
 80141a6:	1e5a      	subs	r2, r3, #1
 80141a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80141ac:	bf88      	it	hi
 80141ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80141b2:	4627      	mov	r7, r4
 80141b4:	bf82      	ittt	hi
 80141b6:	eb03 0905 	addhi.w	r9, r3, r5
 80141ba:	f240 135d 	movwhi	r3, #349	; 0x15d
 80141be:	60a3      	strhi	r3, [r4, #8]
 80141c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80141c4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80141c8:	bf98      	it	ls
 80141ca:	f04f 0900 	movls.w	r9, #0
 80141ce:	6023      	str	r3, [r4, #0]
 80141d0:	463d      	mov	r5, r7
 80141d2:	f04f 0b00 	mov.w	fp, #0
 80141d6:	6831      	ldr	r1, [r6, #0]
 80141d8:	ab03      	add	r3, sp, #12
 80141da:	7809      	ldrb	r1, [r1, #0]
 80141dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80141e0:	2202      	movs	r2, #2
 80141e2:	f7ec f82d 	bl	8000240 <memchr>
 80141e6:	b328      	cbz	r0, 8014234 <_scanf_i+0xb8>
 80141e8:	f1bb 0f01 	cmp.w	fp, #1
 80141ec:	d159      	bne.n	80142a2 <_scanf_i+0x126>
 80141ee:	6862      	ldr	r2, [r4, #4]
 80141f0:	b92a      	cbnz	r2, 80141fe <_scanf_i+0x82>
 80141f2:	6822      	ldr	r2, [r4, #0]
 80141f4:	2308      	movs	r3, #8
 80141f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80141fa:	6063      	str	r3, [r4, #4]
 80141fc:	6022      	str	r2, [r4, #0]
 80141fe:	6822      	ldr	r2, [r4, #0]
 8014200:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014204:	6022      	str	r2, [r4, #0]
 8014206:	68a2      	ldr	r2, [r4, #8]
 8014208:	1e51      	subs	r1, r2, #1
 801420a:	60a1      	str	r1, [r4, #8]
 801420c:	b192      	cbz	r2, 8014234 <_scanf_i+0xb8>
 801420e:	6832      	ldr	r2, [r6, #0]
 8014210:	1c51      	adds	r1, r2, #1
 8014212:	6031      	str	r1, [r6, #0]
 8014214:	7812      	ldrb	r2, [r2, #0]
 8014216:	f805 2b01 	strb.w	r2, [r5], #1
 801421a:	6872      	ldr	r2, [r6, #4]
 801421c:	3a01      	subs	r2, #1
 801421e:	2a00      	cmp	r2, #0
 8014220:	6072      	str	r2, [r6, #4]
 8014222:	dc07      	bgt.n	8014234 <_scanf_i+0xb8>
 8014224:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014228:	4631      	mov	r1, r6
 801422a:	4650      	mov	r0, sl
 801422c:	4790      	blx	r2
 801422e:	2800      	cmp	r0, #0
 8014230:	f040 8085 	bne.w	801433e <_scanf_i+0x1c2>
 8014234:	f10b 0b01 	add.w	fp, fp, #1
 8014238:	f1bb 0f03 	cmp.w	fp, #3
 801423c:	d1cb      	bne.n	80141d6 <_scanf_i+0x5a>
 801423e:	6863      	ldr	r3, [r4, #4]
 8014240:	b90b      	cbnz	r3, 8014246 <_scanf_i+0xca>
 8014242:	230a      	movs	r3, #10
 8014244:	6063      	str	r3, [r4, #4]
 8014246:	6863      	ldr	r3, [r4, #4]
 8014248:	4945      	ldr	r1, [pc, #276]	; (8014360 <_scanf_i+0x1e4>)
 801424a:	6960      	ldr	r0, [r4, #20]
 801424c:	1ac9      	subs	r1, r1, r3
 801424e:	f000 f8eb 	bl	8014428 <__sccl>
 8014252:	f04f 0b00 	mov.w	fp, #0
 8014256:	68a3      	ldr	r3, [r4, #8]
 8014258:	6822      	ldr	r2, [r4, #0]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d03d      	beq.n	80142da <_scanf_i+0x15e>
 801425e:	6831      	ldr	r1, [r6, #0]
 8014260:	6960      	ldr	r0, [r4, #20]
 8014262:	f891 c000 	ldrb.w	ip, [r1]
 8014266:	f810 000c 	ldrb.w	r0, [r0, ip]
 801426a:	2800      	cmp	r0, #0
 801426c:	d035      	beq.n	80142da <_scanf_i+0x15e>
 801426e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8014272:	d124      	bne.n	80142be <_scanf_i+0x142>
 8014274:	0510      	lsls	r0, r2, #20
 8014276:	d522      	bpl.n	80142be <_scanf_i+0x142>
 8014278:	f10b 0b01 	add.w	fp, fp, #1
 801427c:	f1b9 0f00 	cmp.w	r9, #0
 8014280:	d003      	beq.n	801428a <_scanf_i+0x10e>
 8014282:	3301      	adds	r3, #1
 8014284:	f109 39ff 	add.w	r9, r9, #4294967295
 8014288:	60a3      	str	r3, [r4, #8]
 801428a:	6873      	ldr	r3, [r6, #4]
 801428c:	3b01      	subs	r3, #1
 801428e:	2b00      	cmp	r3, #0
 8014290:	6073      	str	r3, [r6, #4]
 8014292:	dd1b      	ble.n	80142cc <_scanf_i+0x150>
 8014294:	6833      	ldr	r3, [r6, #0]
 8014296:	3301      	adds	r3, #1
 8014298:	6033      	str	r3, [r6, #0]
 801429a:	68a3      	ldr	r3, [r4, #8]
 801429c:	3b01      	subs	r3, #1
 801429e:	60a3      	str	r3, [r4, #8]
 80142a0:	e7d9      	b.n	8014256 <_scanf_i+0xda>
 80142a2:	f1bb 0f02 	cmp.w	fp, #2
 80142a6:	d1ae      	bne.n	8014206 <_scanf_i+0x8a>
 80142a8:	6822      	ldr	r2, [r4, #0]
 80142aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80142ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80142b2:	d1bf      	bne.n	8014234 <_scanf_i+0xb8>
 80142b4:	2310      	movs	r3, #16
 80142b6:	6063      	str	r3, [r4, #4]
 80142b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80142bc:	e7a2      	b.n	8014204 <_scanf_i+0x88>
 80142be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80142c2:	6022      	str	r2, [r4, #0]
 80142c4:	780b      	ldrb	r3, [r1, #0]
 80142c6:	f805 3b01 	strb.w	r3, [r5], #1
 80142ca:	e7de      	b.n	801428a <_scanf_i+0x10e>
 80142cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80142d0:	4631      	mov	r1, r6
 80142d2:	4650      	mov	r0, sl
 80142d4:	4798      	blx	r3
 80142d6:	2800      	cmp	r0, #0
 80142d8:	d0df      	beq.n	801429a <_scanf_i+0x11e>
 80142da:	6823      	ldr	r3, [r4, #0]
 80142dc:	05d9      	lsls	r1, r3, #23
 80142de:	d50d      	bpl.n	80142fc <_scanf_i+0x180>
 80142e0:	42bd      	cmp	r5, r7
 80142e2:	d909      	bls.n	80142f8 <_scanf_i+0x17c>
 80142e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80142e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80142ec:	4632      	mov	r2, r6
 80142ee:	4650      	mov	r0, sl
 80142f0:	4798      	blx	r3
 80142f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80142f6:	464d      	mov	r5, r9
 80142f8:	42bd      	cmp	r5, r7
 80142fa:	d028      	beq.n	801434e <_scanf_i+0x1d2>
 80142fc:	6822      	ldr	r2, [r4, #0]
 80142fe:	f012 0210 	ands.w	r2, r2, #16
 8014302:	d113      	bne.n	801432c <_scanf_i+0x1b0>
 8014304:	702a      	strb	r2, [r5, #0]
 8014306:	6863      	ldr	r3, [r4, #4]
 8014308:	9e01      	ldr	r6, [sp, #4]
 801430a:	4639      	mov	r1, r7
 801430c:	4650      	mov	r0, sl
 801430e:	47b0      	blx	r6
 8014310:	f8d8 3000 	ldr.w	r3, [r8]
 8014314:	6821      	ldr	r1, [r4, #0]
 8014316:	1d1a      	adds	r2, r3, #4
 8014318:	f8c8 2000 	str.w	r2, [r8]
 801431c:	f011 0f20 	tst.w	r1, #32
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	d00f      	beq.n	8014344 <_scanf_i+0x1c8>
 8014324:	6018      	str	r0, [r3, #0]
 8014326:	68e3      	ldr	r3, [r4, #12]
 8014328:	3301      	adds	r3, #1
 801432a:	60e3      	str	r3, [r4, #12]
 801432c:	6923      	ldr	r3, [r4, #16]
 801432e:	1bed      	subs	r5, r5, r7
 8014330:	445d      	add	r5, fp
 8014332:	442b      	add	r3, r5
 8014334:	6123      	str	r3, [r4, #16]
 8014336:	2000      	movs	r0, #0
 8014338:	b007      	add	sp, #28
 801433a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801433e:	f04f 0b00 	mov.w	fp, #0
 8014342:	e7ca      	b.n	80142da <_scanf_i+0x15e>
 8014344:	07ca      	lsls	r2, r1, #31
 8014346:	bf4c      	ite	mi
 8014348:	8018      	strhmi	r0, [r3, #0]
 801434a:	6018      	strpl	r0, [r3, #0]
 801434c:	e7eb      	b.n	8014326 <_scanf_i+0x1aa>
 801434e:	2001      	movs	r0, #1
 8014350:	e7f2      	b.n	8014338 <_scanf_i+0x1bc>
 8014352:	bf00      	nop
 8014354:	08017114 	.word	0x08017114
 8014358:	080133b1 	.word	0x080133b1
 801435c:	0801204d 	.word	0x0801204d
 8014360:	08017528 	.word	0x08017528

08014364 <__swhatbuf_r>:
 8014364:	b570      	push	{r4, r5, r6, lr}
 8014366:	460c      	mov	r4, r1
 8014368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801436c:	2900      	cmp	r1, #0
 801436e:	b096      	sub	sp, #88	; 0x58
 8014370:	4615      	mov	r5, r2
 8014372:	461e      	mov	r6, r3
 8014374:	da0d      	bge.n	8014392 <__swhatbuf_r+0x2e>
 8014376:	89a3      	ldrh	r3, [r4, #12]
 8014378:	f013 0f80 	tst.w	r3, #128	; 0x80
 801437c:	f04f 0100 	mov.w	r1, #0
 8014380:	bf0c      	ite	eq
 8014382:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014386:	2340      	movne	r3, #64	; 0x40
 8014388:	2000      	movs	r0, #0
 801438a:	6031      	str	r1, [r6, #0]
 801438c:	602b      	str	r3, [r5, #0]
 801438e:	b016      	add	sp, #88	; 0x58
 8014390:	bd70      	pop	{r4, r5, r6, pc}
 8014392:	466a      	mov	r2, sp
 8014394:	f000 f8ec 	bl	8014570 <_fstat_r>
 8014398:	2800      	cmp	r0, #0
 801439a:	dbec      	blt.n	8014376 <__swhatbuf_r+0x12>
 801439c:	9901      	ldr	r1, [sp, #4]
 801439e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80143a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80143a6:	4259      	negs	r1, r3
 80143a8:	4159      	adcs	r1, r3
 80143aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80143ae:	e7eb      	b.n	8014388 <__swhatbuf_r+0x24>

080143b0 <__smakebuf_r>:
 80143b0:	898b      	ldrh	r3, [r1, #12]
 80143b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80143b4:	079d      	lsls	r5, r3, #30
 80143b6:	4606      	mov	r6, r0
 80143b8:	460c      	mov	r4, r1
 80143ba:	d507      	bpl.n	80143cc <__smakebuf_r+0x1c>
 80143bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80143c0:	6023      	str	r3, [r4, #0]
 80143c2:	6123      	str	r3, [r4, #16]
 80143c4:	2301      	movs	r3, #1
 80143c6:	6163      	str	r3, [r4, #20]
 80143c8:	b002      	add	sp, #8
 80143ca:	bd70      	pop	{r4, r5, r6, pc}
 80143cc:	ab01      	add	r3, sp, #4
 80143ce:	466a      	mov	r2, sp
 80143d0:	f7ff ffc8 	bl	8014364 <__swhatbuf_r>
 80143d4:	9900      	ldr	r1, [sp, #0]
 80143d6:	4605      	mov	r5, r0
 80143d8:	4630      	mov	r0, r6
 80143da:	f7fe feeb 	bl	80131b4 <_malloc_r>
 80143de:	b948      	cbnz	r0, 80143f4 <__smakebuf_r+0x44>
 80143e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143e4:	059a      	lsls	r2, r3, #22
 80143e6:	d4ef      	bmi.n	80143c8 <__smakebuf_r+0x18>
 80143e8:	f023 0303 	bic.w	r3, r3, #3
 80143ec:	f043 0302 	orr.w	r3, r3, #2
 80143f0:	81a3      	strh	r3, [r4, #12]
 80143f2:	e7e3      	b.n	80143bc <__smakebuf_r+0xc>
 80143f4:	89a3      	ldrh	r3, [r4, #12]
 80143f6:	6020      	str	r0, [r4, #0]
 80143f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143fc:	81a3      	strh	r3, [r4, #12]
 80143fe:	9b00      	ldr	r3, [sp, #0]
 8014400:	6163      	str	r3, [r4, #20]
 8014402:	9b01      	ldr	r3, [sp, #4]
 8014404:	6120      	str	r0, [r4, #16]
 8014406:	b15b      	cbz	r3, 8014420 <__smakebuf_r+0x70>
 8014408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801440c:	4630      	mov	r0, r6
 801440e:	f000 f8c1 	bl	8014594 <_isatty_r>
 8014412:	b128      	cbz	r0, 8014420 <__smakebuf_r+0x70>
 8014414:	89a3      	ldrh	r3, [r4, #12]
 8014416:	f023 0303 	bic.w	r3, r3, #3
 801441a:	f043 0301 	orr.w	r3, r3, #1
 801441e:	81a3      	strh	r3, [r4, #12]
 8014420:	89a3      	ldrh	r3, [r4, #12]
 8014422:	431d      	orrs	r5, r3
 8014424:	81a5      	strh	r5, [r4, #12]
 8014426:	e7cf      	b.n	80143c8 <__smakebuf_r+0x18>

08014428 <__sccl>:
 8014428:	b570      	push	{r4, r5, r6, lr}
 801442a:	780b      	ldrb	r3, [r1, #0]
 801442c:	4604      	mov	r4, r0
 801442e:	2b5e      	cmp	r3, #94	; 0x5e
 8014430:	bf0b      	itete	eq
 8014432:	784b      	ldrbeq	r3, [r1, #1]
 8014434:	1c4a      	addne	r2, r1, #1
 8014436:	1c8a      	addeq	r2, r1, #2
 8014438:	2100      	movne	r1, #0
 801443a:	bf08      	it	eq
 801443c:	2101      	moveq	r1, #1
 801443e:	3801      	subs	r0, #1
 8014440:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014444:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014448:	42a8      	cmp	r0, r5
 801444a:	d1fb      	bne.n	8014444 <__sccl+0x1c>
 801444c:	b90b      	cbnz	r3, 8014452 <__sccl+0x2a>
 801444e:	1e50      	subs	r0, r2, #1
 8014450:	bd70      	pop	{r4, r5, r6, pc}
 8014452:	f081 0101 	eor.w	r1, r1, #1
 8014456:	54e1      	strb	r1, [r4, r3]
 8014458:	4610      	mov	r0, r2
 801445a:	4602      	mov	r2, r0
 801445c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014460:	2d2d      	cmp	r5, #45	; 0x2d
 8014462:	d005      	beq.n	8014470 <__sccl+0x48>
 8014464:	2d5d      	cmp	r5, #93	; 0x5d
 8014466:	d016      	beq.n	8014496 <__sccl+0x6e>
 8014468:	2d00      	cmp	r5, #0
 801446a:	d0f1      	beq.n	8014450 <__sccl+0x28>
 801446c:	462b      	mov	r3, r5
 801446e:	e7f2      	b.n	8014456 <__sccl+0x2e>
 8014470:	7846      	ldrb	r6, [r0, #1]
 8014472:	2e5d      	cmp	r6, #93	; 0x5d
 8014474:	d0fa      	beq.n	801446c <__sccl+0x44>
 8014476:	42b3      	cmp	r3, r6
 8014478:	dcf8      	bgt.n	801446c <__sccl+0x44>
 801447a:	3002      	adds	r0, #2
 801447c:	461a      	mov	r2, r3
 801447e:	3201      	adds	r2, #1
 8014480:	4296      	cmp	r6, r2
 8014482:	54a1      	strb	r1, [r4, r2]
 8014484:	dcfb      	bgt.n	801447e <__sccl+0x56>
 8014486:	1af2      	subs	r2, r6, r3
 8014488:	3a01      	subs	r2, #1
 801448a:	1c5d      	adds	r5, r3, #1
 801448c:	42b3      	cmp	r3, r6
 801448e:	bfa8      	it	ge
 8014490:	2200      	movge	r2, #0
 8014492:	18ab      	adds	r3, r5, r2
 8014494:	e7e1      	b.n	801445a <__sccl+0x32>
 8014496:	4610      	mov	r0, r2
 8014498:	e7da      	b.n	8014450 <__sccl+0x28>

0801449a <__submore>:
 801449a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801449e:	460c      	mov	r4, r1
 80144a0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80144a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80144a6:	4299      	cmp	r1, r3
 80144a8:	d11d      	bne.n	80144e6 <__submore+0x4c>
 80144aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80144ae:	f7fe fe81 	bl	80131b4 <_malloc_r>
 80144b2:	b918      	cbnz	r0, 80144bc <__submore+0x22>
 80144b4:	f04f 30ff 	mov.w	r0, #4294967295
 80144b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80144c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80144c2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80144c6:	6360      	str	r0, [r4, #52]	; 0x34
 80144c8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80144cc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80144d0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80144d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80144d8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80144dc:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80144e0:	6020      	str	r0, [r4, #0]
 80144e2:	2000      	movs	r0, #0
 80144e4:	e7e8      	b.n	80144b8 <__submore+0x1e>
 80144e6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80144e8:	0077      	lsls	r7, r6, #1
 80144ea:	463a      	mov	r2, r7
 80144ec:	f7ff fbea 	bl	8013cc4 <_realloc_r>
 80144f0:	4605      	mov	r5, r0
 80144f2:	2800      	cmp	r0, #0
 80144f4:	d0de      	beq.n	80144b4 <__submore+0x1a>
 80144f6:	eb00 0806 	add.w	r8, r0, r6
 80144fa:	4601      	mov	r1, r0
 80144fc:	4632      	mov	r2, r6
 80144fe:	4640      	mov	r0, r8
 8014500:	f7fe fd57 	bl	8012fb2 <memcpy>
 8014504:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014508:	f8c4 8000 	str.w	r8, [r4]
 801450c:	e7e9      	b.n	80144e2 <__submore+0x48>

0801450e <_raise_r>:
 801450e:	291f      	cmp	r1, #31
 8014510:	b538      	push	{r3, r4, r5, lr}
 8014512:	4604      	mov	r4, r0
 8014514:	460d      	mov	r5, r1
 8014516:	d904      	bls.n	8014522 <_raise_r+0x14>
 8014518:	2316      	movs	r3, #22
 801451a:	6003      	str	r3, [r0, #0]
 801451c:	f04f 30ff 	mov.w	r0, #4294967295
 8014520:	bd38      	pop	{r3, r4, r5, pc}
 8014522:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014524:	b112      	cbz	r2, 801452c <_raise_r+0x1e>
 8014526:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801452a:	b94b      	cbnz	r3, 8014540 <_raise_r+0x32>
 801452c:	4620      	mov	r0, r4
 801452e:	f000 f853 	bl	80145d8 <_getpid_r>
 8014532:	462a      	mov	r2, r5
 8014534:	4601      	mov	r1, r0
 8014536:	4620      	mov	r0, r4
 8014538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801453c:	f000 b83a 	b.w	80145b4 <_kill_r>
 8014540:	2b01      	cmp	r3, #1
 8014542:	d00a      	beq.n	801455a <_raise_r+0x4c>
 8014544:	1c59      	adds	r1, r3, #1
 8014546:	d103      	bne.n	8014550 <_raise_r+0x42>
 8014548:	2316      	movs	r3, #22
 801454a:	6003      	str	r3, [r0, #0]
 801454c:	2001      	movs	r0, #1
 801454e:	e7e7      	b.n	8014520 <_raise_r+0x12>
 8014550:	2400      	movs	r4, #0
 8014552:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014556:	4628      	mov	r0, r5
 8014558:	4798      	blx	r3
 801455a:	2000      	movs	r0, #0
 801455c:	e7e0      	b.n	8014520 <_raise_r+0x12>
	...

08014560 <raise>:
 8014560:	4b02      	ldr	r3, [pc, #8]	; (801456c <raise+0xc>)
 8014562:	4601      	mov	r1, r0
 8014564:	6818      	ldr	r0, [r3, #0]
 8014566:	f7ff bfd2 	b.w	801450e <_raise_r>
 801456a:	bf00      	nop
 801456c:	20000090 	.word	0x20000090

08014570 <_fstat_r>:
 8014570:	b538      	push	{r3, r4, r5, lr}
 8014572:	4d07      	ldr	r5, [pc, #28]	; (8014590 <_fstat_r+0x20>)
 8014574:	2300      	movs	r3, #0
 8014576:	4604      	mov	r4, r0
 8014578:	4608      	mov	r0, r1
 801457a:	4611      	mov	r1, r2
 801457c:	602b      	str	r3, [r5, #0]
 801457e:	f7ed fc1c 	bl	8001dba <_fstat>
 8014582:	1c43      	adds	r3, r0, #1
 8014584:	d102      	bne.n	801458c <_fstat_r+0x1c>
 8014586:	682b      	ldr	r3, [r5, #0]
 8014588:	b103      	cbz	r3, 801458c <_fstat_r+0x1c>
 801458a:	6023      	str	r3, [r4, #0]
 801458c:	bd38      	pop	{r3, r4, r5, pc}
 801458e:	bf00      	nop
 8014590:	2000ad34 	.word	0x2000ad34

08014594 <_isatty_r>:
 8014594:	b538      	push	{r3, r4, r5, lr}
 8014596:	4d06      	ldr	r5, [pc, #24]	; (80145b0 <_isatty_r+0x1c>)
 8014598:	2300      	movs	r3, #0
 801459a:	4604      	mov	r4, r0
 801459c:	4608      	mov	r0, r1
 801459e:	602b      	str	r3, [r5, #0]
 80145a0:	f7ed fc1b 	bl	8001dda <_isatty>
 80145a4:	1c43      	adds	r3, r0, #1
 80145a6:	d102      	bne.n	80145ae <_isatty_r+0x1a>
 80145a8:	682b      	ldr	r3, [r5, #0]
 80145aa:	b103      	cbz	r3, 80145ae <_isatty_r+0x1a>
 80145ac:	6023      	str	r3, [r4, #0]
 80145ae:	bd38      	pop	{r3, r4, r5, pc}
 80145b0:	2000ad34 	.word	0x2000ad34

080145b4 <_kill_r>:
 80145b4:	b538      	push	{r3, r4, r5, lr}
 80145b6:	4d07      	ldr	r5, [pc, #28]	; (80145d4 <_kill_r+0x20>)
 80145b8:	2300      	movs	r3, #0
 80145ba:	4604      	mov	r4, r0
 80145bc:	4608      	mov	r0, r1
 80145be:	4611      	mov	r1, r2
 80145c0:	602b      	str	r3, [r5, #0]
 80145c2:	f7ed fb99 	bl	8001cf8 <_kill>
 80145c6:	1c43      	adds	r3, r0, #1
 80145c8:	d102      	bne.n	80145d0 <_kill_r+0x1c>
 80145ca:	682b      	ldr	r3, [r5, #0]
 80145cc:	b103      	cbz	r3, 80145d0 <_kill_r+0x1c>
 80145ce:	6023      	str	r3, [r4, #0]
 80145d0:	bd38      	pop	{r3, r4, r5, pc}
 80145d2:	bf00      	nop
 80145d4:	2000ad34 	.word	0x2000ad34

080145d8 <_getpid_r>:
 80145d8:	f7ed bb86 	b.w	8001ce8 <_getpid>

080145dc <_malloc_usable_size_r>:
 80145dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80145e0:	1f18      	subs	r0, r3, #4
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	bfbc      	itt	lt
 80145e6:	580b      	ldrlt	r3, [r1, r0]
 80145e8:	18c0      	addlt	r0, r0, r3
 80145ea:	4770      	bx	lr

080145ec <_init>:
 80145ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145ee:	bf00      	nop
 80145f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145f2:	bc08      	pop	{r3}
 80145f4:	469e      	mov	lr, r3
 80145f6:	4770      	bx	lr

080145f8 <_fini>:
 80145f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145fa:	bf00      	nop
 80145fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145fe:	bc08      	pop	{r3}
 8014600:	469e      	mov	lr, r3
 8014602:	4770      	bx	lr
